'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsPlanilla
    Inherits DataSet
    
  

    Private tablePLPlanilla As PLPlanillaDataTable
    
    Private tableReporte As ReporteDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PLPlanilla")) Is Nothing) Then
                Me.Tables.Add(New PLPlanillaDataTable(ds.Tables("PLPlanilla")))
            End If
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLPlanilla As PLPlanillaDataTable
        Get
            Return Me.tablePLPlanilla
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte As ReporteDataTable
        Get
            Return Me.tableReporte
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsPlanilla = CType(MyBase.Clone,dsPlanilla)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PLPlanilla")) Is Nothing) Then
            Me.Tables.Add(New PLPlanillaDataTable(ds.Tables("PLPlanilla")))
        End If
        If (Not (ds.Tables("Reporte")) Is Nothing) Then
            Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePLPlanilla = CType(Me.Tables("PLPlanilla"),PLPlanillaDataTable)
        If (Not (Me.tablePLPlanilla) Is Nothing) Then
            Me.tablePLPlanilla.InitVars
        End If
        Me.tableReporte = CType(Me.Tables("Reporte"),ReporteDataTable)
        If (Not (Me.tableReporte) Is Nothing) Then
            Me.tableReporte.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsPlanilla"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPlanilla.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePLPlanilla = New PLPlanillaDataTable
        Me.Tables.Add(Me.tablePLPlanilla)
        Me.tableReporte = New ReporteDataTable
        Me.Tables.Add(Me.tableReporte)
    End Sub
    
    Private Function ShouldSerializePLPlanilla() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeReporte() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PLPlanillaRowChangeEventHandler(ByVal sender As Object, ByVal e As PLPlanillaRowChangeEvent)
    
    Public Delegate Sub ReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As ReporteRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PLPlanillaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodEmpleado As DataColumn
        
        Private columnApellido1 As DataColumn
        
        Private columnApellido2 As DataColumn
        
        Private columnApellidoCas As DataColumn
        
        Private columnNombres As DataColumn
        
        Private columnSexo As DataColumn
        
        Private columnCodCargo As DataColumn
        
        Private columnCargo As DataColumn
        
        Private columnCodDepartamento As DataColumn
        
        Private columnDepartamento As DataColumn
        
        Private columnTipoPlanilla As DataColumn
        
        Private columnNombrePlanilla As DataColumn
        
        Private columnSueldoBase As DataColumn
        
        Private columnDT As DataColumn
        
        Private columnSueldoDevengado As DataColumn
        
        Private columnVacaciones As DataColumn
        
        Private columnHorasExtra As DataColumn
        
        Private columnIncapacidades As DataColumn
        
        Private columnOtrosIngresos As DataColumn
        
        Private columnDevengado As DataColumn
        
        Private columnISSS As DataColumn
        
        Private columnIVM As DataColumn
        
        Private columnAFP As DataColumn
        
        Private columnRenta As DataColumn
        
        Private columnBancos As DataColumn
        
        Private columnCooperativa As DataColumn
        
        Private columnDescuentos As DataColumn
        
        Private columnFSV As DataColumn
        
        Private columnSeguro As DataColumn
        
        Private columnMediaBeca As DataColumn
        
        Private columnOtrosDesc As DataColumn
        
        Private columnCodPension As DataColumn
        
        Private columnTotalRecibir As DataColumn
        
        Private columnNoPlaza As DataColumn
        
        Private columnNo As DataColumn
        
        Friend Sub New()
            MyBase.New("PLPlanilla")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodEmpleadoColumn As DataColumn
            Get
                Return Me.columnCodEmpleado
            End Get
        End Property
        
        Friend ReadOnly Property Apellido1Column As DataColumn
            Get
                Return Me.columnApellido1
            End Get
        End Property
        
        Friend ReadOnly Property Apellido2Column As DataColumn
            Get
                Return Me.columnApellido2
            End Get
        End Property
        
        Friend ReadOnly Property ApellidoCasColumn As DataColumn
            Get
                Return Me.columnApellidoCas
            End Get
        End Property
        
        Friend ReadOnly Property NombresColumn As DataColumn
            Get
                Return Me.columnNombres
            End Get
        End Property
        
        Friend ReadOnly Property SexoColumn As DataColumn
            Get
                Return Me.columnSexo
            End Get
        End Property
        
        Friend ReadOnly Property CodCargoColumn As DataColumn
            Get
                Return Me.columnCodCargo
            End Get
        End Property
        
        Friend ReadOnly Property CargoColumn As DataColumn
            Get
                Return Me.columnCargo
            End Get
        End Property
        
        Friend ReadOnly Property CodDepartamentoColumn As DataColumn
            Get
                Return Me.columnCodDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property DepartamentoColumn As DataColumn
            Get
                Return Me.columnDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property TipoPlanillaColumn As DataColumn
            Get
                Return Me.columnTipoPlanilla
            End Get
        End Property
        
        Friend ReadOnly Property NombrePlanillaColumn As DataColumn
            Get
                Return Me.columnNombrePlanilla
            End Get
        End Property
        
        Friend ReadOnly Property SueldoBaseColumn As DataColumn
            Get
                Return Me.columnSueldoBase
            End Get
        End Property
        
        Friend ReadOnly Property DTColumn As DataColumn
            Get
                Return Me.columnDT
            End Get
        End Property
        
        Friend ReadOnly Property SueldoDevengadoColumn As DataColumn
            Get
                Return Me.columnSueldoDevengado
            End Get
        End Property
        
        Friend ReadOnly Property VacacionesColumn As DataColumn
            Get
                Return Me.columnVacaciones
            End Get
        End Property
        
        Friend ReadOnly Property HorasExtraColumn As DataColumn
            Get
                Return Me.columnHorasExtra
            End Get
        End Property
        
        Friend ReadOnly Property IncapacidadesColumn As DataColumn
            Get
                Return Me.columnIncapacidades
            End Get
        End Property
        
        Friend ReadOnly Property OtrosIngresosColumn As DataColumn
            Get
                Return Me.columnOtrosIngresos
            End Get
        End Property
        
        Friend ReadOnly Property DevengadoColumn As DataColumn
            Get
                Return Me.columnDevengado
            End Get
        End Property
        
        Friend ReadOnly Property ISSSColumn As DataColumn
            Get
                Return Me.columnISSS
            End Get
        End Property
        
        Friend ReadOnly Property IVMColumn As DataColumn
            Get
                Return Me.columnIVM
            End Get
        End Property
        
        Friend ReadOnly Property AFPColumn As DataColumn
            Get
                Return Me.columnAFP
            End Get
        End Property
        
        Friend ReadOnly Property RentaColumn As DataColumn
            Get
                Return Me.columnRenta
            End Get
        End Property
        
        Friend ReadOnly Property BancosColumn As DataColumn
            Get
                Return Me.columnBancos
            End Get
        End Property
        
        Friend ReadOnly Property CooperativaColumn As DataColumn
            Get
                Return Me.columnCooperativa
            End Get
        End Property
        
        Friend ReadOnly Property DescuentosColumn As DataColumn
            Get
                Return Me.columnDescuentos
            End Get
        End Property
        
        Friend ReadOnly Property FSVColumn As DataColumn
            Get
                Return Me.columnFSV
            End Get
        End Property
        
        Friend ReadOnly Property SeguroColumn As DataColumn
            Get
                Return Me.columnSeguro
            End Get
        End Property
        
        Friend ReadOnly Property MediaBecaColumn As DataColumn
            Get
                Return Me.columnMediaBeca
            End Get
        End Property
        
        Friend ReadOnly Property OtrosDescColumn As DataColumn
            Get
                Return Me.columnOtrosDesc
            End Get
        End Property
        
        Friend ReadOnly Property CodPensionColumn As DataColumn
            Get
                Return Me.columnCodPension
            End Get
        End Property
        
        Friend ReadOnly Property TotalRecibirColumn As DataColumn
            Get
                Return Me.columnTotalRecibir
            End Get
        End Property
        
        Friend ReadOnly Property NoPlazaColumn As DataColumn
            Get
                Return Me.columnNoPlaza
            End Get
        End Property
        
        Friend ReadOnly Property NoColumn As DataColumn
            Get
                Return Me.columnNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLPlanillaRow
            Get
                Return CType(Me.Rows(index),PLPlanillaRow)
            End Get
        End Property
        
        Public Event PLPlanillaRowChanged As PLPlanillaRowChangeEventHandler
        
        Public Event PLPlanillaRowChanging As PLPlanillaRowChangeEventHandler
        
        Public Event PLPlanillaRowDeleted As PLPlanillaRowChangeEventHandler
        
        Public Event PLPlanillaRowDeleting As PLPlanillaRowChangeEventHandler
        
        Public Overloads Sub AddPLPlanillaRow(ByVal row As PLPlanillaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPLPlanillaRow( _
                    ByVal CodEmpleado As String,  _
                    ByVal Apellido1 As String,  _
                    ByVal Apellido2 As String,  _
                    ByVal ApellidoCas As String,  _
                    ByVal Nombres As String,  _
                    ByVal Sexo As String,  _
                    ByVal CodCargo As String,  _
                    ByVal Cargo As String,  _
                    ByVal CodDepartamento As String,  _
                    ByVal Departamento As String,  _
                    ByVal TipoPlanilla As String,  _
                    ByVal NombrePlanilla As String,  _
                    ByVal SueldoBase As Decimal,  _
                    ByVal DT As Integer,  _
                    ByVal SueldoDevengado As Decimal,  _
                    ByVal Vacaciones As Decimal,  _
                    ByVal HorasExtra As Decimal,  _
                    ByVal Incapacidades As Decimal,  _
                    ByVal OtrosIngresos As Decimal,  _
                    ByVal Devengado As Decimal,  _
                    ByVal ISSS As Decimal,  _
                    ByVal IVM As Decimal,  _
                    ByVal AFP As Decimal,  _
                    ByVal Renta As Decimal,  _
                    ByVal Bancos As Decimal,  _
                    ByVal Cooperativa As Decimal,  _
                    ByVal Descuentos As Decimal,  _
                    ByVal FSV As Decimal,  _
                    ByVal Seguro As Decimal,  _
                    ByVal MediaBeca As Decimal,  _
                    ByVal OtrosDesc As Decimal,  _
                    ByVal CodPension As String,  _
                    ByVal TotalRecibir As Decimal,  _
                    ByVal NoPlaza As String,  _
                    ByVal No As Integer) As PLPlanillaRow
            Dim rowPLPlanillaRow As PLPlanillaRow = CType(Me.NewRow,PLPlanillaRow)
            rowPLPlanillaRow.ItemArray = New Object() {CodEmpleado, Apellido1, Apellido2, ApellidoCas, Nombres, Sexo, CodCargo, Cargo, CodDepartamento, Departamento, TipoPlanilla, NombrePlanilla, SueldoBase, DT, SueldoDevengado, Vacaciones, HorasExtra, Incapacidades, OtrosIngresos, Devengado, ISSS, IVM, AFP, Renta, Bancos, Cooperativa, Descuentos, FSV, Seguro, MediaBeca, OtrosDesc, CodPension, TotalRecibir, NoPlaza, No}
            Me.Rows.Add(rowPLPlanillaRow)
            Return rowPLPlanillaRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PLPlanillaDataTable = CType(MyBase.Clone,PLPlanillaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PLPlanillaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodEmpleado = Me.Columns("CodEmpleado")
            Me.columnApellido1 = Me.Columns("Apellido1")
            Me.columnApellido2 = Me.Columns("Apellido2")
            Me.columnApellidoCas = Me.Columns("ApellidoCas")
            Me.columnNombres = Me.Columns("Nombres")
            Me.columnSexo = Me.Columns("Sexo")
            Me.columnCodCargo = Me.Columns("CodCargo")
            Me.columnCargo = Me.Columns("Cargo")
            Me.columnCodDepartamento = Me.Columns("CodDepartamento")
            Me.columnDepartamento = Me.Columns("Departamento")
            Me.columnTipoPlanilla = Me.Columns("TipoPlanilla")
            Me.columnNombrePlanilla = Me.Columns("NombrePlanilla")
            Me.columnSueldoBase = Me.Columns("SueldoBase")
            Me.columnDT = Me.Columns("DT")
            Me.columnSueldoDevengado = Me.Columns("SueldoDevengado")
            Me.columnVacaciones = Me.Columns("Vacaciones")
            Me.columnHorasExtra = Me.Columns("HorasExtra")
            Me.columnIncapacidades = Me.Columns("Incapacidades")
            Me.columnOtrosIngresos = Me.Columns("OtrosIngresos")
            Me.columnDevengado = Me.Columns("Devengado")
            Me.columnISSS = Me.Columns("ISSS")
            Me.columnIVM = Me.Columns("IVM")
            Me.columnAFP = Me.Columns("AFP")
            Me.columnRenta = Me.Columns("Renta")
            Me.columnBancos = Me.Columns("Bancos")
            Me.columnCooperativa = Me.Columns("Cooperativa")
            Me.columnDescuentos = Me.Columns("Descuentos")
            Me.columnFSV = Me.Columns("FSV")
            Me.columnSeguro = Me.Columns("Seguro")
            Me.columnMediaBeca = Me.Columns("MediaBeca")
            Me.columnOtrosDesc = Me.Columns("OtrosDesc")
            Me.columnCodPension = Me.Columns("CodPension")
            Me.columnTotalRecibir = Me.Columns("TotalRecibir")
            Me.columnNoPlaza = Me.Columns("NoPlaza")
            Me.columnNo = Me.Columns("No")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodEmpleado = New DataColumn("CodEmpleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodEmpleado)
            Me.columnApellido1 = New DataColumn("Apellido1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido1)
            Me.columnApellido2 = New DataColumn("Apellido2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido2)
            Me.columnApellidoCas = New DataColumn("ApellidoCas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellidoCas)
            Me.columnNombres = New DataColumn("Nombres", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombres)
            Me.columnSexo = New DataColumn("Sexo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSexo)
            Me.columnCodCargo = New DataColumn("CodCargo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodCargo)
            Me.columnCargo = New DataColumn("Cargo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCargo)
            Me.columnCodDepartamento = New DataColumn("CodDepartamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodDepartamento)
            Me.columnDepartamento = New DataColumn("Departamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDepartamento)
            Me.columnTipoPlanilla = New DataColumn("TipoPlanilla", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoPlanilla)
            Me.columnNombrePlanilla = New DataColumn("NombrePlanilla", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombrePlanilla)
            Me.columnSueldoBase = New DataColumn("SueldoBase", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSueldoBase)
            Me.columnDT = New DataColumn("DT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDT)
            Me.columnSueldoDevengado = New DataColumn("SueldoDevengado", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSueldoDevengado)
            Me.columnVacaciones = New DataColumn("Vacaciones", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVacaciones)
            Me.columnHorasExtra = New DataColumn("HorasExtra", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHorasExtra)
            Me.columnIncapacidades = New DataColumn("Incapacidades", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIncapacidades)
            Me.columnOtrosIngresos = New DataColumn("OtrosIngresos", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtrosIngresos)
            Me.columnDevengado = New DataColumn("Devengado", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDevengado)
            Me.columnISSS = New DataColumn("ISSS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSS)
            Me.columnIVM = New DataColumn("IVM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIVM)
            Me.columnAFP = New DataColumn("AFP", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAFP)
            Me.columnRenta = New DataColumn("Renta", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRenta)
            Me.columnBancos = New DataColumn("Bancos", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBancos)
            Me.columnCooperativa = New DataColumn("Cooperativa", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCooperativa)
            Me.columnDescuentos = New DataColumn("Descuentos", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescuentos)
            Me.columnFSV = New DataColumn("FSV", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFSV)
            Me.columnSeguro = New DataColumn("Seguro", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSeguro)
            Me.columnMediaBeca = New DataColumn("MediaBeca", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMediaBeca)
            Me.columnOtrosDesc = New DataColumn("OtrosDesc", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtrosDesc)
            Me.columnCodPension = New DataColumn("CodPension", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodPension)
            Me.columnTotalRecibir = New DataColumn("TotalRecibir", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalRecibir)
            Me.columnNoPlaza = New DataColumn("NoPlaza", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoPlaza)
            Me.columnNo = New DataColumn("No", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo)
        End Sub
        
        Public Function NewPLPlanillaRow() As PLPlanillaRow
            Return CType(Me.NewRow,PLPlanillaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PLPlanillaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PLPlanillaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLPlanillaRowChangedEvent) Is Nothing) Then
                RaiseEvent PLPlanillaRowChanged(Me, New PLPlanillaRowChangeEvent(CType(e.Row,PLPlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLPlanillaRowChangingEvent) Is Nothing) Then
                RaiseEvent PLPlanillaRowChanging(Me, New PLPlanillaRowChangeEvent(CType(e.Row,PLPlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLPlanillaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLPlanillaRowDeleted(Me, New PLPlanillaRowChangeEvent(CType(e.Row,PLPlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLPlanillaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLPlanillaRowDeleting(Me, New PLPlanillaRowChangeEvent(CType(e.Row,PLPlanillaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePLPlanillaRow(ByVal row As PLPlanillaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PLPlanillaRow
        Inherits DataRow
        
        Private tablePLPlanilla As PLPlanillaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLPlanilla = CType(Me.Table,PLPlanillaDataTable)
        End Sub
        
        Public Property CodEmpleado As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.CodEmpleadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.CodEmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Apellido1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.Apellido1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.Apellido1Column) = value
            End Set
        End Property
        
        Public Property Apellido2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.Apellido2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.Apellido2Column) = value
            End Set
        End Property
        
        Public Property ApellidoCas As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.ApellidoCasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.ApellidoCasColumn) = value
            End Set
        End Property
        
        Public Property Nombres As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.NombresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.NombresColumn) = value
            End Set
        End Property
        
        Public Property Sexo As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.SexoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.SexoColumn) = value
            End Set
        End Property
        
        Public Property CodCargo As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.CodCargoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.CodCargoColumn) = value
            End Set
        End Property
        
        Public Property Cargo As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.CargoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.CargoColumn) = value
            End Set
        End Property
        
        Public Property CodDepartamento As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.CodDepartamentoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.CodDepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Departamento As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.DepartamentoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.DepartamentoColumn) = value
            End Set
        End Property
        
        Public Property TipoPlanilla As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.TipoPlanillaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.TipoPlanillaColumn) = value
            End Set
        End Property
        
        Public Property NombrePlanilla As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.NombrePlanillaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.NombrePlanillaColumn) = value
            End Set
        End Property
        
        Public Property SueldoBase As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.SueldoBaseColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.SueldoBaseColumn) = value
            End Set
        End Property
        
        Public Property DT As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.DTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.DTColumn) = value
            End Set
        End Property
        
        Public Property SueldoDevengado As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.SueldoDevengadoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.SueldoDevengadoColumn) = value
            End Set
        End Property
        
        Public Property Vacaciones As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.VacacionesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.VacacionesColumn) = value
            End Set
        End Property
        
        Public Property HorasExtra As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.HorasExtraColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.HorasExtraColumn) = value
            End Set
        End Property
        
        Public Property Incapacidades As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.IncapacidadesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.IncapacidadesColumn) = value
            End Set
        End Property
        
        Public Property OtrosIngresos As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.OtrosIngresosColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.OtrosIngresosColumn) = value
            End Set
        End Property
        
        Public Property Devengado As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.DevengadoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.DevengadoColumn) = value
            End Set
        End Property
        
        Public Property ISSS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.ISSSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.ISSSColumn) = value
            End Set
        End Property
        
        Public Property IVM As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.IVMColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.IVMColumn) = value
            End Set
        End Property
        
        Public Property AFP As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.AFPColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.AFPColumn) = value
            End Set
        End Property
        
        Public Property Renta As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.RentaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.RentaColumn) = value
            End Set
        End Property
        
        Public Property Bancos As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.BancosColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.BancosColumn) = value
            End Set
        End Property
        
        Public Property Cooperativa As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.CooperativaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.CooperativaColumn) = value
            End Set
        End Property
        
        Public Property Descuentos As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.DescuentosColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.DescuentosColumn) = value
            End Set
        End Property
        
        Public Property FSV As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.FSVColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.FSVColumn) = value
            End Set
        End Property
        
        Public Property Seguro As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.SeguroColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.SeguroColumn) = value
            End Set
        End Property
        
        Public Property MediaBeca As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.MediaBecaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.MediaBecaColumn) = value
            End Set
        End Property
        
        Public Property OtrosDesc As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.OtrosDescColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.OtrosDescColumn) = value
            End Set
        End Property
        
        Public Property CodPension As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.CodPensionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.CodPensionColumn) = value
            End Set
        End Property
        
        Public Property TotalRecibir As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.TotalRecibirColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.TotalRecibirColumn) = value
            End Set
        End Property
        
        Public Property NoPlaza As String
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.NoPlazaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.NoPlazaColumn) = value
            End Set
        End Property
        
        Public Property No As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLPlanilla.NoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLPlanilla.NoColumn) = value
            End Set
        End Property
        
        Public Function IsCodEmpleadoNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.CodEmpleadoColumn)
        End Function
        
        Public Sub SetCodEmpleadoNull()
            Me(Me.tablePLPlanilla.CodEmpleadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellido1Null() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.Apellido1Column)
        End Function
        
        Public Sub SetApellido1Null()
            Me(Me.tablePLPlanilla.Apellido1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellido2Null() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.Apellido2Column)
        End Function
        
        Public Sub SetApellido2Null()
            Me(Me.tablePLPlanilla.Apellido2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellidoCasNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.ApellidoCasColumn)
        End Function
        
        Public Sub SetApellidoCasNull()
            Me(Me.tablePLPlanilla.ApellidoCasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombresNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.NombresColumn)
        End Function
        
        Public Sub SetNombresNull()
            Me(Me.tablePLPlanilla.NombresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSexoNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.SexoColumn)
        End Function
        
        Public Sub SetSexoNull()
            Me(Me.tablePLPlanilla.SexoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodCargoNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.CodCargoColumn)
        End Function
        
        Public Sub SetCodCargoNull()
            Me(Me.tablePLPlanilla.CodCargoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCargoNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.CargoColumn)
        End Function
        
        Public Sub SetCargoNull()
            Me(Me.tablePLPlanilla.CargoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.CodDepartamentoColumn)
        End Function
        
        Public Sub SetCodDepartamentoNull()
            Me(Me.tablePLPlanilla.CodDepartamentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.DepartamentoColumn)
        End Function
        
        Public Sub SetDepartamentoNull()
            Me(Me.tablePLPlanilla.DepartamentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoPlanillaNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.TipoPlanillaColumn)
        End Function
        
        Public Sub SetTipoPlanillaNull()
            Me(Me.tablePLPlanilla.TipoPlanillaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombrePlanillaNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.NombrePlanillaColumn)
        End Function
        
        Public Sub SetNombrePlanillaNull()
            Me(Me.tablePLPlanilla.NombrePlanillaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSueldoBaseNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.SueldoBaseColumn)
        End Function
        
        Public Sub SetSueldoBaseNull()
            Me(Me.tablePLPlanilla.SueldoBaseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDTNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.DTColumn)
        End Function
        
        Public Sub SetDTNull()
            Me(Me.tablePLPlanilla.DTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSueldoDevengadoNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.SueldoDevengadoColumn)
        End Function
        
        Public Sub SetSueldoDevengadoNull()
            Me(Me.tablePLPlanilla.SueldoDevengadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVacacionesNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.VacacionesColumn)
        End Function
        
        Public Sub SetVacacionesNull()
            Me(Me.tablePLPlanilla.VacacionesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHorasExtraNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.HorasExtraColumn)
        End Function
        
        Public Sub SetHorasExtraNull()
            Me(Me.tablePLPlanilla.HorasExtraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIncapacidadesNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.IncapacidadesColumn)
        End Function
        
        Public Sub SetIncapacidadesNull()
            Me(Me.tablePLPlanilla.IncapacidadesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtrosIngresosNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.OtrosIngresosColumn)
        End Function
        
        Public Sub SetOtrosIngresosNull()
            Me(Me.tablePLPlanilla.OtrosIngresosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDevengadoNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.DevengadoColumn)
        End Function
        
        Public Sub SetDevengadoNull()
            Me(Me.tablePLPlanilla.DevengadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSSNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.ISSSColumn)
        End Function
        
        Public Sub SetISSSNull()
            Me(Me.tablePLPlanilla.ISSSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIVMNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.IVMColumn)
        End Function
        
        Public Sub SetIVMNull()
            Me(Me.tablePLPlanilla.IVMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAFPNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.AFPColumn)
        End Function
        
        Public Sub SetAFPNull()
            Me(Me.tablePLPlanilla.AFPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRentaNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.RentaColumn)
        End Function
        
        Public Sub SetRentaNull()
            Me(Me.tablePLPlanilla.RentaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBancosNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.BancosColumn)
        End Function
        
        Public Sub SetBancosNull()
            Me(Me.tablePLPlanilla.BancosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCooperativaNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.CooperativaColumn)
        End Function
        
        Public Sub SetCooperativaNull()
            Me(Me.tablePLPlanilla.CooperativaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescuentosNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.DescuentosColumn)
        End Function
        
        Public Sub SetDescuentosNull()
            Me(Me.tablePLPlanilla.DescuentosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFSVNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.FSVColumn)
        End Function
        
        Public Sub SetFSVNull()
            Me(Me.tablePLPlanilla.FSVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSeguroNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.SeguroColumn)
        End Function
        
        Public Sub SetSeguroNull()
            Me(Me.tablePLPlanilla.SeguroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMediaBecaNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.MediaBecaColumn)
        End Function
        
        Public Sub SetMediaBecaNull()
            Me(Me.tablePLPlanilla.MediaBecaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtrosDescNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.OtrosDescColumn)
        End Function
        
        Public Sub SetOtrosDescNull()
            Me(Me.tablePLPlanilla.OtrosDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodPensionNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.CodPensionColumn)
        End Function
        
        Public Sub SetCodPensionNull()
            Me(Me.tablePLPlanilla.CodPensionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalRecibirNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.TotalRecibirColumn)
        End Function
        
        Public Sub SetTotalRecibirNull()
            Me(Me.tablePLPlanilla.TotalRecibirColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoPlazaNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.NoPlazaColumn)
        End Function
        
        Public Sub SetNoPlazaNull()
            Me(Me.tablePLPlanilla.NoPlazaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoNull() As Boolean
            Return Me.IsNull(Me.tablePLPlanilla.NoColumn)
        End Function
        
        Public Sub SetNoNull()
            Me(Me.tablePLPlanilla.NoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PLPlanillaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PLPlanillaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PLPlanillaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PLPlanillaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEmpresa As DataColumn
        
        Private columnTitulo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("Reporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property TituloColumn As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReporteRow
            Get
                Return CType(Me.Rows(index),ReporteRow)
            End Get
        End Property
        
        Public Event ReporteRowChanged As ReporteRowChangeEventHandler
        
        Public Event ReporteRowChanging As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleted As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleting As ReporteRowChangeEventHandler
        
        Public Overloads Sub AddReporteRow(ByVal row As ReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReporteRow(ByVal Empresa As String, ByVal Titulo As String, ByVal Descripcion As String) As ReporteRow
            Dim rowReporteRow As ReporteRow = CType(Me.NewRow,ReporteRow)
            rowReporteRow.ItemArray = New Object() {Empresa, Titulo, Descripcion}
            Me.Rows.Add(rowReporteRow)
            Return rowReporteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReporteDataTable = CType(MyBase.Clone,ReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnTitulo = Me.Columns("Titulo")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnTitulo = New DataColumn("Titulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitulo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
        End Sub
        
        Public Function NewReporteRow() As ReporteRow
            Return CType(Me.NewRow,ReporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanged(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanging(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleted(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleting(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReporteRow(ByVal row As ReporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRow
        Inherits DataRow
        
        Private tableReporte As ReporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte = CType(Me.Table,ReporteDataTable)
        End Sub
        
        Public Property Empresa As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.EmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Titulo As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TituloColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.DescripcionColumn) = value
            End Set
        End Property
        
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.EmpresaColumn)
        End Function
        
        Public Sub SetEmpresaNull()
            Me(Me.tableReporte.EmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TituloColumn)
        End Function
        
        Public Sub SetTituloNull()
            Me(Me.tableReporte.TituloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableReporte.DescripcionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
