'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsDatosEmpleados
    Inherits DataSet
    
    Private tableplempleados As plempleadosDataTable
    
    Private tableReporte As ReporteDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("plempleados")) Is Nothing) Then
                Me.Tables.Add(New plempleadosDataTable(ds.Tables("plempleados")))
            End If
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property plempleados As plempleadosDataTable
        Get
            Return Me.tableplempleados
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte As ReporteDataTable
        Get
            Return Me.tableReporte
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsDatosEmpleados = CType(MyBase.Clone,dsDatosEmpleados)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("plempleados")) Is Nothing) Then
            Me.Tables.Add(New plempleadosDataTable(ds.Tables("plempleados")))
        End If
        If (Not (ds.Tables("Reporte")) Is Nothing) Then
            Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableplempleados = CType(Me.Tables("plempleados"),plempleadosDataTable)
        If (Not (Me.tableplempleados) Is Nothing) Then
            Me.tableplempleados.InitVars
        End If
        Me.tableReporte = CType(Me.Tables("Reporte"),ReporteDataTable)
        If (Not (Me.tableReporte) Is Nothing) Then
            Me.tableReporte.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsDatosEmpleados"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsDatosEmpleados.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableplempleados = New plempleadosDataTable
        Me.Tables.Add(Me.tableplempleados)
        Me.tableReporte = New ReporteDataTable
        Me.Tables.Add(Me.tableReporte)
    End Sub
    
    Private Function ShouldSerializeplempleados() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeReporte() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub plempleadosRowChangeEventHandler(ByVal sender As Object, ByVal e As plempleadosRowChangeEvent)
    
    Public Delegate Sub ReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As ReporteRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class plempleadosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodEmpleado As DataColumn
        
        Private columnApellido1 As DataColumn
        
        Private columnApellido2 As DataColumn
        
        Private columnApellidoCas As DataColumn
        
        Private columnNombres As DataColumn
        
        Private columnSexo As DataColumn
        
        Private columnFechaIngreso As DataColumn
        
        Private columnEstadoCivil As DataColumn
        
        Private columnCodCargo As DataColumn
        
        Private columnCodTipoPersonal As DataColumn
        
        Private columnFechaRetiro As DataColumn
        
        Private columnFechaNac As DataColumn
        
        Private columnLugarNac As DataColumn
        
        Private columnDUI As DataColumn
        
        Private columnFechaExtDUI As DataColumn
        
        Private columnLugarExtDUI As DataColumn
        
        Private columnNIT As DataColumn
        
        Private columnNIP As DataColumn
        
        Private columnFormaPago As DataColumn
        
        Private columnCodInstitucion As DataColumn
        
        Private columnNoCuenta As DataColumn
        
        Private columnISSS As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnTelefonos As DataColumn
        
        Private columnCelular As DataColumn
        
        Private columnAp_Materno As DataColumn
        
        Private columnAp_Paterno As DataColumn
        
        Private columnNombre_ISSS As DataColumn
        
        Private columnCodPension As DataColumn
        
        Private columnNoAFP As DataColumn
        
        Private columnSeguroColectivo As DataColumn
        
        Private columnEstado As DataColumn
        
        Private columnCodRetiro As DataColumn
        
        Private columnGradoAcademico As DataColumn
        
        Private columnNumLicencia As DataColumn
        
        Private columnNoPlaza As DataColumn
        
        Private columnCodDepartamento As DataColumn
        
        Private columnCodArea As DataColumn
        
        Private columnFechaInicial As DataColumn
        
        Private columnFechaFinal As DataColumn
        
        Private columnSueldoVariable As DataColumn
        
        Private columnSueldoMensual As DataColumn
        
        Private columnCargo As DataColumn
        
        Private columnDiasTrabajados As DataColumn
        
        Private columnBonificacion As DataColumn
        
        Private columnValorHora As DataColumn
        
        Private columnNoHoras As DataColumn
        
        Private columnDepartamento As DataColumn
        
        Friend Sub New()
            MyBase.New("plempleados")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodEmpleadoColumn As DataColumn
            Get
                Return Me.columnCodEmpleado
            End Get
        End Property
        
        Friend ReadOnly Property Apellido1Column As DataColumn
            Get
                Return Me.columnApellido1
            End Get
        End Property
        
        Friend ReadOnly Property Apellido2Column As DataColumn
            Get
                Return Me.columnApellido2
            End Get
        End Property
        
        Friend ReadOnly Property ApellidoCasColumn As DataColumn
            Get
                Return Me.columnApellidoCas
            End Get
        End Property
        
        Friend ReadOnly Property NombresColumn As DataColumn
            Get
                Return Me.columnNombres
            End Get
        End Property
        
        Friend ReadOnly Property SexoColumn As DataColumn
            Get
                Return Me.columnSexo
            End Get
        End Property
        
        Friend ReadOnly Property FechaIngresoColumn As DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        Friend ReadOnly Property EstadoCivilColumn As DataColumn
            Get
                Return Me.columnEstadoCivil
            End Get
        End Property
        
        Friend ReadOnly Property CodCargoColumn As DataColumn
            Get
                Return Me.columnCodCargo
            End Get
        End Property
        
        Friend ReadOnly Property CodTipoPersonalColumn As DataColumn
            Get
                Return Me.columnCodTipoPersonal
            End Get
        End Property
        
        Friend ReadOnly Property FechaRetiroColumn As DataColumn
            Get
                Return Me.columnFechaRetiro
            End Get
        End Property
        
        Friend ReadOnly Property FechaNacColumn As DataColumn
            Get
                Return Me.columnFechaNac
            End Get
        End Property
        
        Friend ReadOnly Property LugarNacColumn As DataColumn
            Get
                Return Me.columnLugarNac
            End Get
        End Property
        
        Friend ReadOnly Property DUIColumn As DataColumn
            Get
                Return Me.columnDUI
            End Get
        End Property
        
        Friend ReadOnly Property FechaExtDUIColumn As DataColumn
            Get
                Return Me.columnFechaExtDUI
            End Get
        End Property
        
        Friend ReadOnly Property LugarExtDUIColumn As DataColumn
            Get
                Return Me.columnLugarExtDUI
            End Get
        End Property
        
        Friend ReadOnly Property NITColumn As DataColumn
            Get
                Return Me.columnNIT
            End Get
        End Property
        
        Friend ReadOnly Property NIPColumn As DataColumn
            Get
                Return Me.columnNIP
            End Get
        End Property
        
        Friend ReadOnly Property FormaPagoColumn As DataColumn
            Get
                Return Me.columnFormaPago
            End Get
        End Property
        
        Friend ReadOnly Property CodInstitucionColumn As DataColumn
            Get
                Return Me.columnCodInstitucion
            End Get
        End Property
        
        Friend ReadOnly Property NoCuentaColumn As DataColumn
            Get
                Return Me.columnNoCuenta
            End Get
        End Property
        
        Friend ReadOnly Property ISSSColumn As DataColumn
            Get
                Return Me.columnISSS
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property TelefonosColumn As DataColumn
            Get
                Return Me.columnTelefonos
            End Get
        End Property
        
        Friend ReadOnly Property CelularColumn As DataColumn
            Get
                Return Me.columnCelular
            End Get
        End Property
        
        Friend ReadOnly Property Ap_MaternoColumn As DataColumn
            Get
                Return Me.columnAp_Materno
            End Get
        End Property
        
        Friend ReadOnly Property Ap_PaternoColumn As DataColumn
            Get
                Return Me.columnAp_Paterno
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_ISSSColumn As DataColumn
            Get
                Return Me.columnNombre_ISSS
            End Get
        End Property
        
        Friend ReadOnly Property CodPensionColumn As DataColumn
            Get
                Return Me.columnCodPension
            End Get
        End Property
        
        Friend ReadOnly Property NoAFPColumn As DataColumn
            Get
                Return Me.columnNoAFP
            End Get
        End Property
        
        Friend ReadOnly Property SeguroColectivoColumn As DataColumn
            Get
                Return Me.columnSeguroColectivo
            End Get
        End Property
        
        Friend ReadOnly Property EstadoColumn As DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        Friend ReadOnly Property CodRetiroColumn As DataColumn
            Get
                Return Me.columnCodRetiro
            End Get
        End Property
        
        Friend ReadOnly Property GradoAcademicoColumn As DataColumn
            Get
                Return Me.columnGradoAcademico
            End Get
        End Property
        
        Friend ReadOnly Property NumLicenciaColumn As DataColumn
            Get
                Return Me.columnNumLicencia
            End Get
        End Property
        
        Friend ReadOnly Property NoPlazaColumn As DataColumn
            Get
                Return Me.columnNoPlaza
            End Get
        End Property
        
        Friend ReadOnly Property CodDepartamentoColumn As DataColumn
            Get
                Return Me.columnCodDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property CodAreaColumn As DataColumn
            Get
                Return Me.columnCodArea
            End Get
        End Property
        
        Friend ReadOnly Property FechaInicialColumn As DataColumn
            Get
                Return Me.columnFechaInicial
            End Get
        End Property
        
        Friend ReadOnly Property FechaFinalColumn As DataColumn
            Get
                Return Me.columnFechaFinal
            End Get
        End Property
        
        Friend ReadOnly Property SueldoVariableColumn As DataColumn
            Get
                Return Me.columnSueldoVariable
            End Get
        End Property
        
        Friend ReadOnly Property SueldoMensualColumn As DataColumn
            Get
                Return Me.columnSueldoMensual
            End Get
        End Property
        
        Friend ReadOnly Property CargoColumn As DataColumn
            Get
                Return Me.columnCargo
            End Get
        End Property
        
        Friend ReadOnly Property DiasTrabajadosColumn As DataColumn
            Get
                Return Me.columnDiasTrabajados
            End Get
        End Property
        
        Friend ReadOnly Property BonificacionColumn As DataColumn
            Get
                Return Me.columnBonificacion
            End Get
        End Property
        
        Friend ReadOnly Property ValorHoraColumn As DataColumn
            Get
                Return Me.columnValorHora
            End Get
        End Property
        
        Friend ReadOnly Property NoHorasColumn As DataColumn
            Get
                Return Me.columnNoHoras
            End Get
        End Property
        
        Friend ReadOnly Property DepartamentoColumn As DataColumn
            Get
                Return Me.columnDepartamento
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As plempleadosRow
            Get
                Return CType(Me.Rows(index),plempleadosRow)
            End Get
        End Property
        
        Public Event plempleadosRowChanged As plempleadosRowChangeEventHandler
        
        Public Event plempleadosRowChanging As plempleadosRowChangeEventHandler
        
        Public Event plempleadosRowDeleted As plempleadosRowChangeEventHandler
        
        Public Event plempleadosRowDeleting As plempleadosRowChangeEventHandler
        
        Public Overloads Sub AddplempleadosRow(ByVal row As plempleadosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddplempleadosRow( _
                    ByVal CodEmpleado As String,  _
                    ByVal Apellido1 As String,  _
                    ByVal Apellido2 As String,  _
                    ByVal ApellidoCas As String,  _
                    ByVal Nombres As String,  _
                    ByVal Sexo As String,  _
                    ByVal FechaIngreso As Date,  _
                    ByVal EstadoCivil As String,  _
                    ByVal CodCargo As String,  _
                    ByVal CodTipoPersonal As Integer,  _
                    ByVal FechaRetiro As Date,  _
                    ByVal FechaNac As Date,  _
                    ByVal LugarNac As String,  _
                    ByVal DUI As String,  _
                    ByVal FechaExtDUI As Date,  _
                    ByVal LugarExtDUI As String,  _
                    ByVal NIT As String,  _
                    ByVal NIP As String,  _
                    ByVal FormaPago As String,  _
                    ByVal CodInstitucion As String,  _
                    ByVal NoCuenta As String,  _
                    ByVal ISSS As String,  _
                    ByVal Direccion As String,  _
                    ByVal Telefonos As String,  _
                    ByVal Celular As String,  _
                    ByVal Ap_Materno As String,  _
                    ByVal Ap_Paterno As String,  _
                    ByVal Nombre_ISSS As String,  _
                    ByVal CodPension As String,  _
                    ByVal NoAFP As String,  _
                    ByVal SeguroColectivo As String,  _
                    ByVal Estado As String,  _
                    ByVal CodRetiro As String,  _
                    ByVal GradoAcademico As String,  _
                    ByVal NumLicencia As String,  _
                    ByVal NoPlaza As String,  _
                    ByVal CodDepartamento As String,  _
                    ByVal CodArea As String,  _
                    ByVal FechaInicial As Date,  _
                    ByVal FechaFinal As Date,  _
                    ByVal SueldoVariable As String,  _
                    ByVal SueldoMensual As Single,  _
                    ByVal Cargo As String,  _
                    ByVal DiasTrabajados As Integer,  _
                    ByVal Bonificacion As Single,  _
                    ByVal ValorHora As Single,  _
                    ByVal NoHoras As Integer,  _
                    ByVal Departamento As String) As plempleadosRow
            Dim rowplempleadosRow As plempleadosRow = CType(Me.NewRow,plempleadosRow)
            rowplempleadosRow.ItemArray = New Object() {CodEmpleado, Apellido1, Apellido2, ApellidoCas, Nombres, Sexo, FechaIngreso, EstadoCivil, CodCargo, CodTipoPersonal, FechaRetiro, FechaNac, LugarNac, DUI, FechaExtDUI, LugarExtDUI, NIT, NIP, FormaPago, CodInstitucion, NoCuenta, ISSS, Direccion, Telefonos, Celular, Ap_Materno, Ap_Paterno, Nombre_ISSS, CodPension, NoAFP, SeguroColectivo, Estado, CodRetiro, GradoAcademico, NumLicencia, NoPlaza, CodDepartamento, CodArea, FechaInicial, FechaFinal, SueldoVariable, SueldoMensual, Cargo, DiasTrabajados, Bonificacion, ValorHora, NoHoras, Departamento}
            Me.Rows.Add(rowplempleadosRow)
            Return rowplempleadosRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As plempleadosDataTable = CType(MyBase.Clone,plempleadosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New plempleadosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodEmpleado = Me.Columns("CodEmpleado")
            Me.columnApellido1 = Me.Columns("Apellido1")
            Me.columnApellido2 = Me.Columns("Apellido2")
            Me.columnApellidoCas = Me.Columns("ApellidoCas")
            Me.columnNombres = Me.Columns("Nombres")
            Me.columnSexo = Me.Columns("Sexo")
            Me.columnFechaIngreso = Me.Columns("FechaIngreso")
            Me.columnEstadoCivil = Me.Columns("EstadoCivil")
            Me.columnCodCargo = Me.Columns("CodCargo")
            Me.columnCodTipoPersonal = Me.Columns("CodTipoPersonal")
            Me.columnFechaRetiro = Me.Columns("FechaRetiro")
            Me.columnFechaNac = Me.Columns("FechaNac")
            Me.columnLugarNac = Me.Columns("LugarNac")
            Me.columnDUI = Me.Columns("DUI")
            Me.columnFechaExtDUI = Me.Columns("FechaExtDUI")
            Me.columnLugarExtDUI = Me.Columns("LugarExtDUI")
            Me.columnNIT = Me.Columns("NIT")
            Me.columnNIP = Me.Columns("NIP")
            Me.columnFormaPago = Me.Columns("FormaPago")
            Me.columnCodInstitucion = Me.Columns("CodInstitucion")
            Me.columnNoCuenta = Me.Columns("NoCuenta")
            Me.columnISSS = Me.Columns("ISSS")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnTelefonos = Me.Columns("Telefonos")
            Me.columnCelular = Me.Columns("Celular")
            Me.columnAp_Materno = Me.Columns("Ap_Materno")
            Me.columnAp_Paterno = Me.Columns("Ap_Paterno")
            Me.columnNombre_ISSS = Me.Columns("Nombre_ISSS")
            Me.columnCodPension = Me.Columns("CodPension")
            Me.columnNoAFP = Me.Columns("NoAFP")
            Me.columnSeguroColectivo = Me.Columns("SeguroColectivo")
            Me.columnEstado = Me.Columns("Estado")
            Me.columnCodRetiro = Me.Columns("CodRetiro")
            Me.columnGradoAcademico = Me.Columns("GradoAcademico")
            Me.columnNumLicencia = Me.Columns("NumLicencia")
            Me.columnNoPlaza = Me.Columns("NoPlaza")
            Me.columnCodDepartamento = Me.Columns("CodDepartamento")
            Me.columnCodArea = Me.Columns("CodArea")
            Me.columnFechaInicial = Me.Columns("FechaInicial")
            Me.columnFechaFinal = Me.Columns("FechaFinal")
            Me.columnSueldoVariable = Me.Columns("SueldoVariable")
            Me.columnSueldoMensual = Me.Columns("SueldoMensual")
            Me.columnCargo = Me.Columns("Cargo")
            Me.columnDiasTrabajados = Me.Columns("DiasTrabajados")
            Me.columnBonificacion = Me.Columns("Bonificacion")
            Me.columnValorHora = Me.Columns("ValorHora")
            Me.columnNoHoras = Me.Columns("NoHoras")
            Me.columnDepartamento = Me.Columns("Departamento")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodEmpleado = New DataColumn("CodEmpleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodEmpleado)
            Me.columnApellido1 = New DataColumn("Apellido1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido1)
            Me.columnApellido2 = New DataColumn("Apellido2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido2)
            Me.columnApellidoCas = New DataColumn("ApellidoCas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellidoCas)
            Me.columnNombres = New DataColumn("Nombres", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombres)
            Me.columnSexo = New DataColumn("Sexo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSexo)
            Me.columnFechaIngreso = New DataColumn("FechaIngreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaIngreso)
            Me.columnEstadoCivil = New DataColumn("EstadoCivil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstadoCivil)
            Me.columnCodCargo = New DataColumn("CodCargo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodCargo)
            Me.columnCodTipoPersonal = New DataColumn("CodTipoPersonal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodTipoPersonal)
            Me.columnFechaRetiro = New DataColumn("FechaRetiro", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaRetiro)
            Me.columnFechaNac = New DataColumn("FechaNac", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaNac)
            Me.columnLugarNac = New DataColumn("LugarNac", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLugarNac)
            Me.columnDUI = New DataColumn("DUI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDUI)
            Me.columnFechaExtDUI = New DataColumn("FechaExtDUI", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaExtDUI)
            Me.columnLugarExtDUI = New DataColumn("LugarExtDUI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLugarExtDUI)
            Me.columnNIT = New DataColumn("NIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNIT)
            Me.columnNIP = New DataColumn("NIP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNIP)
            Me.columnFormaPago = New DataColumn("FormaPago", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormaPago)
            Me.columnCodInstitucion = New DataColumn("CodInstitucion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodInstitucion)
            Me.columnNoCuenta = New DataColumn("NoCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoCuenta)
            Me.columnISSS = New DataColumn("ISSS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSS)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnTelefonos = New DataColumn("Telefonos", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefonos)
            Me.columnCelular = New DataColumn("Celular", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCelular)
            Me.columnAp_Materno = New DataColumn("Ap_Materno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAp_Materno)
            Me.columnAp_Paterno = New DataColumn("Ap_Paterno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAp_Paterno)
            Me.columnNombre_ISSS = New DataColumn("Nombre_ISSS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_ISSS)
            Me.columnCodPension = New DataColumn("CodPension", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodPension)
            Me.columnNoAFP = New DataColumn("NoAFP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoAFP)
            Me.columnSeguroColectivo = New DataColumn("SeguroColectivo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSeguroColectivo)
            Me.columnEstado = New DataColumn("Estado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstado)
            Me.columnCodRetiro = New DataColumn("CodRetiro", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodRetiro)
            Me.columnGradoAcademico = New DataColumn("GradoAcademico", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGradoAcademico)
            Me.columnNumLicencia = New DataColumn("NumLicencia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumLicencia)
            Me.columnNoPlaza = New DataColumn("NoPlaza", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoPlaza)
            Me.columnCodDepartamento = New DataColumn("CodDepartamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodDepartamento)
            Me.columnCodArea = New DataColumn("CodArea", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodArea)
            Me.columnFechaInicial = New DataColumn("FechaInicial", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaInicial)
            Me.columnFechaFinal = New DataColumn("FechaFinal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaFinal)
            Me.columnSueldoVariable = New DataColumn("SueldoVariable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSueldoVariable)
            Me.columnSueldoMensual = New DataColumn("SueldoMensual", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSueldoMensual)
            Me.columnCargo = New DataColumn("Cargo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCargo)
            Me.columnDiasTrabajados = New DataColumn("DiasTrabajados", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiasTrabajados)
            Me.columnBonificacion = New DataColumn("Bonificacion", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBonificacion)
            Me.columnValorHora = New DataColumn("ValorHora", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorHora)
            Me.columnNoHoras = New DataColumn("NoHoras", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoHoras)
            Me.columnDepartamento = New DataColumn("Departamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDepartamento)
            Me.Constraints.Add(New UniqueConstraint("key2", New DataColumn() {Me.columnCodEmpleado}, false))
            Me.columnCodEmpleado.AllowDBNull = false
            Me.columnCodEmpleado.Unique = true
        End Sub
        
        Public Function NewplempleadosRow() As plempleadosRow
            Return CType(Me.NewRow,plempleadosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New plempleadosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(plempleadosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.plempleadosRowChangedEvent) Is Nothing) Then
                RaiseEvent plempleadosRowChanged(Me, New plempleadosRowChangeEvent(CType(e.Row,plempleadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.plempleadosRowChangingEvent) Is Nothing) Then
                RaiseEvent plempleadosRowChanging(Me, New plempleadosRowChangeEvent(CType(e.Row,plempleadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.plempleadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent plempleadosRowDeleted(Me, New plempleadosRowChangeEvent(CType(e.Row,plempleadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.plempleadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent plempleadosRowDeleting(Me, New plempleadosRowChangeEvent(CType(e.Row,plempleadosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveplempleadosRow(ByVal row As plempleadosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class plempleadosRow
        Inherits DataRow
        
        Private tableplempleados As plempleadosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableplempleados = CType(Me.Table,plempleadosDataTable)
        End Sub
        
        Public Property CodEmpleado As String
            Get
                Return CType(Me(Me.tableplempleados.CodEmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableplempleados.CodEmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Apellido1 As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.Apellido1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.Apellido1Column) = value
            End Set
        End Property
        
        Public Property Apellido2 As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.Apellido2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.Apellido2Column) = value
            End Set
        End Property
        
        Public Property ApellidoCas As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.ApellidoCasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.ApellidoCasColumn) = value
            End Set
        End Property
        
        Public Property Nombres As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.NombresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.NombresColumn) = value
            End Set
        End Property
        
        Public Property Sexo As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.SexoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.SexoColumn) = value
            End Set
        End Property
        
        Public Property FechaIngreso As Date
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.FechaIngresoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.FechaIngresoColumn) = value
            End Set
        End Property
        
        Public Property EstadoCivil As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.EstadoCivilColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.EstadoCivilColumn) = value
            End Set
        End Property
        
        Public Property CodCargo As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.CodCargoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.CodCargoColumn) = value
            End Set
        End Property
        
        Public Property CodTipoPersonal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.CodTipoPersonalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.CodTipoPersonalColumn) = value
            End Set
        End Property
        
        Public Property FechaRetiro As Date
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.FechaRetiroColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.FechaRetiroColumn) = value
            End Set
        End Property
        
        Public Property FechaNac As Date
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.FechaNacColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.FechaNacColumn) = value
            End Set
        End Property
        
        Public Property LugarNac As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.LugarNacColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.LugarNacColumn) = value
            End Set
        End Property
        
        Public Property DUI As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.DUIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.DUIColumn) = value
            End Set
        End Property
        
        Public Property FechaExtDUI As Date
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.FechaExtDUIColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.FechaExtDUIColumn) = value
            End Set
        End Property
        
        Public Property LugarExtDUI As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.LugarExtDUIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.LugarExtDUIColumn) = value
            End Set
        End Property
        
        Public Property NIT As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.NITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.NITColumn) = value
            End Set
        End Property
        
        Public Property NIP As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.NIPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.NIPColumn) = value
            End Set
        End Property
        
        Public Property FormaPago As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.FormaPagoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.FormaPagoColumn) = value
            End Set
        End Property
        
        Public Property CodInstitucion As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.CodInstitucionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.CodInstitucionColumn) = value
            End Set
        End Property
        
        Public Property NoCuenta As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.NoCuentaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.NoCuentaColumn) = value
            End Set
        End Property
        
        Public Property ISSS As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.ISSSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.ISSSColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.DireccionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.DireccionColumn) = value
            End Set
        End Property
        
        Public Property Telefonos As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.TelefonosColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.TelefonosColumn) = value
            End Set
        End Property
        
        Public Property Celular As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.CelularColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.CelularColumn) = value
            End Set
        End Property
        
        Public Property Ap_Materno As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.Ap_MaternoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.Ap_MaternoColumn) = value
            End Set
        End Property
        
        Public Property Ap_Paterno As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.Ap_PaternoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.Ap_PaternoColumn) = value
            End Set
        End Property
        
        Public Property Nombre_ISSS As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.Nombre_ISSSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.Nombre_ISSSColumn) = value
            End Set
        End Property
        
        Public Property CodPension As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.CodPensionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.CodPensionColumn) = value
            End Set
        End Property
        
        Public Property NoAFP As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.NoAFPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.NoAFPColumn) = value
            End Set
        End Property
        
        Public Property SeguroColectivo As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.SeguroColectivoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.SeguroColectivoColumn) = value
            End Set
        End Property
        
        Public Property Estado As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.EstadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.EstadoColumn) = value
            End Set
        End Property
        
        Public Property CodRetiro As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.CodRetiroColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.CodRetiroColumn) = value
            End Set
        End Property
        
        Public Property GradoAcademico As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.GradoAcademicoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.GradoAcademicoColumn) = value
            End Set
        End Property
        
        Public Property NumLicencia As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.NumLicenciaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.NumLicenciaColumn) = value
            End Set
        End Property
        
        Public Property NoPlaza As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.NoPlazaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.NoPlazaColumn) = value
            End Set
        End Property
        
        Public Property CodDepartamento As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.CodDepartamentoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.CodDepartamentoColumn) = value
            End Set
        End Property
        
        Public Property CodArea As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.CodAreaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.CodAreaColumn) = value
            End Set
        End Property
        
        Public Property FechaInicial As Date
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.FechaInicialColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.FechaInicialColumn) = value
            End Set
        End Property
        
        Public Property FechaFinal As Date
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.FechaFinalColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.FechaFinalColumn) = value
            End Set
        End Property
        
        Public Property SueldoVariable As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.SueldoVariableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.SueldoVariableColumn) = value
            End Set
        End Property
        
        Public Property SueldoMensual As Single
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.SueldoMensualColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.SueldoMensualColumn) = value
            End Set
        End Property
        
        Public Property Cargo As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.CargoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.CargoColumn) = value
            End Set
        End Property
        
        Public Property DiasTrabajados As Integer
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.DiasTrabajadosColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.DiasTrabajadosColumn) = value
            End Set
        End Property
        
        Public Property Bonificacion As Single
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.BonificacionColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.BonificacionColumn) = value
            End Set
        End Property
        
        Public Property ValorHora As Single
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.ValorHoraColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.ValorHoraColumn) = value
            End Set
        End Property
        
        Public Property NoHoras As Integer
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.NoHorasColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.NoHorasColumn) = value
            End Set
        End Property
        
        Public Property Departamento As String
            Get
                Try 
                    Return CType(Me(Me.tableplempleados.DepartamentoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableplempleados.DepartamentoColumn) = value
            End Set
        End Property
        
        Public Function IsApellido1Null() As Boolean
            Return Me.IsNull(Me.tableplempleados.Apellido1Column)
        End Function
        
        Public Sub SetApellido1Null()
            Me(Me.tableplempleados.Apellido1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellido2Null() As Boolean
            Return Me.IsNull(Me.tableplempleados.Apellido2Column)
        End Function
        
        Public Sub SetApellido2Null()
            Me(Me.tableplempleados.Apellido2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellidoCasNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.ApellidoCasColumn)
        End Function
        
        Public Sub SetApellidoCasNull()
            Me(Me.tableplempleados.ApellidoCasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombresNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.NombresColumn)
        End Function
        
        Public Sub SetNombresNull()
            Me(Me.tableplempleados.NombresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSexoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.SexoColumn)
        End Function
        
        Public Sub SetSexoNull()
            Me(Me.tableplempleados.SexoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.FechaIngresoColumn)
        End Function
        
        Public Sub SetFechaIngresoNull()
            Me(Me.tableplempleados.FechaIngresoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.EstadoCivilColumn)
        End Function
        
        Public Sub SetEstadoCivilNull()
            Me(Me.tableplempleados.EstadoCivilColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodCargoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.CodCargoColumn)
        End Function
        
        Public Sub SetCodCargoNull()
            Me(Me.tableplempleados.CodCargoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodTipoPersonalNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.CodTipoPersonalColumn)
        End Function
        
        Public Sub SetCodTipoPersonalNull()
            Me(Me.tableplempleados.CodTipoPersonalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaRetiroNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.FechaRetiroColumn)
        End Function
        
        Public Sub SetFechaRetiroNull()
            Me(Me.tableplempleados.FechaRetiroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaNacNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.FechaNacColumn)
        End Function
        
        Public Sub SetFechaNacNull()
            Me(Me.tableplempleados.FechaNacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLugarNacNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.LugarNacColumn)
        End Function
        
        Public Sub SetLugarNacNull()
            Me(Me.tableplempleados.LugarNacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDUINull() As Boolean
            Return Me.IsNull(Me.tableplempleados.DUIColumn)
        End Function
        
        Public Sub SetDUINull()
            Me(Me.tableplempleados.DUIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaExtDUINull() As Boolean
            Return Me.IsNull(Me.tableplempleados.FechaExtDUIColumn)
        End Function
        
        Public Sub SetFechaExtDUINull()
            Me(Me.tableplempleados.FechaExtDUIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLugarExtDUINull() As Boolean
            Return Me.IsNull(Me.tableplempleados.LugarExtDUIColumn)
        End Function
        
        Public Sub SetLugarExtDUINull()
            Me(Me.tableplempleados.LugarExtDUIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNITNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.NITColumn)
        End Function
        
        Public Sub SetNITNull()
            Me(Me.tableplempleados.NITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNIPNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.NIPColumn)
        End Function
        
        Public Sub SetNIPNull()
            Me(Me.tableplempleados.NIPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFormaPagoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.FormaPagoColumn)
        End Function
        
        Public Sub SetFormaPagoNull()
            Me(Me.tableplempleados.FormaPagoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodInstitucionNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.CodInstitucionColumn)
        End Function
        
        Public Sub SetCodInstitucionNull()
            Me(Me.tableplempleados.CodInstitucionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoCuentaNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.NoCuentaColumn)
        End Function
        
        Public Sub SetNoCuentaNull()
            Me(Me.tableplempleados.NoCuentaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSSNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.ISSSColumn)
        End Function
        
        Public Sub SetISSSNull()
            Me(Me.tableplempleados.ISSSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.DireccionColumn)
        End Function
        
        Public Sub SetDireccionNull()
            Me(Me.tableplempleados.DireccionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelefonosNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.TelefonosColumn)
        End Function
        
        Public Sub SetTelefonosNull()
            Me(Me.tableplempleados.TelefonosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCelularNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.CelularColumn)
        End Function
        
        Public Sub SetCelularNull()
            Me(Me.tableplempleados.CelularColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAp_MaternoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.Ap_MaternoColumn)
        End Function
        
        Public Sub SetAp_MaternoNull()
            Me(Me.tableplempleados.Ap_MaternoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAp_PaternoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.Ap_PaternoColumn)
        End Function
        
        Public Sub SetAp_PaternoNull()
            Me(Me.tableplempleados.Ap_PaternoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombre_ISSSNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.Nombre_ISSSColumn)
        End Function
        
        Public Sub SetNombre_ISSSNull()
            Me(Me.tableplempleados.Nombre_ISSSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodPensionNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.CodPensionColumn)
        End Function
        
        Public Sub SetCodPensionNull()
            Me(Me.tableplempleados.CodPensionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoAFPNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.NoAFPColumn)
        End Function
        
        Public Sub SetNoAFPNull()
            Me(Me.tableplempleados.NoAFPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSeguroColectivoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.SeguroColectivoColumn)
        End Function
        
        Public Sub SetSeguroColectivoNull()
            Me(Me.tableplempleados.SeguroColectivoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.EstadoColumn)
        End Function
        
        Public Sub SetEstadoNull()
            Me(Me.tableplempleados.EstadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodRetiroNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.CodRetiroColumn)
        End Function
        
        Public Sub SetCodRetiroNull()
            Me(Me.tableplempleados.CodRetiroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGradoAcademicoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.GradoAcademicoColumn)
        End Function
        
        Public Sub SetGradoAcademicoNull()
            Me(Me.tableplempleados.GradoAcademicoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumLicenciaNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.NumLicenciaColumn)
        End Function
        
        Public Sub SetNumLicenciaNull()
            Me(Me.tableplempleados.NumLicenciaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoPlazaNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.NoPlazaColumn)
        End Function
        
        Public Sub SetNoPlazaNull()
            Me(Me.tableplempleados.NoPlazaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.CodDepartamentoColumn)
        End Function
        
        Public Sub SetCodDepartamentoNull()
            Me(Me.tableplempleados.CodDepartamentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodAreaNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.CodAreaColumn)
        End Function
        
        Public Sub SetCodAreaNull()
            Me(Me.tableplempleados.CodAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaInicialNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.FechaInicialColumn)
        End Function
        
        Public Sub SetFechaInicialNull()
            Me(Me.tableplempleados.FechaInicialColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaFinalNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.FechaFinalColumn)
        End Function
        
        Public Sub SetFechaFinalNull()
            Me(Me.tableplempleados.FechaFinalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSueldoVariableNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.SueldoVariableColumn)
        End Function
        
        Public Sub SetSueldoVariableNull()
            Me(Me.tableplempleados.SueldoVariableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSueldoMensualNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.SueldoMensualColumn)
        End Function
        
        Public Sub SetSueldoMensualNull()
            Me(Me.tableplempleados.SueldoMensualColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCargoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.CargoColumn)
        End Function
        
        Public Sub SetCargoNull()
            Me(Me.tableplempleados.CargoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiasTrabajadosNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.DiasTrabajadosColumn)
        End Function
        
        Public Sub SetDiasTrabajadosNull()
            Me(Me.tableplempleados.DiasTrabajadosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBonificacionNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.BonificacionColumn)
        End Function
        
        Public Sub SetBonificacionNull()
            Me(Me.tableplempleados.BonificacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValorHoraNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.ValorHoraColumn)
        End Function
        
        Public Sub SetValorHoraNull()
            Me(Me.tableplempleados.ValorHoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoHorasNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.NoHorasColumn)
        End Function
        
        Public Sub SetNoHorasNull()
            Me(Me.tableplempleados.NoHorasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tableplempleados.DepartamentoColumn)
        End Function
        
        Public Sub SetDepartamentoNull()
            Me(Me.tableplempleados.DepartamentoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class plempleadosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As plempleadosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As plempleadosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As plempleadosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEmpresa As DataColumn
        
        Private columnTitulo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("Reporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property TituloColumn As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReporteRow
            Get
                Return CType(Me.Rows(index),ReporteRow)
            End Get
        End Property
        
        Public Event ReporteRowChanged As ReporteRowChangeEventHandler
        
        Public Event ReporteRowChanging As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleted As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleting As ReporteRowChangeEventHandler
        
        Public Overloads Sub AddReporteRow(ByVal row As ReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReporteRow(ByVal Empresa As String, ByVal Titulo As String, ByVal Descripcion As String) As ReporteRow
            Dim rowReporteRow As ReporteRow = CType(Me.NewRow,ReporteRow)
            rowReporteRow.ItemArray = New Object() {Empresa, Titulo, Descripcion}
            Me.Rows.Add(rowReporteRow)
            Return rowReporteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReporteDataTable = CType(MyBase.Clone,ReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnTitulo = Me.Columns("Titulo")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnTitulo = New DataColumn("Titulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitulo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
        End Sub
        
        Public Function NewReporteRow() As ReporteRow
            Return CType(Me.NewRow,ReporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanged(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanging(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleted(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleting(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReporteRow(ByVal row As ReporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRow
        Inherits DataRow
        
        Private tableReporte As ReporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte = CType(Me.Table,ReporteDataTable)
        End Sub
        
        Public Property Empresa As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.EmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Titulo As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TituloColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.DescripcionColumn) = value
            End Set
        End Property
        
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.EmpresaColumn)
        End Function
        
        Public Sub SetEmpresaNull()
            Me(Me.tableReporte.EmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TituloColumn)
        End Function
        
        Public Sub SetTituloNull()
            Me(Me.tableReporte.TituloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableReporte.DescripcionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
