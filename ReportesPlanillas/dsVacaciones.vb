'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsVacaciones
    Inherits DataSet
    
    Private tablePLVacaciones As PLVacacionesDataTable
    
    Private tableReporte As ReporteDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PLVacaciones")) Is Nothing) Then
                Me.Tables.Add(New PLVacacionesDataTable(ds.Tables("PLVacaciones")))
            End If
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLVacaciones As PLVacacionesDataTable
        Get
            Return Me.tablePLVacaciones
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte As ReporteDataTable
        Get
            Return Me.tableReporte
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsVacaciones = CType(MyBase.Clone,dsVacaciones)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PLVacaciones")) Is Nothing) Then
            Me.Tables.Add(New PLVacacionesDataTable(ds.Tables("PLVacaciones")))
        End If
        If (Not (ds.Tables("Reporte")) Is Nothing) Then
            Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePLVacaciones = CType(Me.Tables("PLVacaciones"),PLVacacionesDataTable)
        If (Not (Me.tablePLVacaciones) Is Nothing) Then
            Me.tablePLVacaciones.InitVars
        End If
        Me.tableReporte = CType(Me.Tables("Reporte"),ReporteDataTable)
        If (Not (Me.tableReporte) Is Nothing) Then
            Me.tableReporte.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsVacaciones"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsVacaciones.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePLVacaciones = New PLVacacionesDataTable
        Me.Tables.Add(Me.tablePLVacaciones)
        Me.tableReporte = New ReporteDataTable
        Me.Tables.Add(Me.tableReporte)
    End Sub
    
    Private Function ShouldSerializePLVacaciones() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeReporte() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PLVacacionesRowChangeEventHandler(ByVal sender As Object, ByVal e As PLVacacionesRowChangeEvent)
    
    Public Delegate Sub ReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As ReporteRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PLVacacionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodEmpleado As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnCodDepartamento As DataColumn
        
        Private columnDepartamento As DataColumn
        
        Private columnSalarioDia As DataColumn
        
        Private columnDiasVacacion As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnISSS As DataColumn
        
        Private columnIVM As DataColumn
        
        Private columnAFP As DataColumn
        
        Private columnRenta As DataColumn
        
        Private columnSueldo As DataColumn
        
        Private columnTreinta As DataColumn
        
        Private columnTotalDesc As DataColumn
        
        Private columnNeto As DataColumn
        
        Private columnNo As DataColumn
        
        Friend Sub New()
            MyBase.New("PLVacaciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodEmpleadoColumn As DataColumn
            Get
                Return Me.columnCodEmpleado
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property CodDepartamentoColumn As DataColumn
            Get
                Return Me.columnCodDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property DepartamentoColumn As DataColumn
            Get
                Return Me.columnDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property SalarioDiaColumn As DataColumn
            Get
                Return Me.columnSalarioDia
            End Get
        End Property
        
        Friend ReadOnly Property DiasVacacionColumn As DataColumn
            Get
                Return Me.columnDiasVacacion
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property ISSSColumn As DataColumn
            Get
                Return Me.columnISSS
            End Get
        End Property
        
        Friend ReadOnly Property IVMColumn As DataColumn
            Get
                Return Me.columnIVM
            End Get
        End Property
        
        Friend ReadOnly Property AFPColumn As DataColumn
            Get
                Return Me.columnAFP
            End Get
        End Property
        
        Friend ReadOnly Property RentaColumn As DataColumn
            Get
                Return Me.columnRenta
            End Get
        End Property
        
        Friend ReadOnly Property SueldoColumn As DataColumn
            Get
                Return Me.columnSueldo
            End Get
        End Property
        
        Friend ReadOnly Property TreintaColumn As DataColumn
            Get
                Return Me.columnTreinta
            End Get
        End Property
        
        Friend ReadOnly Property TotalDescColumn As DataColumn
            Get
                Return Me.columnTotalDesc
            End Get
        End Property
        
        Friend ReadOnly Property NetoColumn As DataColumn
            Get
                Return Me.columnNeto
            End Get
        End Property
        
        Friend ReadOnly Property NoColumn As DataColumn
            Get
                Return Me.columnNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLVacacionesRow
            Get
                Return CType(Me.Rows(index),PLVacacionesRow)
            End Get
        End Property
        
        Public Event PLVacacionesRowChanged As PLVacacionesRowChangeEventHandler
        
        Public Event PLVacacionesRowChanging As PLVacacionesRowChangeEventHandler
        
        Public Event PLVacacionesRowDeleted As PLVacacionesRowChangeEventHandler
        
        Public Event PLVacacionesRowDeleting As PLVacacionesRowChangeEventHandler
        
        Public Overloads Sub AddPLVacacionesRow(ByVal row As PLVacacionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPLVacacionesRow( _
                    ByVal CodEmpleado As String,  _
                    ByVal Nombre As String,  _
                    ByVal CodDepartamento As String,  _
                    ByVal Departamento As String,  _
                    ByVal SalarioDia As Decimal,  _
                    ByVal DiasVacacion As Integer,  _
                    ByVal Monto As Decimal,  _
                    ByVal Tipo As String,  _
                    ByVal ISSS As Decimal,  _
                    ByVal IVM As Decimal,  _
                    ByVal AFP As Decimal,  _
                    ByVal Renta As Decimal,  _
                    ByVal Sueldo As Decimal,  _
                    ByVal Treinta As Decimal,  _
                    ByVal TotalDesc As Decimal,  _
                    ByVal Neto As Decimal,  _
                    ByVal No As Integer) As PLVacacionesRow
            Dim rowPLVacacionesRow As PLVacacionesRow = CType(Me.NewRow,PLVacacionesRow)
            rowPLVacacionesRow.ItemArray = New Object() {CodEmpleado, Nombre, CodDepartamento, Departamento, SalarioDia, DiasVacacion, Monto, Tipo, ISSS, IVM, AFP, Renta, Sueldo, Treinta, TotalDesc, Neto, No}
            Me.Rows.Add(rowPLVacacionesRow)
            Return rowPLVacacionesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PLVacacionesDataTable = CType(MyBase.Clone,PLVacacionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PLVacacionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodEmpleado = Me.Columns("CodEmpleado")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnCodDepartamento = Me.Columns("CodDepartamento")
            Me.columnDepartamento = Me.Columns("Departamento")
            Me.columnSalarioDia = Me.Columns("SalarioDia")
            Me.columnDiasVacacion = Me.Columns("DiasVacacion")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnISSS = Me.Columns("ISSS")
            Me.columnIVM = Me.Columns("IVM")
            Me.columnAFP = Me.Columns("AFP")
            Me.columnRenta = Me.Columns("Renta")
            Me.columnSueldo = Me.Columns("Sueldo")
            Me.columnTreinta = Me.Columns("Treinta")
            Me.columnTotalDesc = Me.Columns("TotalDesc")
            Me.columnNeto = Me.Columns("Neto")
            Me.columnNo = Me.Columns("No")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodEmpleado = New DataColumn("CodEmpleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodEmpleado)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnCodDepartamento = New DataColumn("CodDepartamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodDepartamento)
            Me.columnDepartamento = New DataColumn("Departamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDepartamento)
            Me.columnSalarioDia = New DataColumn("SalarioDia", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalarioDia)
            Me.columnDiasVacacion = New DataColumn("DiasVacacion", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiasVacacion)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnISSS = New DataColumn("ISSS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSS)
            Me.columnIVM = New DataColumn("IVM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIVM)
            Me.columnAFP = New DataColumn("AFP", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAFP)
            Me.columnRenta = New DataColumn("Renta", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRenta)
            Me.columnSueldo = New DataColumn("Sueldo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSueldo)
            Me.columnTreinta = New DataColumn("Treinta", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTreinta)
            Me.columnTotalDesc = New DataColumn("TotalDesc", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalDesc)
            Me.columnNeto = New DataColumn("Neto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNeto)
            Me.columnNo = New DataColumn("No", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo)
        End Sub
        
        Public Function NewPLVacacionesRow() As PLVacacionesRow
            Return CType(Me.NewRow,PLVacacionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PLVacacionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PLVacacionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLVacacionesRowChangedEvent) Is Nothing) Then
                RaiseEvent PLVacacionesRowChanged(Me, New PLVacacionesRowChangeEvent(CType(e.Row,PLVacacionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLVacacionesRowChangingEvent) Is Nothing) Then
                RaiseEvent PLVacacionesRowChanging(Me, New PLVacacionesRowChangeEvent(CType(e.Row,PLVacacionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLVacacionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLVacacionesRowDeleted(Me, New PLVacacionesRowChangeEvent(CType(e.Row,PLVacacionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLVacacionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLVacacionesRowDeleting(Me, New PLVacacionesRowChangeEvent(CType(e.Row,PLVacacionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePLVacacionesRow(ByVal row As PLVacacionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PLVacacionesRow
        Inherits DataRow
        
        Private tablePLVacaciones As PLVacacionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLVacaciones = CType(Me.Table,PLVacacionesDataTable)
        End Sub
        
        Public Property CodEmpleado As String
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.CodEmpleadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.CodEmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.NombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.NombreColumn) = value
            End Set
        End Property
        
        Public Property CodDepartamento As String
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.CodDepartamentoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.CodDepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Departamento As String
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.DepartamentoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.DepartamentoColumn) = value
            End Set
        End Property
        
        Public Property SalarioDia As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.SalarioDiaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.SalarioDiaColumn) = value
            End Set
        End Property
        
        Public Property DiasVacacion As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.DiasVacacionColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.DiasVacacionColumn) = value
            End Set
        End Property
        
        Public Property Monto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.MontoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.MontoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.TipoColumn) = value
            End Set
        End Property
        
        Public Property ISSS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.ISSSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.ISSSColumn) = value
            End Set
        End Property
        
        Public Property IVM As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.IVMColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.IVMColumn) = value
            End Set
        End Property
        
        Public Property AFP As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.AFPColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.AFPColumn) = value
            End Set
        End Property
        
        Public Property Renta As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.RentaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.RentaColumn) = value
            End Set
        End Property
        
        Public Property Sueldo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.SueldoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.SueldoColumn) = value
            End Set
        End Property
        
        Public Property Treinta As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.TreintaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.TreintaColumn) = value
            End Set
        End Property
        
        Public Property TotalDesc As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.TotalDescColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.TotalDescColumn) = value
            End Set
        End Property
        
        Public Property Neto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.NetoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.NetoColumn) = value
            End Set
        End Property
        
        Public Property No As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLVacaciones.NoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLVacaciones.NoColumn) = value
            End Set
        End Property
        
        Public Function IsCodEmpleadoNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.CodEmpleadoColumn)
        End Function
        
        Public Sub SetCodEmpleadoNull()
            Me(Me.tablePLVacaciones.CodEmpleadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.NombreColumn)
        End Function
        
        Public Sub SetNombreNull()
            Me(Me.tablePLVacaciones.NombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.CodDepartamentoColumn)
        End Function
        
        Public Sub SetCodDepartamentoNull()
            Me(Me.tablePLVacaciones.CodDepartamentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.DepartamentoColumn)
        End Function
        
        Public Sub SetDepartamentoNull()
            Me(Me.tablePLVacaciones.DepartamentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalarioDiaNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.SalarioDiaColumn)
        End Function
        
        Public Sub SetSalarioDiaNull()
            Me(Me.tablePLVacaciones.SalarioDiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiasVacacionNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.DiasVacacionColumn)
        End Function
        
        Public Sub SetDiasVacacionNull()
            Me(Me.tablePLVacaciones.DiasVacacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tablePLVacaciones.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tablePLVacaciones.TipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSSNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.ISSSColumn)
        End Function
        
        Public Sub SetISSSNull()
            Me(Me.tablePLVacaciones.ISSSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIVMNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.IVMColumn)
        End Function
        
        Public Sub SetIVMNull()
            Me(Me.tablePLVacaciones.IVMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAFPNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.AFPColumn)
        End Function
        
        Public Sub SetAFPNull()
            Me(Me.tablePLVacaciones.AFPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRentaNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.RentaColumn)
        End Function
        
        Public Sub SetRentaNull()
            Me(Me.tablePLVacaciones.RentaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSueldoNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.SueldoColumn)
        End Function
        
        Public Sub SetSueldoNull()
            Me(Me.tablePLVacaciones.SueldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTreintaNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.TreintaColumn)
        End Function
        
        Public Sub SetTreintaNull()
            Me(Me.tablePLVacaciones.TreintaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalDescNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.TotalDescColumn)
        End Function
        
        Public Sub SetTotalDescNull()
            Me(Me.tablePLVacaciones.TotalDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNetoNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.NetoColumn)
        End Function
        
        Public Sub SetNetoNull()
            Me(Me.tablePLVacaciones.NetoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoNull() As Boolean
            Return Me.IsNull(Me.tablePLVacaciones.NoColumn)
        End Function
        
        Public Sub SetNoNull()
            Me(Me.tablePLVacaciones.NoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PLVacacionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PLVacacionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PLVacacionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PLVacacionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEmpresa As DataColumn
        
        Private columnTitulo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("Reporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property TituloColumn As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReporteRow
            Get
                Return CType(Me.Rows(index),ReporteRow)
            End Get
        End Property
        
        Public Event ReporteRowChanged As ReporteRowChangeEventHandler
        
        Public Event ReporteRowChanging As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleted As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleting As ReporteRowChangeEventHandler
        
        Public Overloads Sub AddReporteRow(ByVal row As ReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReporteRow(ByVal Empresa As String, ByVal Titulo As String, ByVal Descripcion As String) As ReporteRow
            Dim rowReporteRow As ReporteRow = CType(Me.NewRow,ReporteRow)
            rowReporteRow.ItemArray = New Object() {Empresa, Titulo, Descripcion}
            Me.Rows.Add(rowReporteRow)
            Return rowReporteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReporteDataTable = CType(MyBase.Clone,ReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnTitulo = Me.Columns("Titulo")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnTitulo = New DataColumn("Titulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitulo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
        End Sub
        
        Public Function NewReporteRow() As ReporteRow
            Return CType(Me.NewRow,ReporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanged(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanging(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleted(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleting(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReporteRow(ByVal row As ReporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRow
        Inherits DataRow
        
        Private tableReporte As ReporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte = CType(Me.Table,ReporteDataTable)
        End Sub
        
        Public Property Empresa As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.EmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Titulo As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TituloColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.DescripcionColumn) = value
            End Set
        End Property
        
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.EmpresaColumn)
        End Function
        
        Public Sub SetEmpresaNull()
            Me(Me.tableReporte.EmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TituloColumn)
        End Function
        
        Public Sub SetTituloNull()
            Me(Me.tableReporte.TituloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableReporte.DescripcionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
