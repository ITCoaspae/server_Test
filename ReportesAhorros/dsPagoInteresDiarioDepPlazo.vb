'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsPagoInteresDiarioDepPlazo
    Inherits DataSet
    
    Private tableAhCuentasAhorro As AhCuentasAhorroDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AhCuentasAhorro")) Is Nothing) Then
                Me.Tables.Add(New AhCuentasAhorroDataTable(ds.Tables("AhCuentasAhorro")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AhCuentasAhorro As AhCuentasAhorroDataTable
        Get
            Return Me.tableAhCuentasAhorro
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsPagoInteresDiarioDepPlazo = CType(MyBase.Clone,dsPagoInteresDiarioDepPlazo)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("AhCuentasAhorro")) Is Nothing) Then
            Me.Tables.Add(New AhCuentasAhorroDataTable(ds.Tables("AhCuentasAhorro")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAhCuentasAhorro = CType(Me.Tables("AhCuentasAhorro"),AhCuentasAhorroDataTable)
        If (Not (Me.tableAhCuentasAhorro) Is Nothing) Then
            Me.tableAhCuentasAhorro.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsPagoInteresDiarioDepPlazo"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPagoInteresDiarioDepPlazo.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAhCuentasAhorro = New AhCuentasAhorroDataTable
        Me.Tables.Add(Me.tableAhCuentasAhorro)
    End Sub
    
    Private Function ShouldSerializeAhCuentasAhorro() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AhCuentasAhorroRowChangeEventHandler(ByVal sender As Object, ByVal e As AhCuentasAhorroRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AhCuentasAhorroDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodTipoAhorro As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnDUI As DataColumn
        
        Private columnNombres As DataColumn
        
        Private columnApellido1 As DataColumn
        
        Private columnApellido2 As DataColumn
        
        Private columnApellidoCas As DataColumn
        
        Private columnNocuenta As DataColumn
        
        Private columnSaldo_CuentaAhorro As DataColumn
        
        Private columnNumCuentaBancoEntregaInt As DataColumn
        
        Private columnTasaInteres As DataColumn
        
        Private columnFechaVencimiento As DataColumn
        
        Private columnSaldoInteresPendiente As DataColumn
        
        Private columnInteresCalculado As DataColumn
        
        Private columnTotalTasaInteresProvMensual As DataColumn
        
        Private columnFechaApertura As DataColumn
        
        Friend Sub New()
            MyBase.New("AhCuentasAhorro")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodTipoAhorroColumn As DataColumn
            Get
                Return Me.columnCodTipoAhorro
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property DUIColumn As DataColumn
            Get
                Return Me.columnDUI
            End Get
        End Property
        
        Friend ReadOnly Property NombresColumn As DataColumn
            Get
                Return Me.columnNombres
            End Get
        End Property
        
        Friend ReadOnly Property Apellido1Column As DataColumn
            Get
                Return Me.columnApellido1
            End Get
        End Property
        
        Friend ReadOnly Property Apellido2Column As DataColumn
            Get
                Return Me.columnApellido2
            End Get
        End Property
        
        Friend ReadOnly Property ApellidoCasColumn As DataColumn
            Get
                Return Me.columnApellidoCas
            End Get
        End Property
        
        Friend ReadOnly Property NocuentaColumn As DataColumn
            Get
                Return Me.columnNocuenta
            End Get
        End Property
        
        Friend ReadOnly Property Saldo_CuentaAhorroColumn As DataColumn
            Get
                Return Me.columnSaldo_CuentaAhorro
            End Get
        End Property
        
        Friend ReadOnly Property NumCuentaBancoEntregaIntColumn As DataColumn
            Get
                Return Me.columnNumCuentaBancoEntregaInt
            End Get
        End Property
        
        Friend ReadOnly Property TasaInteresColumn As DataColumn
            Get
                Return Me.columnTasaInteres
            End Get
        End Property
        
        Friend ReadOnly Property FechaVencimientoColumn As DataColumn
            Get
                Return Me.columnFechaVencimiento
            End Get
        End Property
        
        Friend ReadOnly Property SaldoInteresPendienteColumn As DataColumn
            Get
                Return Me.columnSaldoInteresPendiente
            End Get
        End Property
        
        Friend ReadOnly Property InteresCalculadoColumn As DataColumn
            Get
                Return Me.columnInteresCalculado
            End Get
        End Property
        
        Friend ReadOnly Property TotalTasaInteresProvMensualColumn As DataColumn
            Get
                Return Me.columnTotalTasaInteresProvMensual
            End Get
        End Property
        
        Friend ReadOnly Property FechaAperturaColumn As DataColumn
            Get
                Return Me.columnFechaApertura
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AhCuentasAhorroRow
            Get
                Return CType(Me.Rows(index),AhCuentasAhorroRow)
            End Get
        End Property
        
        Public Event AhCuentasAhorroRowChanged As AhCuentasAhorroRowChangeEventHandler
        
        Public Event AhCuentasAhorroRowChanging As AhCuentasAhorroRowChangeEventHandler
        
        Public Event AhCuentasAhorroRowDeleted As AhCuentasAhorroRowChangeEventHandler
        
        Public Event AhCuentasAhorroRowDeleting As AhCuentasAhorroRowChangeEventHandler
        
        Public Overloads Sub AddAhCuentasAhorroRow(ByVal row As AhCuentasAhorroRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAhCuentasAhorroRow( _
                    ByVal CodTipoAhorro As String,  _
                    ByVal Descripcion As String,  _
                    ByVal DUI As String,  _
                    ByVal Nombres As String,  _
                    ByVal Apellido1 As String,  _
                    ByVal Apellido2 As String,  _
                    ByVal ApellidoCas As String,  _
                    ByVal Nocuenta As String,  _
                    ByVal Saldo_CuentaAhorro As Single,  _
                    ByVal NumCuentaBancoEntregaInt As String,  _
                    ByVal TasaInteres As Single,  _
                    ByVal FechaVencimiento As Date,  _
                    ByVal SaldoInteresPendiente As Single,  _
                    ByVal InteresCalculado As Double,  _
                    ByVal TotalTasaInteresProvMensual As Double,  _
                    ByVal FechaApertura As Date) As AhCuentasAhorroRow
            Dim rowAhCuentasAhorroRow As AhCuentasAhorroRow = CType(Me.NewRow,AhCuentasAhorroRow)
            rowAhCuentasAhorroRow.ItemArray = New Object() {CodTipoAhorro, Descripcion, DUI, Nombres, Apellido1, Apellido2, ApellidoCas, Nocuenta, Saldo_CuentaAhorro, NumCuentaBancoEntregaInt, TasaInteres, FechaVencimiento, SaldoInteresPendiente, InteresCalculado, TotalTasaInteresProvMensual, FechaApertura}
            Me.Rows.Add(rowAhCuentasAhorroRow)
            Return rowAhCuentasAhorroRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AhCuentasAhorroDataTable = CType(MyBase.Clone,AhCuentasAhorroDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AhCuentasAhorroDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodTipoAhorro = Me.Columns("CodTipoAhorro")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnDUI = Me.Columns("DUI")
            Me.columnNombres = Me.Columns("Nombres")
            Me.columnApellido1 = Me.Columns("Apellido1")
            Me.columnApellido2 = Me.Columns("Apellido2")
            Me.columnApellidoCas = Me.Columns("ApellidoCas")
            Me.columnNocuenta = Me.Columns("Nocuenta")
            Me.columnSaldo_CuentaAhorro = Me.Columns("Saldo_CuentaAhorro")
            Me.columnNumCuentaBancoEntregaInt = Me.Columns("NumCuentaBancoEntregaInt")
            Me.columnTasaInteres = Me.Columns("TasaInteres")
            Me.columnFechaVencimiento = Me.Columns("FechaVencimiento")
            Me.columnSaldoInteresPendiente = Me.Columns("SaldoInteresPendiente")
            Me.columnInteresCalculado = Me.Columns("InteresCalculado")
            Me.columnTotalTasaInteresProvMensual = Me.Columns("TotalTasaInteresProvMensual")
            Me.columnFechaApertura = Me.Columns("FechaApertura")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodTipoAhorro = New DataColumn("CodTipoAhorro", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodTipoAhorro)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnDUI = New DataColumn("DUI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDUI)
            Me.columnNombres = New DataColumn("Nombres", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombres)
            Me.columnApellido1 = New DataColumn("Apellido1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido1)
            Me.columnApellido2 = New DataColumn("Apellido2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido2)
            Me.columnApellidoCas = New DataColumn("ApellidoCas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellidoCas)
            Me.columnNocuenta = New DataColumn("Nocuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNocuenta)
            Me.columnSaldo_CuentaAhorro = New DataColumn("Saldo_CuentaAhorro", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo_CuentaAhorro)
            Me.columnNumCuentaBancoEntregaInt = New DataColumn("NumCuentaBancoEntregaInt", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumCuentaBancoEntregaInt)
            Me.columnTasaInteres = New DataColumn("TasaInteres", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTasaInteres)
            Me.columnFechaVencimiento = New DataColumn("FechaVencimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaVencimiento)
            Me.columnSaldoInteresPendiente = New DataColumn("SaldoInteresPendiente", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoInteresPendiente)
            Me.columnInteresCalculado = New DataColumn("InteresCalculado", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInteresCalculado)
            Me.columnTotalTasaInteresProvMensual = New DataColumn("TotalTasaInteresProvMensual", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalTasaInteresProvMensual)
            Me.columnFechaApertura = New DataColumn("FechaApertura", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaApertura)
        End Sub
        
        Public Function NewAhCuentasAhorroRow() As AhCuentasAhorroRow
            Return CType(Me.NewRow,AhCuentasAhorroRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AhCuentasAhorroRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AhCuentasAhorroRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AhCuentasAhorroRowChangedEvent) Is Nothing) Then
                RaiseEvent AhCuentasAhorroRowChanged(Me, New AhCuentasAhorroRowChangeEvent(CType(e.Row,AhCuentasAhorroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AhCuentasAhorroRowChangingEvent) Is Nothing) Then
                RaiseEvent AhCuentasAhorroRowChanging(Me, New AhCuentasAhorroRowChangeEvent(CType(e.Row,AhCuentasAhorroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AhCuentasAhorroRowDeletedEvent) Is Nothing) Then
                RaiseEvent AhCuentasAhorroRowDeleted(Me, New AhCuentasAhorroRowChangeEvent(CType(e.Row,AhCuentasAhorroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AhCuentasAhorroRowDeletingEvent) Is Nothing) Then
                RaiseEvent AhCuentasAhorroRowDeleting(Me, New AhCuentasAhorroRowChangeEvent(CType(e.Row,AhCuentasAhorroRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAhCuentasAhorroRow(ByVal row As AhCuentasAhorroRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AhCuentasAhorroRow
        Inherits DataRow
        
        Private tableAhCuentasAhorro As AhCuentasAhorroDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAhCuentasAhorro = CType(Me.Table,AhCuentasAhorroDataTable)
        End Sub
        
        Public Property CodTipoAhorro As String
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.CodTipoAhorroColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.CodTipoAhorroColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property DUI As String
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.DUIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.DUIColumn) = value
            End Set
        End Property
        
        Public Property Nombres As String
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.NombresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.NombresColumn) = value
            End Set
        End Property
        
        Public Property Apellido1 As String
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.Apellido1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.Apellido1Column) = value
            End Set
        End Property
        
        Public Property Apellido2 As String
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.Apellido2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.Apellido2Column) = value
            End Set
        End Property
        
        Public Property ApellidoCas As String
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.ApellidoCasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.ApellidoCasColumn) = value
            End Set
        End Property
        
        Public Property Nocuenta As String
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.NocuentaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.NocuentaColumn) = value
            End Set
        End Property
        
        Public Property Saldo_CuentaAhorro As Single
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.Saldo_CuentaAhorroColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.Saldo_CuentaAhorroColumn) = value
            End Set
        End Property
        
        Public Property NumCuentaBancoEntregaInt As String
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.NumCuentaBancoEntregaIntColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.NumCuentaBancoEntregaIntColumn) = value
            End Set
        End Property
        
        Public Property TasaInteres As Single
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.TasaInteresColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.TasaInteresColumn) = value
            End Set
        End Property
        
        Public Property FechaVencimiento As Date
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.FechaVencimientoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.FechaVencimientoColumn) = value
            End Set
        End Property
        
        Public Property SaldoInteresPendiente As Single
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.SaldoInteresPendienteColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.SaldoInteresPendienteColumn) = value
            End Set
        End Property
        
        Public Property InteresCalculado As Double
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.InteresCalculadoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.InteresCalculadoColumn) = value
            End Set
        End Property
        
        Public Property TotalTasaInteresProvMensual As Double
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.TotalTasaInteresProvMensualColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.TotalTasaInteresProvMensualColumn) = value
            End Set
        End Property
        
        Public Property FechaApertura As Date
            Get
                Try 
                    Return CType(Me(Me.tableAhCuentasAhorro.FechaAperturaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAhCuentasAhorro.FechaAperturaColumn) = value
            End Set
        End Property
        
        Public Function IsCodTipoAhorroNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.CodTipoAhorroColumn)
        End Function
        
        Public Sub SetCodTipoAhorroNull()
            Me(Me.tableAhCuentasAhorro.CodTipoAhorroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableAhCuentasAhorro.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDUINull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.DUIColumn)
        End Function
        
        Public Sub SetDUINull()
            Me(Me.tableAhCuentasAhorro.DUIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombresNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.NombresColumn)
        End Function
        
        Public Sub SetNombresNull()
            Me(Me.tableAhCuentasAhorro.NombresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellido1Null() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.Apellido1Column)
        End Function
        
        Public Sub SetApellido1Null()
            Me(Me.tableAhCuentasAhorro.Apellido1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellido2Null() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.Apellido2Column)
        End Function
        
        Public Sub SetApellido2Null()
            Me(Me.tableAhCuentasAhorro.Apellido2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellidoCasNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.ApellidoCasColumn)
        End Function
        
        Public Sub SetApellidoCasNull()
            Me(Me.tableAhCuentasAhorro.ApellidoCasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNocuentaNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.NocuentaColumn)
        End Function
        
        Public Sub SetNocuentaNull()
            Me(Me.tableAhCuentasAhorro.NocuentaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldo_CuentaAhorroNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.Saldo_CuentaAhorroColumn)
        End Function
        
        Public Sub SetSaldo_CuentaAhorroNull()
            Me(Me.tableAhCuentasAhorro.Saldo_CuentaAhorroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumCuentaBancoEntregaIntNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.NumCuentaBancoEntregaIntColumn)
        End Function
        
        Public Sub SetNumCuentaBancoEntregaIntNull()
            Me(Me.tableAhCuentasAhorro.NumCuentaBancoEntregaIntColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTasaInteresNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.TasaInteresColumn)
        End Function
        
        Public Sub SetTasaInteresNull()
            Me(Me.tableAhCuentasAhorro.TasaInteresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaVencimientoNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.FechaVencimientoColumn)
        End Function
        
        Public Sub SetFechaVencimientoNull()
            Me(Me.tableAhCuentasAhorro.FechaVencimientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoInteresPendienteNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.SaldoInteresPendienteColumn)
        End Function
        
        Public Sub SetSaldoInteresPendienteNull()
            Me(Me.tableAhCuentasAhorro.SaldoInteresPendienteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInteresCalculadoNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.InteresCalculadoColumn)
        End Function
        
        Public Sub SetInteresCalculadoNull()
            Me(Me.tableAhCuentasAhorro.InteresCalculadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalTasaInteresProvMensualNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.TotalTasaInteresProvMensualColumn)
        End Function
        
        Public Sub SetTotalTasaInteresProvMensualNull()
            Me(Me.tableAhCuentasAhorro.TotalTasaInteresProvMensualColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaAperturaNull() As Boolean
            Return Me.IsNull(Me.tableAhCuentasAhorro.FechaAperturaColumn)
        End Function
        
        Public Sub SetFechaAperturaNull()
            Me(Me.tableAhCuentasAhorro.FechaAperturaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AhCuentasAhorroRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AhCuentasAhorroRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AhCuentasAhorroRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AhCuentasAhorroRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
