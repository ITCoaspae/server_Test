'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsReporteRenunciaAsociado
    Inherits DataSet
    
    Private tableDatosRenunciaAsociado As DatosRenunciaAsociadoDataTable
    
    Private tableDatosCuentaAhorroAsociado As DatosCuentaAhorroAsociadoDataTable
    
    Private tableDatosCuentasPrestamoAsociado As DatosCuentasPrestamoAsociadoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DatosRenunciaAsociado")) Is Nothing) Then
                Me.Tables.Add(New DatosRenunciaAsociadoDataTable(ds.Tables("DatosRenunciaAsociado")))
            End If
            If (Not (ds.Tables("DatosCuentaAhorroAsociado")) Is Nothing) Then
                Me.Tables.Add(New DatosCuentaAhorroAsociadoDataTable(ds.Tables("DatosCuentaAhorroAsociado")))
            End If
            If (Not (ds.Tables("DatosCuentasPrestamoAsociado")) Is Nothing) Then
                Me.Tables.Add(New DatosCuentasPrestamoAsociadoDataTable(ds.Tables("DatosCuentasPrestamoAsociado")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosRenunciaAsociado As DatosRenunciaAsociadoDataTable
        Get
            Return Me.tableDatosRenunciaAsociado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosCuentaAhorroAsociado As DatosCuentaAhorroAsociadoDataTable
        Get
            Return Me.tableDatosCuentaAhorroAsociado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosCuentasPrestamoAsociado As DatosCuentasPrestamoAsociadoDataTable
        Get
            Return Me.tableDatosCuentasPrestamoAsociado
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsReporteRenunciaAsociado = CType(MyBase.Clone,dsReporteRenunciaAsociado)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DatosRenunciaAsociado")) Is Nothing) Then
            Me.Tables.Add(New DatosRenunciaAsociadoDataTable(ds.Tables("DatosRenunciaAsociado")))
        End If
        If (Not (ds.Tables("DatosCuentaAhorroAsociado")) Is Nothing) Then
            Me.Tables.Add(New DatosCuentaAhorroAsociadoDataTable(ds.Tables("DatosCuentaAhorroAsociado")))
        End If
        If (Not (ds.Tables("DatosCuentasPrestamoAsociado")) Is Nothing) Then
            Me.Tables.Add(New DatosCuentasPrestamoAsociadoDataTable(ds.Tables("DatosCuentasPrestamoAsociado")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDatosRenunciaAsociado = CType(Me.Tables("DatosRenunciaAsociado"),DatosRenunciaAsociadoDataTable)
        If (Not (Me.tableDatosRenunciaAsociado) Is Nothing) Then
            Me.tableDatosRenunciaAsociado.InitVars
        End If
        Me.tableDatosCuentaAhorroAsociado = CType(Me.Tables("DatosCuentaAhorroAsociado"),DatosCuentaAhorroAsociadoDataTable)
        If (Not (Me.tableDatosCuentaAhorroAsociado) Is Nothing) Then
            Me.tableDatosCuentaAhorroAsociado.InitVars
        End If
        Me.tableDatosCuentasPrestamoAsociado = CType(Me.Tables("DatosCuentasPrestamoAsociado"),DatosCuentasPrestamoAsociadoDataTable)
        If (Not (Me.tableDatosCuentasPrestamoAsociado) Is Nothing) Then
            Me.tableDatosCuentasPrestamoAsociado.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsReporteRenunciaAsociado"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsReporteRenunciaAsociado.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDatosRenunciaAsociado = New DatosRenunciaAsociadoDataTable
        Me.Tables.Add(Me.tableDatosRenunciaAsociado)
        Me.tableDatosCuentaAhorroAsociado = New DatosCuentaAhorroAsociadoDataTable
        Me.Tables.Add(Me.tableDatosCuentaAhorroAsociado)
        Me.tableDatosCuentasPrestamoAsociado = New DatosCuentasPrestamoAsociadoDataTable
        Me.Tables.Add(Me.tableDatosCuentasPrestamoAsociado)
    End Sub
    
    Private Function ShouldSerializeDatosRenunciaAsociado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDatosCuentaAhorroAsociado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDatosCuentasPrestamoAsociado() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DatosRenunciaAsociadoRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosRenunciaAsociadoRowChangeEvent)
    
    Public Delegate Sub DatosCuentaAhorroAsociadoRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosCuentaAhorroAsociadoRowChangeEvent)
    
    Public Delegate Sub DatosCuentasPrestamoAsociadoRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosCuentasPrestamoAsociadoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRenunciaAsociadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFechaReporte As DataColumn
        
        Private columnObsAsociado As DataColumn
        
        Private columnObsGerente As DataColumn
        
        Private columnObsConsejo As DataColumn
        
        Private columnFechaSesion As DataColumn
        
        Private columnNoActa As DataColumn
        
        Private columnAceptada As DataColumn
        
        Private columnNoSocio As DataColumn
        
        Private columnNombreSocio As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnTelefono As DataColumn
        
        Friend Sub New()
            MyBase.New("DatosRenunciaAsociado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FechaReporteColumn As DataColumn
            Get
                Return Me.columnFechaReporte
            End Get
        End Property
        
        Friend ReadOnly Property ObsAsociadoColumn As DataColumn
            Get
                Return Me.columnObsAsociado
            End Get
        End Property
        
        Friend ReadOnly Property ObsGerenteColumn As DataColumn
            Get
                Return Me.columnObsGerente
            End Get
        End Property
        
        Friend ReadOnly Property ObsConsejoColumn As DataColumn
            Get
                Return Me.columnObsConsejo
            End Get
        End Property
        
        Friend ReadOnly Property FechaSesionColumn As DataColumn
            Get
                Return Me.columnFechaSesion
            End Get
        End Property
        
        Friend ReadOnly Property NoActaColumn As DataColumn
            Get
                Return Me.columnNoActa
            End Get
        End Property
        
        Friend ReadOnly Property AceptadaColumn As DataColumn
            Get
                Return Me.columnAceptada
            End Get
        End Property
        
        Friend ReadOnly Property NoSocioColumn As DataColumn
            Get
                Return Me.columnNoSocio
            End Get
        End Property
        
        Friend ReadOnly Property NombreSocioColumn As DataColumn
            Get
                Return Me.columnNombreSocio
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property TelefonoColumn As DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosRenunciaAsociadoRow
            Get
                Return CType(Me.Rows(index),DatosRenunciaAsociadoRow)
            End Get
        End Property
        
        Public Event DatosRenunciaAsociadoRowChanged As DatosRenunciaAsociadoRowChangeEventHandler
        
        Public Event DatosRenunciaAsociadoRowChanging As DatosRenunciaAsociadoRowChangeEventHandler
        
        Public Event DatosRenunciaAsociadoRowDeleted As DatosRenunciaAsociadoRowChangeEventHandler
        
        Public Event DatosRenunciaAsociadoRowDeleting As DatosRenunciaAsociadoRowChangeEventHandler
        
        Public Overloads Sub AddDatosRenunciaAsociadoRow(ByVal row As DatosRenunciaAsociadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDatosRenunciaAsociadoRow(ByVal FechaReporte As Date, ByVal ObsAsociado As String, ByVal ObsGerente As String, ByVal ObsConsejo As String, ByVal FechaSesion As Date, ByVal NoActa As String, ByVal Aceptada As String, ByVal NoSocio As String, ByVal NombreSocio As String, ByVal Direccion As String, ByVal Telefono As String) As DatosRenunciaAsociadoRow
            Dim rowDatosRenunciaAsociadoRow As DatosRenunciaAsociadoRow = CType(Me.NewRow,DatosRenunciaAsociadoRow)
            rowDatosRenunciaAsociadoRow.ItemArray = New Object() {FechaReporte, ObsAsociado, ObsGerente, ObsConsejo, FechaSesion, NoActa, Aceptada, NoSocio, NombreSocio, Direccion, Telefono}
            Me.Rows.Add(rowDatosRenunciaAsociadoRow)
            Return rowDatosRenunciaAsociadoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DatosRenunciaAsociadoDataTable = CType(MyBase.Clone,DatosRenunciaAsociadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DatosRenunciaAsociadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFechaReporte = Me.Columns("FechaReporte")
            Me.columnObsAsociado = Me.Columns("ObsAsociado")
            Me.columnObsGerente = Me.Columns("ObsGerente")
            Me.columnObsConsejo = Me.Columns("ObsConsejo")
            Me.columnFechaSesion = Me.Columns("FechaSesion")
            Me.columnNoActa = Me.Columns("NoActa")
            Me.columnAceptada = Me.Columns("Aceptada")
            Me.columnNoSocio = Me.Columns("NoSocio")
            Me.columnNombreSocio = Me.Columns("NombreSocio")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnTelefono = Me.Columns("Telefono")
        End Sub
        
        Private Sub InitClass()
            Me.columnFechaReporte = New DataColumn("FechaReporte", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaReporte)
            Me.columnObsAsociado = New DataColumn("ObsAsociado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObsAsociado)
            Me.columnObsGerente = New DataColumn("ObsGerente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObsGerente)
            Me.columnObsConsejo = New DataColumn("ObsConsejo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObsConsejo)
            Me.columnFechaSesion = New DataColumn("FechaSesion", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaSesion)
            Me.columnNoActa = New DataColumn("NoActa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoActa)
            Me.columnAceptada = New DataColumn("Aceptada", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAceptada)
            Me.columnNoSocio = New DataColumn("NoSocio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoSocio)
            Me.columnNombreSocio = New DataColumn("NombreSocio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreSocio)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnTelefono = New DataColumn("Telefono", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono)
        End Sub
        
        Public Function NewDatosRenunciaAsociadoRow() As DatosRenunciaAsociadoRow
            Return CType(Me.NewRow,DatosRenunciaAsociadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DatosRenunciaAsociadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatosRenunciaAsociadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosRenunciaAsociadoRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosRenunciaAsociadoRowChanged(Me, New DatosRenunciaAsociadoRowChangeEvent(CType(e.Row,DatosRenunciaAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosRenunciaAsociadoRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosRenunciaAsociadoRowChanging(Me, New DatosRenunciaAsociadoRowChangeEvent(CType(e.Row,DatosRenunciaAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosRenunciaAsociadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosRenunciaAsociadoRowDeleted(Me, New DatosRenunciaAsociadoRowChangeEvent(CType(e.Row,DatosRenunciaAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosRenunciaAsociadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosRenunciaAsociadoRowDeleting(Me, New DatosRenunciaAsociadoRowChangeEvent(CType(e.Row,DatosRenunciaAsociadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDatosRenunciaAsociadoRow(ByVal row As DatosRenunciaAsociadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRenunciaAsociadoRow
        Inherits DataRow
        
        Private tableDatosRenunciaAsociado As DatosRenunciaAsociadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosRenunciaAsociado = CType(Me.Table,DatosRenunciaAsociadoDataTable)
        End Sub
        
        Public Property FechaReporte As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.FechaReporteColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.FechaReporteColumn) = value
            End Set
        End Property
        
        Public Property ObsAsociado As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.ObsAsociadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.ObsAsociadoColumn) = value
            End Set
        End Property
        
        Public Property ObsGerente As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.ObsGerenteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.ObsGerenteColumn) = value
            End Set
        End Property
        
        Public Property ObsConsejo As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.ObsConsejoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.ObsConsejoColumn) = value
            End Set
        End Property
        
        Public Property FechaSesion As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.FechaSesionColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.FechaSesionColumn) = value
            End Set
        End Property
        
        Public Property NoActa As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.NoActaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.NoActaColumn) = value
            End Set
        End Property
        
        Public Property Aceptada As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.AceptadaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.AceptadaColumn) = value
            End Set
        End Property
        
        Public Property NoSocio As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.NoSocioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.NoSocioColumn) = value
            End Set
        End Property
        
        Public Property NombreSocio As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.NombreSocioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.NombreSocioColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.DireccionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.DireccionColumn) = value
            End Set
        End Property
        
        Public Property Telefono As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosRenunciaAsociado.TelefonoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosRenunciaAsociado.TelefonoColumn) = value
            End Set
        End Property
        
        Public Function IsFechaReporteNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.FechaReporteColumn)
        End Function
        
        Public Sub SetFechaReporteNull()
            Me(Me.tableDatosRenunciaAsociado.FechaReporteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsObsAsociadoNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.ObsAsociadoColumn)
        End Function
        
        Public Sub SetObsAsociadoNull()
            Me(Me.tableDatosRenunciaAsociado.ObsAsociadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsObsGerenteNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.ObsGerenteColumn)
        End Function
        
        Public Sub SetObsGerenteNull()
            Me(Me.tableDatosRenunciaAsociado.ObsGerenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsObsConsejoNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.ObsConsejoColumn)
        End Function
        
        Public Sub SetObsConsejoNull()
            Me(Me.tableDatosRenunciaAsociado.ObsConsejoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaSesionNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.FechaSesionColumn)
        End Function
        
        Public Sub SetFechaSesionNull()
            Me(Me.tableDatosRenunciaAsociado.FechaSesionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoActaNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.NoActaColumn)
        End Function
        
        Public Sub SetNoActaNull()
            Me(Me.tableDatosRenunciaAsociado.NoActaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAceptadaNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.AceptadaColumn)
        End Function
        
        Public Sub SetAceptadaNull()
            Me(Me.tableDatosRenunciaAsociado.AceptadaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoSocioNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.NoSocioColumn)
        End Function
        
        Public Sub SetNoSocioNull()
            Me(Me.tableDatosRenunciaAsociado.NoSocioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombreSocioNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.NombreSocioColumn)
        End Function
        
        Public Sub SetNombreSocioNull()
            Me(Me.tableDatosRenunciaAsociado.NombreSocioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.DireccionColumn)
        End Function
        
        Public Sub SetDireccionNull()
            Me(Me.tableDatosRenunciaAsociado.DireccionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableDatosRenunciaAsociado.TelefonoColumn)
        End Function
        
        Public Sub SetTelefonoNull()
            Me(Me.tableDatosRenunciaAsociado.TelefonoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRenunciaAsociadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DatosRenunciaAsociadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DatosRenunciaAsociadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DatosRenunciaAsociadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosCuentaAhorroAsociadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnttAportaciones As DataColumn
        
        Private columnttDividendos As DataColumn
        
        Private columnttCtaAhorroVista As DataColumn
        
        Private columnttCtaAhorroRestringido As DataColumn
        
        Private columnTotalCtasAhorro As DataColumn
        
        Friend Sub New()
            MyBase.New("DatosCuentaAhorroAsociado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ttAportacionesColumn As DataColumn
            Get
                Return Me.columnttAportaciones
            End Get
        End Property
        
        Friend ReadOnly Property ttDividendosColumn As DataColumn
            Get
                Return Me.columnttDividendos
            End Get
        End Property
        
        Friend ReadOnly Property ttCtaAhorroVistaColumn As DataColumn
            Get
                Return Me.columnttCtaAhorroVista
            End Get
        End Property
        
        Friend ReadOnly Property ttCtaAhorroRestringidoColumn As DataColumn
            Get
                Return Me.columnttCtaAhorroRestringido
            End Get
        End Property
        
        Friend ReadOnly Property TotalCtasAhorroColumn As DataColumn
            Get
                Return Me.columnTotalCtasAhorro
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosCuentaAhorroAsociadoRow
            Get
                Return CType(Me.Rows(index),DatosCuentaAhorroAsociadoRow)
            End Get
        End Property
        
        Public Event DatosCuentaAhorroAsociadoRowChanged As DatosCuentaAhorroAsociadoRowChangeEventHandler
        
        Public Event DatosCuentaAhorroAsociadoRowChanging As DatosCuentaAhorroAsociadoRowChangeEventHandler
        
        Public Event DatosCuentaAhorroAsociadoRowDeleted As DatosCuentaAhorroAsociadoRowChangeEventHandler
        
        Public Event DatosCuentaAhorroAsociadoRowDeleting As DatosCuentaAhorroAsociadoRowChangeEventHandler
        
        Public Overloads Sub AddDatosCuentaAhorroAsociadoRow(ByVal row As DatosCuentaAhorroAsociadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDatosCuentaAhorroAsociadoRow(ByVal ttAportaciones As Double, ByVal ttDividendos As Double, ByVal ttCtaAhorroVista As Double, ByVal ttCtaAhorroRestringido As Double, ByVal TotalCtasAhorro As Double) As DatosCuentaAhorroAsociadoRow
            Dim rowDatosCuentaAhorroAsociadoRow As DatosCuentaAhorroAsociadoRow = CType(Me.NewRow,DatosCuentaAhorroAsociadoRow)
            rowDatosCuentaAhorroAsociadoRow.ItemArray = New Object() {ttAportaciones, ttDividendos, ttCtaAhorroVista, ttCtaAhorroRestringido, TotalCtasAhorro}
            Me.Rows.Add(rowDatosCuentaAhorroAsociadoRow)
            Return rowDatosCuentaAhorroAsociadoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DatosCuentaAhorroAsociadoDataTable = CType(MyBase.Clone,DatosCuentaAhorroAsociadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DatosCuentaAhorroAsociadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnttAportaciones = Me.Columns("ttAportaciones")
            Me.columnttDividendos = Me.Columns("ttDividendos")
            Me.columnttCtaAhorroVista = Me.Columns("ttCtaAhorroVista")
            Me.columnttCtaAhorroRestringido = Me.Columns("ttCtaAhorroRestringido")
            Me.columnTotalCtasAhorro = Me.Columns("TotalCtasAhorro")
        End Sub
        
        Private Sub InitClass()
            Me.columnttAportaciones = New DataColumn("ttAportaciones", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnttAportaciones)
            Me.columnttDividendos = New DataColumn("ttDividendos", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnttDividendos)
            Me.columnttCtaAhorroVista = New DataColumn("ttCtaAhorroVista", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnttCtaAhorroVista)
            Me.columnttCtaAhorroRestringido = New DataColumn("ttCtaAhorroRestringido", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnttCtaAhorroRestringido)
            Me.columnTotalCtasAhorro = New DataColumn("TotalCtasAhorro", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalCtasAhorro)
        End Sub
        
        Public Function NewDatosCuentaAhorroAsociadoRow() As DatosCuentaAhorroAsociadoRow
            Return CType(Me.NewRow,DatosCuentaAhorroAsociadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DatosCuentaAhorroAsociadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatosCuentaAhorroAsociadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosCuentaAhorroAsociadoRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosCuentaAhorroAsociadoRowChanged(Me, New DatosCuentaAhorroAsociadoRowChangeEvent(CType(e.Row,DatosCuentaAhorroAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosCuentaAhorroAsociadoRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosCuentaAhorroAsociadoRowChanging(Me, New DatosCuentaAhorroAsociadoRowChangeEvent(CType(e.Row,DatosCuentaAhorroAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosCuentaAhorroAsociadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosCuentaAhorroAsociadoRowDeleted(Me, New DatosCuentaAhorroAsociadoRowChangeEvent(CType(e.Row,DatosCuentaAhorroAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosCuentaAhorroAsociadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosCuentaAhorroAsociadoRowDeleting(Me, New DatosCuentaAhorroAsociadoRowChangeEvent(CType(e.Row,DatosCuentaAhorroAsociadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDatosCuentaAhorroAsociadoRow(ByVal row As DatosCuentaAhorroAsociadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosCuentaAhorroAsociadoRow
        Inherits DataRow
        
        Private tableDatosCuentaAhorroAsociado As DatosCuentaAhorroAsociadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosCuentaAhorroAsociado = CType(Me.Table,DatosCuentaAhorroAsociadoDataTable)
        End Sub
        
        Public Property ttAportaciones As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentaAhorroAsociado.ttAportacionesColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentaAhorroAsociado.ttAportacionesColumn) = value
            End Set
        End Property
        
        Public Property ttDividendos As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentaAhorroAsociado.ttDividendosColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentaAhorroAsociado.ttDividendosColumn) = value
            End Set
        End Property
        
        Public Property ttCtaAhorroVista As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentaAhorroAsociado.ttCtaAhorroVistaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentaAhorroAsociado.ttCtaAhorroVistaColumn) = value
            End Set
        End Property
        
        Public Property ttCtaAhorroRestringido As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentaAhorroAsociado.ttCtaAhorroRestringidoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentaAhorroAsociado.ttCtaAhorroRestringidoColumn) = value
            End Set
        End Property
        
        Public Property TotalCtasAhorro As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentaAhorroAsociado.TotalCtasAhorroColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentaAhorroAsociado.TotalCtasAhorroColumn) = value
            End Set
        End Property
        
        Public Function IsttAportacionesNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentaAhorroAsociado.ttAportacionesColumn)
        End Function
        
        Public Sub SetttAportacionesNull()
            Me(Me.tableDatosCuentaAhorroAsociado.ttAportacionesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsttDividendosNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentaAhorroAsociado.ttDividendosColumn)
        End Function
        
        Public Sub SetttDividendosNull()
            Me(Me.tableDatosCuentaAhorroAsociado.ttDividendosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsttCtaAhorroVistaNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentaAhorroAsociado.ttCtaAhorroVistaColumn)
        End Function
        
        Public Sub SetttCtaAhorroVistaNull()
            Me(Me.tableDatosCuentaAhorroAsociado.ttCtaAhorroVistaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsttCtaAhorroRestringidoNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentaAhorroAsociado.ttCtaAhorroRestringidoColumn)
        End Function
        
        Public Sub SetttCtaAhorroRestringidoNull()
            Me(Me.tableDatosCuentaAhorroAsociado.ttCtaAhorroRestringidoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalCtasAhorroNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentaAhorroAsociado.TotalCtasAhorroColumn)
        End Function
        
        Public Sub SetTotalCtasAhorroNull()
            Me(Me.tableDatosCuentaAhorroAsociado.TotalCtasAhorroColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosCuentaAhorroAsociadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DatosCuentaAhorroAsociadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DatosCuentaAhorroAsociadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DatosCuentaAhorroAsociadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosCuentasPrestamoAsociadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSaldo As DataColumn
        
        Private columnInteresesNormales As DataColumn
        
        Private columnInteresesMoratorios As DataColumn
        
        Private columnSeguroDeuda As DataColumn
        
        Private columnSeguroDanios As DataColumn
        
        Private columnCobroManejo As DataColumn
        
        Private columnOtros As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnCodPrestamo As DataColumn
        
        Friend Sub New()
            MyBase.New("DatosCuentasPrestamoAsociado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SaldoColumn As DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        Friend ReadOnly Property InteresesNormalesColumn As DataColumn
            Get
                Return Me.columnInteresesNormales
            End Get
        End Property
        
        Friend ReadOnly Property InteresesMoratoriosColumn As DataColumn
            Get
                Return Me.columnInteresesMoratorios
            End Get
        End Property
        
        Friend ReadOnly Property SeguroDeudaColumn As DataColumn
            Get
                Return Me.columnSeguroDeuda
            End Get
        End Property
        
        Friend ReadOnly Property SeguroDaniosColumn As DataColumn
            Get
                Return Me.columnSeguroDanios
            End Get
        End Property
        
        Friend ReadOnly Property CobroManejoColumn As DataColumn
            Get
                Return Me.columnCobroManejo
            End Get
        End Property
        
        Friend ReadOnly Property OtrosColumn As DataColumn
            Get
                Return Me.columnOtros
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property CodPrestamoColumn As DataColumn
            Get
                Return Me.columnCodPrestamo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosCuentasPrestamoAsociadoRow
            Get
                Return CType(Me.Rows(index),DatosCuentasPrestamoAsociadoRow)
            End Get
        End Property
        
        Public Event DatosCuentasPrestamoAsociadoRowChanged As DatosCuentasPrestamoAsociadoRowChangeEventHandler
        
        Public Event DatosCuentasPrestamoAsociadoRowChanging As DatosCuentasPrestamoAsociadoRowChangeEventHandler
        
        Public Event DatosCuentasPrestamoAsociadoRowDeleted As DatosCuentasPrestamoAsociadoRowChangeEventHandler
        
        Public Event DatosCuentasPrestamoAsociadoRowDeleting As DatosCuentasPrestamoAsociadoRowChangeEventHandler
        
        Public Overloads Sub AddDatosCuentasPrestamoAsociadoRow(ByVal row As DatosCuentasPrestamoAsociadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDatosCuentasPrestamoAsociadoRow(ByVal Saldo As Double, ByVal InteresesNormales As Double, ByVal InteresesMoratorios As Double, ByVal SeguroDeuda As Double, ByVal SeguroDanios As Double, ByVal CobroManejo As Double, ByVal Otros As Double, ByVal Total As Double, ByVal CodPrestamo As String) As DatosCuentasPrestamoAsociadoRow
            Dim rowDatosCuentasPrestamoAsociadoRow As DatosCuentasPrestamoAsociadoRow = CType(Me.NewRow,DatosCuentasPrestamoAsociadoRow)
            rowDatosCuentasPrestamoAsociadoRow.ItemArray = New Object() {Saldo, InteresesNormales, InteresesMoratorios, SeguroDeuda, SeguroDanios, CobroManejo, Otros, Total, CodPrestamo}
            Me.Rows.Add(rowDatosCuentasPrestamoAsociadoRow)
            Return rowDatosCuentasPrestamoAsociadoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DatosCuentasPrestamoAsociadoDataTable = CType(MyBase.Clone,DatosCuentasPrestamoAsociadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DatosCuentasPrestamoAsociadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSaldo = Me.Columns("Saldo")
            Me.columnInteresesNormales = Me.Columns("InteresesNormales")
            Me.columnInteresesMoratorios = Me.Columns("InteresesMoratorios")
            Me.columnSeguroDeuda = Me.Columns("SeguroDeuda")
            Me.columnSeguroDanios = Me.Columns("SeguroDanios")
            Me.columnCobroManejo = Me.Columns("CobroManejo")
            Me.columnOtros = Me.Columns("Otros")
            Me.columnTotal = Me.Columns("Total")
            Me.columnCodPrestamo = Me.Columns("CodPrestamo")
        End Sub
        
        Private Sub InitClass()
            Me.columnSaldo = New DataColumn("Saldo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo)
            Me.columnInteresesNormales = New DataColumn("InteresesNormales", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInteresesNormales)
            Me.columnInteresesMoratorios = New DataColumn("InteresesMoratorios", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInteresesMoratorios)
            Me.columnSeguroDeuda = New DataColumn("SeguroDeuda", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSeguroDeuda)
            Me.columnSeguroDanios = New DataColumn("SeguroDanios", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSeguroDanios)
            Me.columnCobroManejo = New DataColumn("CobroManejo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCobroManejo)
            Me.columnOtros = New DataColumn("Otros", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtros)
            Me.columnTotal = New DataColumn("Total", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnCodPrestamo = New DataColumn("CodPrestamo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodPrestamo)
        End Sub
        
        Public Function NewDatosCuentasPrestamoAsociadoRow() As DatosCuentasPrestamoAsociadoRow
            Return CType(Me.NewRow,DatosCuentasPrestamoAsociadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DatosCuentasPrestamoAsociadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatosCuentasPrestamoAsociadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosCuentasPrestamoAsociadoRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosCuentasPrestamoAsociadoRowChanged(Me, New DatosCuentasPrestamoAsociadoRowChangeEvent(CType(e.Row,DatosCuentasPrestamoAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosCuentasPrestamoAsociadoRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosCuentasPrestamoAsociadoRowChanging(Me, New DatosCuentasPrestamoAsociadoRowChangeEvent(CType(e.Row,DatosCuentasPrestamoAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosCuentasPrestamoAsociadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosCuentasPrestamoAsociadoRowDeleted(Me, New DatosCuentasPrestamoAsociadoRowChangeEvent(CType(e.Row,DatosCuentasPrestamoAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosCuentasPrestamoAsociadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosCuentasPrestamoAsociadoRowDeleting(Me, New DatosCuentasPrestamoAsociadoRowChangeEvent(CType(e.Row,DatosCuentasPrestamoAsociadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDatosCuentasPrestamoAsociadoRow(ByVal row As DatosCuentasPrestamoAsociadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosCuentasPrestamoAsociadoRow
        Inherits DataRow
        
        Private tableDatosCuentasPrestamoAsociado As DatosCuentasPrestamoAsociadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosCuentasPrestamoAsociado = CType(Me.Table,DatosCuentasPrestamoAsociadoDataTable)
        End Sub
        
        Public Property Saldo As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentasPrestamoAsociado.SaldoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentasPrestamoAsociado.SaldoColumn) = value
            End Set
        End Property
        
        Public Property InteresesNormales As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentasPrestamoAsociado.InteresesNormalesColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentasPrestamoAsociado.InteresesNormalesColumn) = value
            End Set
        End Property
        
        Public Property InteresesMoratorios As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentasPrestamoAsociado.InteresesMoratoriosColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentasPrestamoAsociado.InteresesMoratoriosColumn) = value
            End Set
        End Property
        
        Public Property SeguroDeuda As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentasPrestamoAsociado.SeguroDeudaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentasPrestamoAsociado.SeguroDeudaColumn) = value
            End Set
        End Property
        
        Public Property SeguroDanios As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentasPrestamoAsociado.SeguroDaniosColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentasPrestamoAsociado.SeguroDaniosColumn) = value
            End Set
        End Property
        
        Public Property CobroManejo As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentasPrestamoAsociado.CobroManejoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentasPrestamoAsociado.CobroManejoColumn) = value
            End Set
        End Property
        
        Public Property Otros As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentasPrestamoAsociado.OtrosColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentasPrestamoAsociado.OtrosColumn) = value
            End Set
        End Property
        
        Public Property Total As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentasPrestamoAsociado.TotalColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentasPrestamoAsociado.TotalColumn) = value
            End Set
        End Property
        
        Public Property CodPrestamo As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosCuentasPrestamoAsociado.CodPrestamoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosCuentasPrestamoAsociado.CodPrestamoColumn) = value
            End Set
        End Property
        
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentasPrestamoAsociado.SaldoColumn)
        End Function
        
        Public Sub SetSaldoNull()
            Me(Me.tableDatosCuentasPrestamoAsociado.SaldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInteresesNormalesNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentasPrestamoAsociado.InteresesNormalesColumn)
        End Function
        
        Public Sub SetInteresesNormalesNull()
            Me(Me.tableDatosCuentasPrestamoAsociado.InteresesNormalesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInteresesMoratoriosNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentasPrestamoAsociado.InteresesMoratoriosColumn)
        End Function
        
        Public Sub SetInteresesMoratoriosNull()
            Me(Me.tableDatosCuentasPrestamoAsociado.InteresesMoratoriosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSeguroDeudaNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentasPrestamoAsociado.SeguroDeudaColumn)
        End Function
        
        Public Sub SetSeguroDeudaNull()
            Me(Me.tableDatosCuentasPrestamoAsociado.SeguroDeudaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSeguroDaniosNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentasPrestamoAsociado.SeguroDaniosColumn)
        End Function
        
        Public Sub SetSeguroDaniosNull()
            Me(Me.tableDatosCuentasPrestamoAsociado.SeguroDaniosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCobroManejoNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentasPrestamoAsociado.CobroManejoColumn)
        End Function
        
        Public Sub SetCobroManejoNull()
            Me(Me.tableDatosCuentasPrestamoAsociado.CobroManejoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtrosNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentasPrestamoAsociado.OtrosColumn)
        End Function
        
        Public Sub SetOtrosNull()
            Me(Me.tableDatosCuentasPrestamoAsociado.OtrosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentasPrestamoAsociado.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableDatosCuentasPrestamoAsociado.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodPrestamoNull() As Boolean
            Return Me.IsNull(Me.tableDatosCuentasPrestamoAsociado.CodPrestamoColumn)
        End Function
        
        Public Sub SetCodPrestamoNull()
            Me(Me.tableDatosCuentasPrestamoAsociado.CodPrestamoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosCuentasPrestamoAsociadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DatosCuentasPrestamoAsociadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DatosCuentasPrestamoAsociadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DatosCuentasPrestamoAsociadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
