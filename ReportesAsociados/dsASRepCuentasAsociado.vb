'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsASRepCuentasAsociado
    Inherits DataSet
    
    Private tableDatosConsolidados As DatosConsolidadosDataTable
    
    Private tableReporte As ReporteDataTable
    
    Private tableDatosAsociado As DatosAsociadoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DatosConsolidados")) Is Nothing) Then
                Me.Tables.Add(New DatosConsolidadosDataTable(ds.Tables("DatosConsolidados")))
            End If
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            If (Not (ds.Tables("DatosAsociado")) Is Nothing) Then
                Me.Tables.Add(New DatosAsociadoDataTable(ds.Tables("DatosAsociado")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosConsolidados As DatosConsolidadosDataTable
        Get
            Return Me.tableDatosConsolidados
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte As ReporteDataTable
        Get
            Return Me.tableReporte
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosAsociado As DatosAsociadoDataTable
        Get
            Return Me.tableDatosAsociado
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsASRepCuentasAsociado = CType(MyBase.Clone,dsASRepCuentasAsociado)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DatosConsolidados")) Is Nothing) Then
            Me.Tables.Add(New DatosConsolidadosDataTable(ds.Tables("DatosConsolidados")))
        End If
        If (Not (ds.Tables("Reporte")) Is Nothing) Then
            Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
        End If
        If (Not (ds.Tables("DatosAsociado")) Is Nothing) Then
            Me.Tables.Add(New DatosAsociadoDataTable(ds.Tables("DatosAsociado")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDatosConsolidados = CType(Me.Tables("DatosConsolidados"),DatosConsolidadosDataTable)
        If (Not (Me.tableDatosConsolidados) Is Nothing) Then
            Me.tableDatosConsolidados.InitVars
        End If
        Me.tableReporte = CType(Me.Tables("Reporte"),ReporteDataTable)
        If (Not (Me.tableReporte) Is Nothing) Then
            Me.tableReporte.InitVars
        End If
        Me.tableDatosAsociado = CType(Me.Tables("DatosAsociado"),DatosAsociadoDataTable)
        If (Not (Me.tableDatosAsociado) Is Nothing) Then
            Me.tableDatosAsociado.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsASRepCuentasAsociado"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsASRepCuentasAsociado.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDatosConsolidados = New DatosConsolidadosDataTable
        Me.Tables.Add(Me.tableDatosConsolidados)
        Me.tableReporte = New ReporteDataTable
        Me.Tables.Add(Me.tableReporte)
        Me.tableDatosAsociado = New DatosAsociadoDataTable
        Me.Tables.Add(Me.tableDatosAsociado)
    End Sub
    
    Private Function ShouldSerializeDatosConsolidados() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeReporte() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDatosAsociado() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DatosConsolidadosRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosConsolidadosRowChangeEvent)
    
    Public Delegate Sub ReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As ReporteRowChangeEvent)
    
    Public Delegate Sub DatosAsociadoRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosAsociadoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosConsolidadosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDUI As DataColumn
        
        Private columnCodTipo As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnCuenta As DataColumn
        
        Private columnFechaApertura As DataColumn
        
        Private columnFechaVencimiento As DataColumn
        
        Private columnFechaUltimoMov As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnSaldo As DataColumn
        
        Private columnCuota As DataColumn
        
        Friend Sub New()
            MyBase.New("DatosConsolidados")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DUIColumn As DataColumn
            Get
                Return Me.columnDUI
            End Get
        End Property
        
        Friend ReadOnly Property CodTipoColumn As DataColumn
            Get
                Return Me.columnCodTipo
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property FechaAperturaColumn As DataColumn
            Get
                Return Me.columnFechaApertura
            End Get
        End Property
        
        Friend ReadOnly Property FechaVencimientoColumn As DataColumn
            Get
                Return Me.columnFechaVencimiento
            End Get
        End Property
        
        Friend ReadOnly Property FechaUltimoMovColumn As DataColumn
            Get
                Return Me.columnFechaUltimoMov
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property SaldoColumn As DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        Friend ReadOnly Property CuotaColumn As DataColumn
            Get
                Return Me.columnCuota
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosConsolidadosRow
            Get
                Return CType(Me.Rows(index),DatosConsolidadosRow)
            End Get
        End Property
        
        Public Event DatosConsolidadosRowChanged As DatosConsolidadosRowChangeEventHandler
        
        Public Event DatosConsolidadosRowChanging As DatosConsolidadosRowChangeEventHandler
        
        Public Event DatosConsolidadosRowDeleted As DatosConsolidadosRowChangeEventHandler
        
        Public Event DatosConsolidadosRowDeleting As DatosConsolidadosRowChangeEventHandler
        
        Public Overloads Sub AddDatosConsolidadosRow(ByVal row As DatosConsolidadosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDatosConsolidadosRow(ByVal CodTipo As String, ByVal Tipo As String, ByVal Cuenta As String, ByVal FechaApertura As Date, ByVal FechaVencimiento As Date, ByVal FechaUltimoMov As String, ByVal Monto As Decimal, ByVal Saldo As Decimal, ByVal Cuota As Decimal) As DatosConsolidadosRow
            Dim rowDatosConsolidadosRow As DatosConsolidadosRow = CType(Me.NewRow,DatosConsolidadosRow)
            rowDatosConsolidadosRow.ItemArray = New Object() {Nothing, CodTipo, Tipo, Cuenta, FechaApertura, FechaVencimiento, FechaUltimoMov, Monto, Saldo, Cuota}
            Me.Rows.Add(rowDatosConsolidadosRow)
            Return rowDatosConsolidadosRow
        End Function
        
        Public Function FindByDUICuenta(ByVal DUI As Integer, ByVal Cuenta As String) As DatosConsolidadosRow
            Return CType(Me.Rows.Find(New Object() {DUI, Cuenta}),DatosConsolidadosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DatosConsolidadosDataTable = CType(MyBase.Clone,DatosConsolidadosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DatosConsolidadosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDUI = Me.Columns("DUI")
            Me.columnCodTipo = Me.Columns("CodTipo")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnFechaApertura = Me.Columns("FechaApertura")
            Me.columnFechaVencimiento = Me.Columns("FechaVencimiento")
            Me.columnFechaUltimoMov = Me.Columns("FechaUltimoMov")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnSaldo = Me.Columns("Saldo")
            Me.columnCuota = Me.Columns("Cuota")
        End Sub
        
        Private Sub InitClass()
            Me.columnDUI = New DataColumn("DUI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDUI)
            Me.columnCodTipo = New DataColumn("CodTipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodTipo)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnFechaApertura = New DataColumn("FechaApertura", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaApertura)
            Me.columnFechaVencimiento = New DataColumn("FechaVencimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaVencimiento)
            Me.columnFechaUltimoMov = New DataColumn("FechaUltimoMov", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaUltimoMov)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnSaldo = New DataColumn("Saldo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo)
            Me.columnCuota = New DataColumn("Cuota", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuota)
            Me.Constraints.Add(New UniqueConstraint("dsASRepCuentasAsociadoKey1", New DataColumn() {Me.columnDUI, Me.columnCuenta}, true))
            Me.columnDUI.AutoIncrement = true
            Me.columnDUI.AllowDBNull = false
            Me.columnDUI.ReadOnly = true
            Me.columnCodTipo.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnCuenta.AllowDBNull = false
        End Sub
        
        Public Function NewDatosConsolidadosRow() As DatosConsolidadosRow
            Return CType(Me.NewRow,DatosConsolidadosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DatosConsolidadosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatosConsolidadosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosConsolidadosRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosConsolidadosRowChanged(Me, New DatosConsolidadosRowChangeEvent(CType(e.Row,DatosConsolidadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosConsolidadosRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosConsolidadosRowChanging(Me, New DatosConsolidadosRowChangeEvent(CType(e.Row,DatosConsolidadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosConsolidadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosConsolidadosRowDeleted(Me, New DatosConsolidadosRowChangeEvent(CType(e.Row,DatosConsolidadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosConsolidadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosConsolidadosRowDeleting(Me, New DatosConsolidadosRowChangeEvent(CType(e.Row,DatosConsolidadosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDatosConsolidadosRow(ByVal row As DatosConsolidadosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosConsolidadosRow
        Inherits DataRow
        
        Private tableDatosConsolidados As DatosConsolidadosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosConsolidados = CType(Me.Table,DatosConsolidadosDataTable)
        End Sub
        
        Public Property DUI As Integer
            Get
                Return CType(Me(Me.tableDatosConsolidados.DUIColumn),Integer)
            End Get
            Set
                Me(Me.tableDatosConsolidados.DUIColumn) = value
            End Set
        End Property
        
        Public Property CodTipo As String
            Get
                Return CType(Me(Me.tableDatosConsolidados.CodTipoColumn),String)
            End Get
            Set
                Me(Me.tableDatosConsolidados.CodTipoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableDatosConsolidados.TipoColumn),String)
            End Get
            Set
                Me(Me.tableDatosConsolidados.TipoColumn) = value
            End Set
        End Property
        
        Public Property Cuenta As String
            Get
                Return CType(Me(Me.tableDatosConsolidados.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableDatosConsolidados.CuentaColumn) = value
            End Set
        End Property
        
        Public Property FechaApertura As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosConsolidados.FechaAperturaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosConsolidados.FechaAperturaColumn) = value
            End Set
        End Property
        
        Public Property FechaVencimiento As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosConsolidados.FechaVencimientoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosConsolidados.FechaVencimientoColumn) = value
            End Set
        End Property
        
        Public Property FechaUltimoMov As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosConsolidados.FechaUltimoMovColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosConsolidados.FechaUltimoMovColumn) = value
            End Set
        End Property
        
        Public Property Monto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosConsolidados.MontoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosConsolidados.MontoColumn) = value
            End Set
        End Property
        
        Public Property Saldo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosConsolidados.SaldoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosConsolidados.SaldoColumn) = value
            End Set
        End Property
        
        Public Property Cuota As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosConsolidados.CuotaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosConsolidados.CuotaColumn) = value
            End Set
        End Property
        
        Public Function IsFechaAperturaNull() As Boolean
            Return Me.IsNull(Me.tableDatosConsolidados.FechaAperturaColumn)
        End Function
        
        Public Sub SetFechaAperturaNull()
            Me(Me.tableDatosConsolidados.FechaAperturaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaVencimientoNull() As Boolean
            Return Me.IsNull(Me.tableDatosConsolidados.FechaVencimientoColumn)
        End Function
        
        Public Sub SetFechaVencimientoNull()
            Me(Me.tableDatosConsolidados.FechaVencimientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaUltimoMovNull() As Boolean
            Return Me.IsNull(Me.tableDatosConsolidados.FechaUltimoMovColumn)
        End Function
        
        Public Sub SetFechaUltimoMovNull()
            Me(Me.tableDatosConsolidados.FechaUltimoMovColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableDatosConsolidados.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tableDatosConsolidados.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableDatosConsolidados.SaldoColumn)
        End Function
        
        Public Sub SetSaldoNull()
            Me(Me.tableDatosConsolidados.SaldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuotaNull() As Boolean
            Return Me.IsNull(Me.tableDatosConsolidados.CuotaColumn)
        End Function
        
        Public Sub SetCuotaNull()
            Me(Me.tableDatosConsolidados.CuotaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosConsolidadosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DatosConsolidadosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DatosConsolidadosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DatosConsolidadosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFecha As DataColumn
        
        Private columnEmpresa As DataColumn
        
        Private columnTitulo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnSucursal As DataColumn
        
        Friend Sub New()
            MyBase.New("Reporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property TituloColumn As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property SucursalColumn As DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReporteRow
            Get
                Return CType(Me.Rows(index),ReporteRow)
            End Get
        End Property
        
        Public Event ReporteRowChanged As ReporteRowChangeEventHandler
        
        Public Event ReporteRowChanging As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleted As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleting As ReporteRowChangeEventHandler
        
        Public Overloads Sub AddReporteRow(ByVal row As ReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReporteRow(ByVal Fecha As Date, ByVal Empresa As String, ByVal Titulo As String, ByVal Descripcion As String, ByVal Sucursal As String) As ReporteRow
            Dim rowReporteRow As ReporteRow = CType(Me.NewRow,ReporteRow)
            rowReporteRow.ItemArray = New Object() {Fecha, Empresa, Titulo, Descripcion, Sucursal}
            Me.Rows.Add(rowReporteRow)
            Return rowReporteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReporteDataTable = CType(MyBase.Clone,ReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnTitulo = Me.Columns("Titulo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnSucursal = Me.Columns("Sucursal")
        End Sub
        
        Private Sub InitClass()
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnTitulo = New DataColumn("Titulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitulo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnSucursal = New DataColumn("Sucursal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSucursal)
        End Sub
        
        Public Function NewReporteRow() As ReporteRow
            Return CType(Me.NewRow,ReporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanged(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanging(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleted(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleting(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReporteRow(ByVal row As ReporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRow
        Inherits DataRow
        
        Private tableReporte As ReporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte = CType(Me.Table,ReporteDataTable)
        End Sub
        
        Public Property Fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tableReporte.FechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.FechaColumn) = value
            End Set
        End Property
        
        Public Property Empresa As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.EmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Titulo As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TituloColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Sucursal As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.SucursalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.SucursalColumn) = value
            End Set
        End Property
        
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.FechaColumn)
        End Function
        
        Public Sub SetFechaNull()
            Me(Me.tableReporte.FechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.EmpresaColumn)
        End Function
        
        Public Sub SetEmpresaNull()
            Me(Me.tableReporte.EmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TituloColumn)
        End Function
        
        Public Sub SetTituloNull()
            Me(Me.tableReporte.TituloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableReporte.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.SucursalColumn)
        End Function
        
        Public Sub SetSucursalNull()
            Me(Me.tableReporte.SucursalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosAsociadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDUI As DataColumn
        
        Private columnNoSocio As DataColumn
        
        Private columnCodAntiguo As DataColumn
        
        Private columnApellido1 As DataColumn
        
        Private columnApellido2 As DataColumn
        
        Private columnApellidoCas As DataColumn
        
        Private columnNombres As DataColumn
        
        Private columnDireccion As DataColumn
        
        Friend Sub New()
            MyBase.New("DatosAsociado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DUIColumn As DataColumn
            Get
                Return Me.columnDUI
            End Get
        End Property
        
        Friend ReadOnly Property NoSocioColumn As DataColumn
            Get
                Return Me.columnNoSocio
            End Get
        End Property
        
        Friend ReadOnly Property CodAntiguoColumn As DataColumn
            Get
                Return Me.columnCodAntiguo
            End Get
        End Property
        
        Friend ReadOnly Property Apellido1Column As DataColumn
            Get
                Return Me.columnApellido1
            End Get
        End Property
        
        Friend ReadOnly Property Apellido2Column As DataColumn
            Get
                Return Me.columnApellido2
            End Get
        End Property
        
        Friend ReadOnly Property ApellidoCasColumn As DataColumn
            Get
                Return Me.columnApellidoCas
            End Get
        End Property
        
        Friend ReadOnly Property NombresColumn As DataColumn
            Get
                Return Me.columnNombres
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosAsociadoRow
            Get
                Return CType(Me.Rows(index),DatosAsociadoRow)
            End Get
        End Property
        
        Public Event DatosAsociadoRowChanged As DatosAsociadoRowChangeEventHandler
        
        Public Event DatosAsociadoRowChanging As DatosAsociadoRowChangeEventHandler
        
        Public Event DatosAsociadoRowDeleted As DatosAsociadoRowChangeEventHandler
        
        Public Event DatosAsociadoRowDeleting As DatosAsociadoRowChangeEventHandler
        
        Public Overloads Sub AddDatosAsociadoRow(ByVal row As DatosAsociadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDatosAsociadoRow(ByVal DUI As String, ByVal NoSocio As String, ByVal CodAntiguo As String, ByVal Apellido1 As String, ByVal Apellido2 As String, ByVal ApellidoCas As String, ByVal Nombres As String, ByVal Direccion As String) As DatosAsociadoRow
            Dim rowDatosAsociadoRow As DatosAsociadoRow = CType(Me.NewRow,DatosAsociadoRow)
            rowDatosAsociadoRow.ItemArray = New Object() {DUI, NoSocio, CodAntiguo, Apellido1, Apellido2, ApellidoCas, Nombres, Direccion}
            Me.Rows.Add(rowDatosAsociadoRow)
            Return rowDatosAsociadoRow
        End Function
        
        Public Function FindByDUI(ByVal DUI As String) As DatosAsociadoRow
            Return CType(Me.Rows.Find(New Object() {DUI}),DatosAsociadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DatosAsociadoDataTable = CType(MyBase.Clone,DatosAsociadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DatosAsociadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDUI = Me.Columns("DUI")
            Me.columnNoSocio = Me.Columns("NoSocio")
            Me.columnCodAntiguo = Me.Columns("CodAntiguo")
            Me.columnApellido1 = Me.Columns("Apellido1")
            Me.columnApellido2 = Me.Columns("Apellido2")
            Me.columnApellidoCas = Me.Columns("ApellidoCas")
            Me.columnNombres = Me.Columns("Nombres")
            Me.columnDireccion = Me.Columns("Direccion")
        End Sub
        
        Private Sub InitClass()
            Me.columnDUI = New DataColumn("DUI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDUI)
            Me.columnNoSocio = New DataColumn("NoSocio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoSocio)
            Me.columnCodAntiguo = New DataColumn("CodAntiguo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodAntiguo)
            Me.columnApellido1 = New DataColumn("Apellido1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido1)
            Me.columnApellido2 = New DataColumn("Apellido2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido2)
            Me.columnApellidoCas = New DataColumn("ApellidoCas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellidoCas)
            Me.columnNombres = New DataColumn("Nombres", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombres)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.Constraints.Add(New UniqueConstraint("dsASRepCuentasAsociadoKey2", New DataColumn() {Me.columnDUI}, true))
            Me.columnDUI.AllowDBNull = false
            Me.columnDUI.Unique = true
            Me.columnNoSocio.AllowDBNull = false
            Me.columnApellido1.AllowDBNull = false
            Me.columnNombres.AllowDBNull = false
        End Sub
        
        Public Function NewDatosAsociadoRow() As DatosAsociadoRow
            Return CType(Me.NewRow,DatosAsociadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DatosAsociadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatosAsociadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosAsociadoRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosAsociadoRowChanged(Me, New DatosAsociadoRowChangeEvent(CType(e.Row,DatosAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosAsociadoRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosAsociadoRowChanging(Me, New DatosAsociadoRowChangeEvent(CType(e.Row,DatosAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosAsociadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosAsociadoRowDeleted(Me, New DatosAsociadoRowChangeEvent(CType(e.Row,DatosAsociadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosAsociadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosAsociadoRowDeleting(Me, New DatosAsociadoRowChangeEvent(CType(e.Row,DatosAsociadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDatosAsociadoRow(ByVal row As DatosAsociadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosAsociadoRow
        Inherits DataRow
        
        Private tableDatosAsociado As DatosAsociadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosAsociado = CType(Me.Table,DatosAsociadoDataTable)
        End Sub
        
        Public Property DUI As String
            Get
                Return CType(Me(Me.tableDatosAsociado.DUIColumn),String)
            End Get
            Set
                Me(Me.tableDatosAsociado.DUIColumn) = value
            End Set
        End Property
        
        Public Property NoSocio As String
            Get
                Return CType(Me(Me.tableDatosAsociado.NoSocioColumn),String)
            End Get
            Set
                Me(Me.tableDatosAsociado.NoSocioColumn) = value
            End Set
        End Property
        
        Public Property CodAntiguo As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAsociado.CodAntiguoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAsociado.CodAntiguoColumn) = value
            End Set
        End Property
        
        Public Property Apellido1 As String
            Get
                Return CType(Me(Me.tableDatosAsociado.Apellido1Column),String)
            End Get
            Set
                Me(Me.tableDatosAsociado.Apellido1Column) = value
            End Set
        End Property
        
        Public Property Apellido2 As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAsociado.Apellido2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAsociado.Apellido2Column) = value
            End Set
        End Property
        
        Public Property ApellidoCas As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAsociado.ApellidoCasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAsociado.ApellidoCasColumn) = value
            End Set
        End Property
        
        Public Property Nombres As String
            Get
                Return CType(Me(Me.tableDatosAsociado.NombresColumn),String)
            End Get
            Set
                Me(Me.tableDatosAsociado.NombresColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAsociado.DireccionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAsociado.DireccionColumn) = value
            End Set
        End Property
        
        Public Function IsCodAntiguoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAsociado.CodAntiguoColumn)
        End Function
        
        Public Sub SetCodAntiguoNull()
            Me(Me.tableDatosAsociado.CodAntiguoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellido2Null() As Boolean
            Return Me.IsNull(Me.tableDatosAsociado.Apellido2Column)
        End Function
        
        Public Sub SetApellido2Null()
            Me(Me.tableDatosAsociado.Apellido2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellidoCasNull() As Boolean
            Return Me.IsNull(Me.tableDatosAsociado.ApellidoCasColumn)
        End Function
        
        Public Sub SetApellidoCasNull()
            Me(Me.tableDatosAsociado.ApellidoCasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableDatosAsociado.DireccionColumn)
        End Function
        
        Public Sub SetDireccionNull()
            Me(Me.tableDatosAsociado.DireccionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosAsociadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DatosAsociadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DatosAsociadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DatosAsociadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
