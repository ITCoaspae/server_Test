'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4963
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsVencimientos_DPF_Proyectados"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsVencimientos_DPF_Proyectados
    Inherits Global.System.Data.DataSet
    
    Private tableDatos As DatosDataTable
    
    Private tableReporte As ReporteDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Datos")) Is Nothing) Then
                MyBase.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
            End If
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                MyBase.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Datos() As DatosDataTable
        Get
            Return Me.tableDatos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte() As ReporteDataTable
        Get
            Return Me.tableReporte
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsVencimientos_DPF_Proyectados = CType(MyBase.Clone,dsVencimientos_DPF_Proyectados)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Datos")) Is Nothing) Then
                MyBase.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
            End If
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                MyBase.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDatos = CType(MyBase.Tables("Datos"),DatosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatos) Is Nothing) Then
                Me.tableDatos.InitVars
            End If
        End If
        Me.tableReporte = CType(MyBase.Tables("Reporte"),ReporteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReporte) Is Nothing) Then
                Me.tableReporte.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsVencimientos_DPF_Proyectados"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsVencimientos_DPF_Proyectados.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDatos = New DatosDataTable
        MyBase.Tables.Add(Me.tableDatos)
        Me.tableReporte = New ReporteDataTable
        MyBase.Tables.Add(Me.tableReporte)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReporte() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsVencimientos_DPF_Proyectados = New dsVencimientos_DPF_Proyectados
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DatosRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosRowChangeEvent)
    
    Public Delegate Sub ReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As ReporteRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodTipoAhorro As Global.System.Data.DataColumn
        
        Private columnTipoAhorro As Global.System.Data.DataColumn
        
        Private columnNoCuenta As Global.System.Data.DataColumn
        
        Private columnNoSocio As Global.System.Data.DataColumn
        
        Private columnDui As Global.System.Data.DataColumn
        
        Private columnNombres As Global.System.Data.DataColumn
        
        Private columnNoCertificado As Global.System.Data.DataColumn
        
        Private columnFormaAsentaInt As Global.System.Data.DataColumn
        
        Private columnDiasPagados As Global.System.Data.DataColumn
        
        Private columnPlazo As Global.System.Data.DataColumn
        
        Private columnSaldo As Global.System.Data.DataColumn
        
        Private columnTasaInteres As Global.System.Data.DataColumn
        
        Private columnIntereses As Global.System.Data.DataColumn
        
        Private columnInteresPendiente As Global.System.Data.DataColumn
        
        Private columnFechaApertura As Global.System.Data.DataColumn
        
        Private columnFechaUltMov As Global.System.Data.DataColumn
        
        Private columnTotalInteres As Global.System.Data.DataColumn
        
        Private columnFechaVenc As Global.System.Data.DataColumn
        
        Private columnDiasProvisionados As Global.System.Data.DataColumn
        
        Private columnNoCuentaVista As Global.System.Data.DataColumn
        
        Private columnTelCasa As Global.System.Data.DataColumn
        
        Private columnTelOficina As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Datos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoAhorroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTipoAhorro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoAhorroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoAhorro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoSocioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoSocio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDui
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormaAsentaIntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormaAsentaInt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasPagadosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasPagados
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TasaInteresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasaInteres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InteresesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntereses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InteresPendienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInteresPendiente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAperturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaApertura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaUltMovColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaUltMov
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalInteresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalInteres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaVencColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaVenc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasProvisionadosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasProvisionados
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoCuentaVistaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoCuentaVista
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelCasaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelCasa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelOficinaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelOficina
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosRow
            Get
                Return CType(Me.Rows(index),DatosRow)
            End Get
        End Property
        
        Public Event DatosRowChanging As DatosRowChangeEventHandler
        
        Public Event DatosRowChanged As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleting As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleted As DatosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatosRow(ByVal row As DatosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatosRow( _
                    ByVal CodTipoAhorro As String,  _
                    ByVal TipoAhorro As String,  _
                    ByVal NoCuenta As String,  _
                    ByVal NoSocio As String,  _
                    ByVal Dui As String,  _
                    ByVal Nombres As String,  _
                    ByVal NoCertificado As String,  _
                    ByVal FormaAsentaInt As String,  _
                    ByVal DiasPagados As Integer,  _
                    ByVal Plazo As Integer,  _
                    ByVal Saldo As Decimal,  _
                    ByVal TasaInteres As Decimal,  _
                    ByVal Intereses As Decimal,  _
                    ByVal InteresPendiente As Decimal,  _
                    ByVal FechaApertura As Date,  _
                    ByVal FechaUltMov As Date,  _
                    ByVal TotalInteres As Decimal,  _
                    ByVal FechaVenc As Date,  _
                    ByVal DiasProvisionados As Integer,  _
                    ByVal NoCuentaVista As String,  _
                    ByVal TelCasa As String,  _
                    ByVal TelOficina As String) As DatosRow
            Dim rowDatosRow As DatosRow = CType(Me.NewRow,DatosRow)
            Dim columnValuesArray() As Object = New Object() {CodTipoAhorro, TipoAhorro, NoCuenta, NoSocio, Dui, Nombres, NoCertificado, FormaAsentaInt, DiasPagados, Plazo, Saldo, TasaInteres, Intereses, InteresPendiente, FechaApertura, FechaUltMov, TotalInteres, FechaVenc, DiasProvisionados, NoCuentaVista, TelCasa, TelOficina}
            rowDatosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatosRow)
            Return rowDatosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatosDataTable = CType(MyBase.Clone,DatosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodTipoAhorro = MyBase.Columns("CodTipoAhorro")
            Me.columnTipoAhorro = MyBase.Columns("TipoAhorro")
            Me.columnNoCuenta = MyBase.Columns("NoCuenta")
            Me.columnNoSocio = MyBase.Columns("NoSocio")
            Me.columnDui = MyBase.Columns("Dui")
            Me.columnNombres = MyBase.Columns("Nombres")
            Me.columnNoCertificado = MyBase.Columns("NoCertificado")
            Me.columnFormaAsentaInt = MyBase.Columns("FormaAsentaInt")
            Me.columnDiasPagados = MyBase.Columns("DiasPagados")
            Me.columnPlazo = MyBase.Columns("Plazo")
            Me.columnSaldo = MyBase.Columns("Saldo")
            Me.columnTasaInteres = MyBase.Columns("TasaInteres")
            Me.columnIntereses = MyBase.Columns("Intereses")
            Me.columnInteresPendiente = MyBase.Columns("InteresPendiente")
            Me.columnFechaApertura = MyBase.Columns("FechaApertura")
            Me.columnFechaUltMov = MyBase.Columns("FechaUltMov")
            Me.columnTotalInteres = MyBase.Columns("TotalInteres")
            Me.columnFechaVenc = MyBase.Columns("FechaVenc")
            Me.columnDiasProvisionados = MyBase.Columns("DiasProvisionados")
            Me.columnNoCuentaVista = MyBase.Columns("NoCuentaVista")
            Me.columnTelCasa = MyBase.Columns("TelCasa")
            Me.columnTelOficina = MyBase.Columns("TelOficina")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodTipoAhorro = New Global.System.Data.DataColumn("CodTipoAhorro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoAhorro)
            Me.columnTipoAhorro = New Global.System.Data.DataColumn("TipoAhorro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoAhorro)
            Me.columnNoCuenta = New Global.System.Data.DataColumn("NoCuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoCuenta)
            Me.columnNoSocio = New Global.System.Data.DataColumn("NoSocio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoSocio)
            Me.columnDui = New Global.System.Data.DataColumn("Dui", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDui)
            Me.columnNombres = New Global.System.Data.DataColumn("Nombres", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombres)
            Me.columnNoCertificado = New Global.System.Data.DataColumn("NoCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoCertificado)
            Me.columnFormaAsentaInt = New Global.System.Data.DataColumn("FormaAsentaInt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormaAsentaInt)
            Me.columnDiasPagados = New Global.System.Data.DataColumn("DiasPagados", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasPagados)
            Me.columnPlazo = New Global.System.Data.DataColumn("Plazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlazo)
            Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.columnTasaInteres = New Global.System.Data.DataColumn("TasaInteres", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasaInteres)
            Me.columnIntereses = New Global.System.Data.DataColumn("Intereses", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntereses)
            Me.columnInteresPendiente = New Global.System.Data.DataColumn("InteresPendiente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInteresPendiente)
            Me.columnFechaApertura = New Global.System.Data.DataColumn("FechaApertura", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaApertura)
            Me.columnFechaUltMov = New Global.System.Data.DataColumn("FechaUltMov", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaUltMov)
            Me.columnTotalInteres = New Global.System.Data.DataColumn("TotalInteres", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalInteres)
            Me.columnFechaVenc = New Global.System.Data.DataColumn("FechaVenc", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaVenc)
            Me.columnDiasProvisionados = New Global.System.Data.DataColumn("DiasProvisionados", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasProvisionados)
            Me.columnNoCuentaVista = New Global.System.Data.DataColumn("NoCuentaVista", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoCuentaVista)
            Me.columnTelCasa = New Global.System.Data.DataColumn("TelCasa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelCasa)
            Me.columnTelOficina = New Global.System.Data.DataColumn("TelOficina", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelOficina)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatosRow() As DatosRow
            Return CType(Me.NewRow,DatosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosRowChanged(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosRowChanging(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleted(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleting(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatosRow(ByVal row As DatosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsVencimientos_DPF_Proyectados = New dsVencimientos_DPF_Proyectados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReporteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnEmpresa As Global.System.Data.DataColumn
        
        Private columnTitulo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnSucursal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Reporte"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TituloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReporteRow
            Get
                Return CType(Me.Rows(index),ReporteRow)
            End Get
        End Property
        
        Public Event ReporteRowChanging As ReporteRowChangeEventHandler
        
        Public Event ReporteRowChanged As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleting As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleted As ReporteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReporteRow(ByVal row As ReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReporteRow(ByVal Fecha As Date, ByVal Empresa As String, ByVal Titulo As String, ByVal Descripcion As String, ByVal CodSucursal As String, ByVal Sucursal As String) As ReporteRow
            Dim rowReporteRow As ReporteRow = CType(Me.NewRow,ReporteRow)
            Dim columnValuesArray() As Object = New Object() {Fecha, Empresa, Titulo, Descripcion, CodSucursal, Sucursal}
            rowReporteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReporteRow)
            Return rowReporteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReporteDataTable = CType(MyBase.Clone,ReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReporteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnEmpresa = MyBase.Columns("Empresa")
            Me.columnTitulo = MyBase.Columns("Titulo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnSucursal = MyBase.Columns("Sucursal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnEmpresa = New Global.System.Data.DataColumn("Empresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpresa)
            Me.columnTitulo = New Global.System.Data.DataColumn("Titulo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitulo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnSucursal = New Global.System.Data.DataColumn("Sucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSucursal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReporteRow() As ReporteRow
            Return CType(Me.NewRow,ReporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReporteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanged(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanging(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleted(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleting(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReporteRow(ByVal row As ReporteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsVencimientos_DPF_Proyectados = New dsVencimientos_DPF_Proyectados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReporteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatosRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatos As DatosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatos = CType(Me.Table,DatosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoAhorro() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CodTipoAhorroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodTipoAhorro' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CodTipoAhorroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoAhorro() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TipoAhorroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoAhorro' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TipoAhorroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoCuenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoCuentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NoCuenta' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoSocio() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoSocioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NoSocio' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoSocioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dui() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.DuiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Dui' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.DuiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombres() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NombresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombres' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NombresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NoCertificado' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormaAsentaInt() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.FormaAsentaIntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FormaAsentaInt' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.FormaAsentaIntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasPagados() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.DiasPagadosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiasPagados' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.DiasPagadosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.PlazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Plazo' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.PlazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldo' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TasaInteres() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TasaInteresColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TasaInteres' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TasaInteresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Intereses() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.InteresesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Intereses' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.InteresesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InteresPendiente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.InteresPendienteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'InteresPendiente' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.InteresPendienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaApertura() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatos.FechaAperturaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaApertura' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.FechaAperturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaUltMov() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatos.FechaUltMovColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaUltMov' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.FechaUltMovColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalInteres() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TotalInteresColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalInteres' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TotalInteresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaVenc() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatos.FechaVencColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaVenc' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.FechaVencColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasProvisionados() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.DiasProvisionadosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiasProvisionados' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.DiasProvisionadosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoCuentaVista() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoCuentaVistaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NoCuentaVista' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoCuentaVistaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelCasa() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TelCasaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TelCasa' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TelCasaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelOficina() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TelOficinaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TelOficina' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TelOficinaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodTipoAhorroNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CodTipoAhorroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodTipoAhorroNull()
            Me(Me.tableDatos.CodTipoAhorroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoAhorroNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TipoAhorroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoAhorroNull()
            Me(Me.tableDatos.TipoAhorroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoCuentaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoCuentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoCuentaNull()
            Me(Me.tableDatos.NoCuentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoSocioNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoSocioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoSocioNull()
            Me(Me.tableDatos.NoSocioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuiNull() As Boolean
            Return Me.IsNull(Me.tableDatos.DuiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuiNull()
            Me(Me.tableDatos.DuiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombresNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NombresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombresNull()
            Me(Me.tableDatos.NombresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoCertificadoNull()
            Me(Me.tableDatos.NoCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormaAsentaIntNull() As Boolean
            Return Me.IsNull(Me.tableDatos.FormaAsentaIntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormaAsentaIntNull()
            Me(Me.tableDatos.FormaAsentaIntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasPagadosNull() As Boolean
            Return Me.IsNull(Me.tableDatos.DiasPagadosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasPagadosNull()
            Me(Me.tableDatos.DiasPagadosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlazoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.PlazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlazoNull()
            Me(Me.tableDatos.PlazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoNull()
            Me(Me.tableDatos.SaldoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTasaInteresNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TasaInteresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTasaInteresNull()
            Me(Me.tableDatos.TasaInteresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInteresesNull() As Boolean
            Return Me.IsNull(Me.tableDatos.InteresesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInteresesNull()
            Me(Me.tableDatos.InteresesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInteresPendienteNull() As Boolean
            Return Me.IsNull(Me.tableDatos.InteresPendienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInteresPendienteNull()
            Me(Me.tableDatos.InteresPendienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAperturaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.FechaAperturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAperturaNull()
            Me(Me.tableDatos.FechaAperturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaUltMovNull() As Boolean
            Return Me.IsNull(Me.tableDatos.FechaUltMovColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaUltMovNull()
            Me(Me.tableDatos.FechaUltMovColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalInteresNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TotalInteresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalInteresNull()
            Me(Me.tableDatos.TotalInteresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaVencNull() As Boolean
            Return Me.IsNull(Me.tableDatos.FechaVencColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaVencNull()
            Me(Me.tableDatos.FechaVencColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasProvisionadosNull() As Boolean
            Return Me.IsNull(Me.tableDatos.DiasProvisionadosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasProvisionadosNull()
            Me(Me.tableDatos.DiasProvisionadosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoCuentaVistaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoCuentaVistaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoCuentaVistaNull()
            Me(Me.tableDatos.NoCuentaVistaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelCasaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TelCasaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelCasaNull()
            Me(Me.tableDatos.TelCasaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelOficinaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TelOficinaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelOficinaNull()
            Me(Me.tableDatos.TelOficinaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReporteRow
        Inherits Global.System.Data.DataRow
        
        Private tableReporte As ReporteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte = CType(Me.Table,ReporteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableReporte.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'Reporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Empresa() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.EmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Empresa' de la tabla 'Reporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.EmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Titulo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TituloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Titulo' de la tabla 'Reporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TituloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'Reporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.CodSucursalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodSucursal' de la tabla 'Reporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sucursal() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.SucursalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sucursal' de la tabla 'Reporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.SucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableReporte.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.EmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpresaNull()
            Me(Me.tableReporte.EmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TituloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTituloNull()
            Me(Me.tableReporte.TituloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableReporte.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.CodSucursalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodSucursalNull()
            Me(Me.tableReporte.CodSucursalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.SucursalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSucursalNull()
            Me(Me.tableReporte.SucursalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReporteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReporteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReporteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
