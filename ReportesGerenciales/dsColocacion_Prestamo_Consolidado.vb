'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsColocacion_Prestamo_Consolidado
    Inherits DataSet
    
    Private tableReporte As ReporteDataTable
    
    Private tableDatos As DatosDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            If (Not (ds.Tables("Datos")) Is Nothing) Then
                Me.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte As ReporteDataTable
        Get
            Return Me.tableReporte
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Datos As DatosDataTable
        Get
            Return Me.tableDatos
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsColocacion_Prestamo_Consolidado = CType(MyBase.Clone,dsColocacion_Prestamo_Consolidado)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Reporte")) Is Nothing) Then
            Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
        End If
        If (Not (ds.Tables("Datos")) Is Nothing) Then
            Me.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableReporte = CType(Me.Tables("Reporte"),ReporteDataTable)
        If (Not (Me.tableReporte) Is Nothing) Then
            Me.tableReporte.InitVars
        End If
        Me.tableDatos = CType(Me.Tables("Datos"),DatosDataTable)
        If (Not (Me.tableDatos) Is Nothing) Then
            Me.tableDatos.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsColocacion_Prestamo_Consolidado"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsColocacion_Prestamo_Consolidado.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableReporte = New ReporteDataTable
        Me.Tables.Add(Me.tableReporte)
        Me.tableDatos = New DatosDataTable
        Me.Tables.Add(Me.tableDatos)
    End Sub
    
    Private Function ShouldSerializeReporte() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDatos() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As ReporteRowChangeEvent)
    
    Public Delegate Sub DatosRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFecha As DataColumn
        
        Private columnEmpresa As DataColumn
        
        Private columnTitulo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnCodSucursal As DataColumn
        
        Private columnSucursal As DataColumn
        
        Friend Sub New()
            MyBase.New("Reporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property TituloColumn As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property CodSucursalColumn As DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        Friend ReadOnly Property SucursalColumn As DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReporteRow
            Get
                Return CType(Me.Rows(index),ReporteRow)
            End Get
        End Property
        
        Public Event ReporteRowChanged As ReporteRowChangeEventHandler
        
        Public Event ReporteRowChanging As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleted As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleting As ReporteRowChangeEventHandler
        
        Public Overloads Sub AddReporteRow(ByVal row As ReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReporteRow(ByVal Fecha As Date, ByVal Empresa As String, ByVal Titulo As String, ByVal Descripcion As String, ByVal CodSucursal As String, ByVal Sucursal As String) As ReporteRow
            Dim rowReporteRow As ReporteRow = CType(Me.NewRow,ReporteRow)
            rowReporteRow.ItemArray = New Object() {Fecha, Empresa, Titulo, Descripcion, CodSucursal, Sucursal}
            Me.Rows.Add(rowReporteRow)
            Return rowReporteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReporteDataTable = CType(MyBase.Clone,ReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnTitulo = Me.Columns("Titulo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnCodSucursal = Me.Columns("CodSucursal")
            Me.columnSucursal = Me.Columns("Sucursal")
        End Sub
        
        Private Sub InitClass()
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnTitulo = New DataColumn("Titulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitulo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnCodSucursal = New DataColumn("CodSucursal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodSucursal)
            Me.columnSucursal = New DataColumn("Sucursal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSucursal)
        End Sub
        
        Public Function NewReporteRow() As ReporteRow
            Return CType(Me.NewRow,ReporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanged(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanging(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleted(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleting(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReporteRow(ByVal row As ReporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRow
        Inherits DataRow
        
        Private tableReporte As ReporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte = CType(Me.Table,ReporteDataTable)
        End Sub
        
        Public Property Fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tableReporte.FechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.FechaColumn) = value
            End Set
        End Property
        
        Public Property Empresa As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.EmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Titulo As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TituloColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property CodSucursal As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.CodSucursalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.CodSucursalColumn) = value
            End Set
        End Property
        
        Public Property Sucursal As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.SucursalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.SucursalColumn) = value
            End Set
        End Property
        
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.FechaColumn)
        End Function
        
        Public Sub SetFechaNull()
            Me(Me.tableReporte.FechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.EmpresaColumn)
        End Function
        
        Public Sub SetEmpresaNull()
            Me(Me.tableReporte.EmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TituloColumn)
        End Function
        
        Public Sub SetTituloNull()
            Me(Me.tableReporte.TituloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableReporte.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.CodSucursalColumn)
        End Function
        
        Public Sub SetCodSucursalNull()
            Me(Me.tableReporte.CodSucursalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.SucursalColumn)
        End Function
        
        Public Sub SetSucursalNull()
            Me(Me.tableReporte.SucursalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCorr As DataColumn
        
        Private columnGarantia As DataColumn
        
        Private columnTipoCredito As DataColumn
        
        Private columnNombrePromocion As DataColumn
        
        Private columnNo As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnNo1 As DataColumn
        
        Private columnMonto1 As DataColumn
        
        Private columnNo2 As DataColumn
        
        Private columnMonto2 As DataColumn
        
        Private columnNo3 As DataColumn
        
        Private columnMonto3 As DataColumn
        
        Private columnNo4 As DataColumn
        
        Private columnMonto4 As DataColumn
        
        Private columnNo5 As DataColumn
        
        Private columnMonto5 As DataColumn
        
        Private columnNo6 As DataColumn
        
        Private columnMonto6 As DataColumn
        
        Private columnNo7 As DataColumn
        
        Private columnMonto7 As DataColumn
        
        Private columnNo8 As DataColumn
        
        Private columnMonto8 As DataColumn
        
        Private columnNo9 As DataColumn
        
        Private columnMonto9 As DataColumn
        
        Private columnNo10 As DataColumn
        
        Private columnMonto10 As DataColumn
        
        Private columnNo11 As DataColumn
        
        Private columnMonto11 As DataColumn
        
        Private columnNo12 As DataColumn
        
        Private columnMonto12 As DataColumn
        
        Friend Sub New()
            MyBase.New("Datos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CorrColumn As DataColumn
            Get
                Return Me.columnCorr
            End Get
        End Property
        
        Friend ReadOnly Property GarantiaColumn As DataColumn
            Get
                Return Me.columnGarantia
            End Get
        End Property
        
        Friend ReadOnly Property TipoCreditoColumn As DataColumn
            Get
                Return Me.columnTipoCredito
            End Get
        End Property
        
        Friend ReadOnly Property NombrePromocionColumn As DataColumn
            Get
                Return Me.columnNombrePromocion
            End Get
        End Property
        
        Friend ReadOnly Property NoColumn As DataColumn
            Get
                Return Me.columnNo
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property No1Column As DataColumn
            Get
                Return Me.columnNo1
            End Get
        End Property
        
        Friend ReadOnly Property Monto1Column As DataColumn
            Get
                Return Me.columnMonto1
            End Get
        End Property
        
        Friend ReadOnly Property No2Column As DataColumn
            Get
                Return Me.columnNo2
            End Get
        End Property
        
        Friend ReadOnly Property Monto2Column As DataColumn
            Get
                Return Me.columnMonto2
            End Get
        End Property
        
        Friend ReadOnly Property No3Column As DataColumn
            Get
                Return Me.columnNo3
            End Get
        End Property
        
        Friend ReadOnly Property Monto3Column As DataColumn
            Get
                Return Me.columnMonto3
            End Get
        End Property
        
        Friend ReadOnly Property No4Column As DataColumn
            Get
                Return Me.columnNo4
            End Get
        End Property
        
        Friend ReadOnly Property Monto4Column As DataColumn
            Get
                Return Me.columnMonto4
            End Get
        End Property
        
        Friend ReadOnly Property No5Column As DataColumn
            Get
                Return Me.columnNo5
            End Get
        End Property
        
        Friend ReadOnly Property Monto5Column As DataColumn
            Get
                Return Me.columnMonto5
            End Get
        End Property
        
        Friend ReadOnly Property No6Column As DataColumn
            Get
                Return Me.columnNo6
            End Get
        End Property
        
        Friend ReadOnly Property Monto6Column As DataColumn
            Get
                Return Me.columnMonto6
            End Get
        End Property
        
        Friend ReadOnly Property No7Column As DataColumn
            Get
                Return Me.columnNo7
            End Get
        End Property
        
        Friend ReadOnly Property Monto7Column As DataColumn
            Get
                Return Me.columnMonto7
            End Get
        End Property
        
        Friend ReadOnly Property No8Column As DataColumn
            Get
                Return Me.columnNo8
            End Get
        End Property
        
        Friend ReadOnly Property Monto8Column As DataColumn
            Get
                Return Me.columnMonto8
            End Get
        End Property
        
        Friend ReadOnly Property No9Column As DataColumn
            Get
                Return Me.columnNo9
            End Get
        End Property
        
        Friend ReadOnly Property Monto9Column As DataColumn
            Get
                Return Me.columnMonto9
            End Get
        End Property
        
        Friend ReadOnly Property No10Column As DataColumn
            Get
                Return Me.columnNo10
            End Get
        End Property
        
        Friend ReadOnly Property Monto10Column As DataColumn
            Get
                Return Me.columnMonto10
            End Get
        End Property
        
        Friend ReadOnly Property No11Column As DataColumn
            Get
                Return Me.columnNo11
            End Get
        End Property
        
        Friend ReadOnly Property Monto11Column As DataColumn
            Get
                Return Me.columnMonto11
            End Get
        End Property
        
        Friend ReadOnly Property No12Column As DataColumn
            Get
                Return Me.columnNo12
            End Get
        End Property
        
        Friend ReadOnly Property Monto12Column As DataColumn
            Get
                Return Me.columnMonto12
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosRow
            Get
                Return CType(Me.Rows(index),DatosRow)
            End Get
        End Property
        
        Public Event DatosRowChanged As DatosRowChangeEventHandler
        
        Public Event DatosRowChanging As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleted As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleting As DatosRowChangeEventHandler
        
        Public Overloads Sub AddDatosRow(ByVal row As DatosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDatosRow( _
                    ByVal Corr As Integer,  _
                    ByVal Garantia As String,  _
                    ByVal TipoCredito As String,  _
                    ByVal NombrePromocion As String,  _
                    ByVal No As Integer,  _
                    ByVal Monto As Decimal,  _
                    ByVal No1 As Integer,  _
                    ByVal Monto1 As Decimal,  _
                    ByVal No2 As Integer,  _
                    ByVal Monto2 As Decimal,  _
                    ByVal No3 As Integer,  _
                    ByVal Monto3 As Decimal,  _
                    ByVal No4 As Integer,  _
                    ByVal Monto4 As Decimal,  _
                    ByVal No5 As Integer,  _
                    ByVal Monto5 As Decimal,  _
                    ByVal No6 As Integer,  _
                    ByVal Monto6 As Decimal,  _
                    ByVal No7 As Integer,  _
                    ByVal Monto7 As Decimal,  _
                    ByVal No8 As Integer,  _
                    ByVal Monto8 As Decimal,  _
                    ByVal No9 As Integer,  _
                    ByVal Monto9 As Decimal,  _
                    ByVal No10 As Integer,  _
                    ByVal Monto10 As Decimal,  _
                    ByVal No11 As Integer,  _
                    ByVal Monto11 As Decimal,  _
                    ByVal No12 As Integer,  _
                    ByVal Monto12 As Decimal) As DatosRow
            Dim rowDatosRow As DatosRow = CType(Me.NewRow,DatosRow)
            rowDatosRow.ItemArray = New Object() {Corr, Garantia, TipoCredito, NombrePromocion, No, Monto, No1, Monto1, No2, Monto2, No3, Monto3, No4, Monto4, No5, Monto5, No6, Monto6, No7, Monto7, No8, Monto8, No9, Monto9, No10, Monto10, No11, Monto11, No12, Monto12}
            Me.Rows.Add(rowDatosRow)
            Return rowDatosRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DatosDataTable = CType(MyBase.Clone,DatosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DatosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCorr = Me.Columns("Corr")
            Me.columnGarantia = Me.Columns("Garantia")
            Me.columnTipoCredito = Me.Columns("TipoCredito")
            Me.columnNombrePromocion = Me.Columns("NombrePromocion")
            Me.columnNo = Me.Columns("No")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnNo1 = Me.Columns("No1")
            Me.columnMonto1 = Me.Columns("Monto1")
            Me.columnNo2 = Me.Columns("No2")
            Me.columnMonto2 = Me.Columns("Monto2")
            Me.columnNo3 = Me.Columns("No3")
            Me.columnMonto3 = Me.Columns("Monto3")
            Me.columnNo4 = Me.Columns("No4")
            Me.columnMonto4 = Me.Columns("Monto4")
            Me.columnNo5 = Me.Columns("No5")
            Me.columnMonto5 = Me.Columns("Monto5")
            Me.columnNo6 = Me.Columns("No6")
            Me.columnMonto6 = Me.Columns("Monto6")
            Me.columnNo7 = Me.Columns("No7")
            Me.columnMonto7 = Me.Columns("Monto7")
            Me.columnNo8 = Me.Columns("No8")
            Me.columnMonto8 = Me.Columns("Monto8")
            Me.columnNo9 = Me.Columns("No9")
            Me.columnMonto9 = Me.Columns("Monto9")
            Me.columnNo10 = Me.Columns("No10")
            Me.columnMonto10 = Me.Columns("Monto10")
            Me.columnNo11 = Me.Columns("No11")
            Me.columnMonto11 = Me.Columns("Monto11")
            Me.columnNo12 = Me.Columns("No12")
            Me.columnMonto12 = Me.Columns("Monto12")
        End Sub
        
        Private Sub InitClass()
            Me.columnCorr = New DataColumn("Corr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorr)
            Me.columnGarantia = New DataColumn("Garantia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGarantia)
            Me.columnTipoCredito = New DataColumn("TipoCredito", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCredito)
            Me.columnNombrePromocion = New DataColumn("NombrePromocion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombrePromocion)
            Me.columnNo = New DataColumn("No", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnNo1 = New DataColumn("No1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo1)
            Me.columnMonto1 = New DataColumn("Monto1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto1)
            Me.columnNo2 = New DataColumn("No2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo2)
            Me.columnMonto2 = New DataColumn("Monto2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto2)
            Me.columnNo3 = New DataColumn("No3", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo3)
            Me.columnMonto3 = New DataColumn("Monto3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto3)
            Me.columnNo4 = New DataColumn("No4", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo4)
            Me.columnMonto4 = New DataColumn("Monto4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto4)
            Me.columnNo5 = New DataColumn("No5", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo5)
            Me.columnMonto5 = New DataColumn("Monto5", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto5)
            Me.columnNo6 = New DataColumn("No6", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo6)
            Me.columnMonto6 = New DataColumn("Monto6", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto6)
            Me.columnNo7 = New DataColumn("No7", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo7)
            Me.columnMonto7 = New DataColumn("Monto7", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto7)
            Me.columnNo8 = New DataColumn("No8", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo8)
            Me.columnMonto8 = New DataColumn("Monto8", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto8)
            Me.columnNo9 = New DataColumn("No9", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo9)
            Me.columnMonto9 = New DataColumn("Monto9", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto9)
            Me.columnNo10 = New DataColumn("No10", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo10)
            Me.columnMonto10 = New DataColumn("Monto10", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto10)
            Me.columnNo11 = New DataColumn("No11", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo11)
            Me.columnMonto11 = New DataColumn("Monto11", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto11)
            Me.columnNo12 = New DataColumn("No12", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNo12)
            Me.columnMonto12 = New DataColumn("Monto12", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto12)
        End Sub
        
        Public Function NewDatosRow() As DatosRow
            Return CType(Me.NewRow,DatosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DatosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosRowChanged(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosRowChanging(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleted(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleting(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDatosRow(ByVal row As DatosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRow
        Inherits DataRow
        
        Private tableDatos As DatosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatos = CType(Me.Table,DatosDataTable)
        End Sub
        
        Public Property Corr As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CorrColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CorrColumn) = value
            End Set
        End Property
        
        Public Property Garantia As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.GarantiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.GarantiaColumn) = value
            End Set
        End Property
        
        Public Property TipoCredito As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TipoCreditoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TipoCreditoColumn) = value
            End Set
        End Property
        
        Public Property NombrePromocion As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NombrePromocionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NombrePromocionColumn) = value
            End Set
        End Property
        
        Public Property No As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoColumn) = value
            End Set
        End Property
        
        Public Property Monto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.MontoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.MontoColumn) = value
            End Set
        End Property
        
        Public Property No1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No1Column) = value
            End Set
        End Property
        
        Public Property Monto1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto1Column) = value
            End Set
        End Property
        
        Public Property No2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No2Column) = value
            End Set
        End Property
        
        Public Property Monto2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto2Column) = value
            End Set
        End Property
        
        Public Property No3 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No3Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No3Column) = value
            End Set
        End Property
        
        Public Property Monto3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto3Column) = value
            End Set
        End Property
        
        Public Property No4 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No4Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No4Column) = value
            End Set
        End Property
        
        Public Property Monto4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto4Column) = value
            End Set
        End Property
        
        Public Property No5 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No5Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No5Column) = value
            End Set
        End Property
        
        Public Property Monto5 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto5Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto5Column) = value
            End Set
        End Property
        
        Public Property No6 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No6Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No6Column) = value
            End Set
        End Property
        
        Public Property Monto6 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto6Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto6Column) = value
            End Set
        End Property
        
        Public Property No7 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No7Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No7Column) = value
            End Set
        End Property
        
        Public Property Monto7 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto7Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto7Column) = value
            End Set
        End Property
        
        Public Property No8 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No8Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No8Column) = value
            End Set
        End Property
        
        Public Property Monto8 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto8Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto8Column) = value
            End Set
        End Property
        
        Public Property No9 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No9Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No9Column) = value
            End Set
        End Property
        
        Public Property Monto9 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto9Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto9Column) = value
            End Set
        End Property
        
        Public Property No10 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No10Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No10Column) = value
            End Set
        End Property
        
        Public Property Monto10 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto10Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto10Column) = value
            End Set
        End Property
        
        Public Property No11 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No11Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No11Column) = value
            End Set
        End Property
        
        Public Property Monto11 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto11Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto11Column) = value
            End Set
        End Property
        
        Public Property No12 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.No12Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.No12Column) = value
            End Set
        End Property
        
        Public Property Monto12 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Monto12Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Monto12Column) = value
            End Set
        End Property
        
        Public Function IsCorrNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CorrColumn)
        End Function
        
        Public Sub SetCorrNull()
            Me(Me.tableDatos.CorrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGarantiaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.GarantiaColumn)
        End Function
        
        Public Sub SetGarantiaNull()
            Me(Me.tableDatos.GarantiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoCreditoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TipoCreditoColumn)
        End Function
        
        Public Sub SetTipoCreditoNull()
            Me(Me.tableDatos.TipoCreditoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombrePromocionNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NombrePromocionColumn)
        End Function
        
        Public Sub SetNombrePromocionNull()
            Me(Me.tableDatos.NombrePromocionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoColumn)
        End Function
        
        Public Sub SetNoNull()
            Me(Me.tableDatos.NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tableDatos.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo1Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No1Column)
        End Function
        
        Public Sub SetNo1Null()
            Me(Me.tableDatos.No1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto1Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto1Column)
        End Function
        
        Public Sub SetMonto1Null()
            Me(Me.tableDatos.Monto1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo2Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No2Column)
        End Function
        
        Public Sub SetNo2Null()
            Me(Me.tableDatos.No2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto2Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto2Column)
        End Function
        
        Public Sub SetMonto2Null()
            Me(Me.tableDatos.Monto2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo3Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No3Column)
        End Function
        
        Public Sub SetNo3Null()
            Me(Me.tableDatos.No3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto3Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto3Column)
        End Function
        
        Public Sub SetMonto3Null()
            Me(Me.tableDatos.Monto3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo4Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No4Column)
        End Function
        
        Public Sub SetNo4Null()
            Me(Me.tableDatos.No4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto4Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto4Column)
        End Function
        
        Public Sub SetMonto4Null()
            Me(Me.tableDatos.Monto4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo5Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No5Column)
        End Function
        
        Public Sub SetNo5Null()
            Me(Me.tableDatos.No5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto5Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto5Column)
        End Function
        
        Public Sub SetMonto5Null()
            Me(Me.tableDatos.Monto5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo6Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No6Column)
        End Function
        
        Public Sub SetNo6Null()
            Me(Me.tableDatos.No6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto6Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto6Column)
        End Function
        
        Public Sub SetMonto6Null()
            Me(Me.tableDatos.Monto6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo7Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No7Column)
        End Function
        
        Public Sub SetNo7Null()
            Me(Me.tableDatos.No7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto7Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto7Column)
        End Function
        
        Public Sub SetMonto7Null()
            Me(Me.tableDatos.Monto7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo8Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No8Column)
        End Function
        
        Public Sub SetNo8Null()
            Me(Me.tableDatos.No8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto8Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto8Column)
        End Function
        
        Public Sub SetMonto8Null()
            Me(Me.tableDatos.Monto8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo9Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No9Column)
        End Function
        
        Public Sub SetNo9Null()
            Me(Me.tableDatos.No9Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto9Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto9Column)
        End Function
        
        Public Sub SetMonto9Null()
            Me(Me.tableDatos.Monto9Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo10Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No10Column)
        End Function
        
        Public Sub SetNo10Null()
            Me(Me.tableDatos.No10Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto10Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto10Column)
        End Function
        
        Public Sub SetMonto10Null()
            Me(Me.tableDatos.Monto10Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo11Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No11Column)
        End Function
        
        Public Sub SetNo11Null()
            Me(Me.tableDatos.No11Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto11Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto11Column)
        End Function
        
        Public Sub SetMonto11Null()
            Me(Me.tableDatos.Monto11Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNo12Null() As Boolean
            Return Me.IsNull(Me.tableDatos.No12Column)
        End Function
        
        Public Sub SetNo12Null()
            Me(Me.tableDatos.No12Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonto12Null() As Boolean
            Return Me.IsNull(Me.tableDatos.Monto12Column)
        End Function
        
        Public Sub SetMonto12Null()
            Me(Me.tableDatos.Monto12Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DatosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DatosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DatosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
