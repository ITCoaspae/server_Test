'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsListadoCreditoSinPagoXMesGestion
    Inherits DataSet
    
    Private tableCreditosSinPago As CreditosSinPagoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CreditosSinPago")) Is Nothing) Then
                Me.Tables.Add(New CreditosSinPagoDataTable(ds.Tables("CreditosSinPago")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditosSinPago As CreditosSinPagoDataTable
        Get
            Return Me.tableCreditosSinPago
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsListadoCreditoSinPagoXMesGestion = CType(MyBase.Clone,dsListadoCreditoSinPagoXMesGestion)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CreditosSinPago")) Is Nothing) Then
            Me.Tables.Add(New CreditosSinPagoDataTable(ds.Tables("CreditosSinPago")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCreditosSinPago = CType(Me.Tables("CreditosSinPago"),CreditosSinPagoDataTable)
        If (Not (Me.tableCreditosSinPago) Is Nothing) Then
            Me.tableCreditosSinPago.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsListadoCreditoSinPagoXMesGestion"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsListadoCreditoSinPagoXMesGestion.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCreditosSinPago = New CreditosSinPagoDataTable
        Me.Tables.Add(Me.tableCreditosSinPago)
    End Sub
    
    Private Function ShouldSerializeCreditosSinPago() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CreditosSinPagoRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditosSinPagoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CreditosSinPagoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodPrestamo As DataColumn
        
        Private columnNombreAsociado As DataColumn
        
        Private columnSaldoCapital As DataColumn
        
        Private columnSaldoDiaCapitalMora As DataColumn
        
        Private columnDiaCobro As DataColumn
        
        Private columnCategoria As DataColumn
        
        Private columnFechaInicio As DataColumn
        
        Private columnFechaPactada As DataColumn
        
        Private columnFormaPago As DataColumn
        
        Private columnCodGestor As DataColumn
        
        Private columnNombreGestor As DataColumn
        
        Friend Sub New()
            MyBase.New("CreditosSinPago")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodPrestamoColumn As DataColumn
            Get
                Return Me.columnCodPrestamo
            End Get
        End Property
        
        Friend ReadOnly Property NombreAsociadoColumn As DataColumn
            Get
                Return Me.columnNombreAsociado
            End Get
        End Property
        
        Friend ReadOnly Property SaldoCapitalColumn As DataColumn
            Get
                Return Me.columnSaldoCapital
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDiaCapitalMoraColumn As DataColumn
            Get
                Return Me.columnSaldoDiaCapitalMora
            End Get
        End Property
        
        Friend ReadOnly Property DiaCobroColumn As DataColumn
            Get
                Return Me.columnDiaCobro
            End Get
        End Property
        
        Friend ReadOnly Property CategoriaColumn As DataColumn
            Get
                Return Me.columnCategoria
            End Get
        End Property
        
        Friend ReadOnly Property FechaInicioColumn As DataColumn
            Get
                Return Me.columnFechaInicio
            End Get
        End Property
        
        Friend ReadOnly Property FechaPactadaColumn As DataColumn
            Get
                Return Me.columnFechaPactada
            End Get
        End Property
        
        Friend ReadOnly Property FormaPagoColumn As DataColumn
            Get
                Return Me.columnFormaPago
            End Get
        End Property
        
        Friend ReadOnly Property CodGestorColumn As DataColumn
            Get
                Return Me.columnCodGestor
            End Get
        End Property
        
        Friend ReadOnly Property NombreGestorColumn As DataColumn
            Get
                Return Me.columnNombreGestor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditosSinPagoRow
            Get
                Return CType(Me.Rows(index),CreditosSinPagoRow)
            End Get
        End Property
        
        Public Event CreditosSinPagoRowChanged As CreditosSinPagoRowChangeEventHandler
        
        Public Event CreditosSinPagoRowChanging As CreditosSinPagoRowChangeEventHandler
        
        Public Event CreditosSinPagoRowDeleted As CreditosSinPagoRowChangeEventHandler
        
        Public Event CreditosSinPagoRowDeleting As CreditosSinPagoRowChangeEventHandler
        
        Public Overloads Sub AddCreditosSinPagoRow(ByVal row As CreditosSinPagoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCreditosSinPagoRow(ByVal CodPrestamo As String, ByVal NombreAsociado As String, ByVal SaldoCapital As Double, ByVal SaldoDiaCapitalMora As Double, ByVal DiaCobro As Integer, ByVal Categoria As String, ByVal FechaInicio As Date, ByVal FechaPactada As Date, ByVal FormaPago As String, ByVal CodGestor As String, ByVal NombreGestor As String) As CreditosSinPagoRow
            Dim rowCreditosSinPagoRow As CreditosSinPagoRow = CType(Me.NewRow,CreditosSinPagoRow)
            rowCreditosSinPagoRow.ItemArray = New Object() {CodPrestamo, NombreAsociado, SaldoCapital, SaldoDiaCapitalMora, DiaCobro, Categoria, FechaInicio, FechaPactada, FormaPago, CodGestor, NombreGestor}
            Me.Rows.Add(rowCreditosSinPagoRow)
            Return rowCreditosSinPagoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CreditosSinPagoDataTable = CType(MyBase.Clone,CreditosSinPagoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CreditosSinPagoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodPrestamo = Me.Columns("CodPrestamo")
            Me.columnNombreAsociado = Me.Columns("NombreAsociado")
            Me.columnSaldoCapital = Me.Columns("SaldoCapital")
            Me.columnSaldoDiaCapitalMora = Me.Columns("SaldoDiaCapitalMora")
            Me.columnDiaCobro = Me.Columns("DiaCobro")
            Me.columnCategoria = Me.Columns("Categoria")
            Me.columnFechaInicio = Me.Columns("FechaInicio")
            Me.columnFechaPactada = Me.Columns("FechaPactada")
            Me.columnFormaPago = Me.Columns("FormaPago")
            Me.columnCodGestor = Me.Columns("CodGestor")
            Me.columnNombreGestor = Me.Columns("NombreGestor")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodPrestamo = New DataColumn("CodPrestamo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodPrestamo)
            Me.columnNombreAsociado = New DataColumn("NombreAsociado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreAsociado)
            Me.columnSaldoCapital = New DataColumn("SaldoCapital", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoCapital)
            Me.columnSaldoDiaCapitalMora = New DataColumn("SaldoDiaCapitalMora", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDiaCapitalMora)
            Me.columnDiaCobro = New DataColumn("DiaCobro", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiaCobro)
            Me.columnCategoria = New DataColumn("Categoria", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCategoria)
            Me.columnFechaInicio = New DataColumn("FechaInicio", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaInicio)
            Me.columnFechaPactada = New DataColumn("FechaPactada", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaPactada)
            Me.columnFormaPago = New DataColumn("FormaPago", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormaPago)
            Me.columnCodGestor = New DataColumn("CodGestor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodGestor)
            Me.columnNombreGestor = New DataColumn("NombreGestor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreGestor)
        End Sub
        
        Public Function NewCreditosSinPagoRow() As CreditosSinPagoRow
            Return CType(Me.NewRow,CreditosSinPagoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CreditosSinPagoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CreditosSinPagoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditosSinPagoRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditosSinPagoRowChanged(Me, New CreditosSinPagoRowChangeEvent(CType(e.Row,CreditosSinPagoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditosSinPagoRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditosSinPagoRowChanging(Me, New CreditosSinPagoRowChangeEvent(CType(e.Row,CreditosSinPagoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditosSinPagoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditosSinPagoRowDeleted(Me, New CreditosSinPagoRowChangeEvent(CType(e.Row,CreditosSinPagoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditosSinPagoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditosSinPagoRowDeleting(Me, New CreditosSinPagoRowChangeEvent(CType(e.Row,CreditosSinPagoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCreditosSinPagoRow(ByVal row As CreditosSinPagoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CreditosSinPagoRow
        Inherits DataRow
        
        Private tableCreditosSinPago As CreditosSinPagoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditosSinPago = CType(Me.Table,CreditosSinPagoDataTable)
        End Sub
        
        Public Property CodPrestamo As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.CodPrestamoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.CodPrestamoColumn) = value
            End Set
        End Property
        
        Public Property NombreAsociado As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.NombreAsociadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.NombreAsociadoColumn) = value
            End Set
        End Property
        
        Public Property SaldoCapital As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.SaldoCapitalColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.SaldoCapitalColumn) = value
            End Set
        End Property
        
        Public Property SaldoDiaCapitalMora As Double
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.SaldoDiaCapitalMoraColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.SaldoDiaCapitalMoraColumn) = value
            End Set
        End Property
        
        Public Property DiaCobro As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.DiaCobroColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.DiaCobroColumn) = value
            End Set
        End Property
        
        Public Property Categoria As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.CategoriaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.CategoriaColumn) = value
            End Set
        End Property
        
        Public Property FechaInicio As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.FechaInicioColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.FechaInicioColumn) = value
            End Set
        End Property
        
        Public Property FechaPactada As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.FechaPactadaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.FechaPactadaColumn) = value
            End Set
        End Property
        
        Public Property FormaPago As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.FormaPagoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.FormaPagoColumn) = value
            End Set
        End Property
        
        Public Property CodGestor As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.CodGestorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.CodGestorColumn) = value
            End Set
        End Property
        
        Public Property NombreGestor As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditosSinPago.NombreGestorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditosSinPago.NombreGestorColumn) = value
            End Set
        End Property
        
        Public Function IsCodPrestamoNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.CodPrestamoColumn)
        End Function
        
        Public Sub SetCodPrestamoNull()
            Me(Me.tableCreditosSinPago.CodPrestamoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombreAsociadoNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.NombreAsociadoColumn)
        End Function
        
        Public Sub SetNombreAsociadoNull()
            Me(Me.tableCreditosSinPago.NombreAsociadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoCapitalNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.SaldoCapitalColumn)
        End Function
        
        Public Sub SetSaldoCapitalNull()
            Me(Me.tableCreditosSinPago.SaldoCapitalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDiaCapitalMoraNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.SaldoDiaCapitalMoraColumn)
        End Function
        
        Public Sub SetSaldoDiaCapitalMoraNull()
            Me(Me.tableCreditosSinPago.SaldoDiaCapitalMoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiaCobroNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.DiaCobroColumn)
        End Function
        
        Public Sub SetDiaCobroNull()
            Me(Me.tableCreditosSinPago.DiaCobroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCategoriaNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.CategoriaColumn)
        End Function
        
        Public Sub SetCategoriaNull()
            Me(Me.tableCreditosSinPago.CategoriaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaInicioNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.FechaInicioColumn)
        End Function
        
        Public Sub SetFechaInicioNull()
            Me(Me.tableCreditosSinPago.FechaInicioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaPactadaNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.FechaPactadaColumn)
        End Function
        
        Public Sub SetFechaPactadaNull()
            Me(Me.tableCreditosSinPago.FechaPactadaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFormaPagoNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.FormaPagoColumn)
        End Function
        
        Public Sub SetFormaPagoNull()
            Me(Me.tableCreditosSinPago.FormaPagoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodGestorNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.CodGestorColumn)
        End Function
        
        Public Sub SetCodGestorNull()
            Me(Me.tableCreditosSinPago.CodGestorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombreGestorNull() As Boolean
            Return Me.IsNull(Me.tableCreditosSinPago.NombreGestorColumn)
        End Function
        
        Public Sub SetNombreGestorNull()
            Me(Me.tableCreditosSinPago.NombreGestorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CreditosSinPagoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CreditosSinPagoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CreditosSinPagoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CreditosSinPagoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
