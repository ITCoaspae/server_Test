'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsMora_DXC
    Inherits DataSet
    
    Private tableReporte As ReporteDataTable
    
    Private tableDatos As DatosDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            If (Not (ds.Tables("Datos")) Is Nothing) Then
                Me.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte As ReporteDataTable
        Get
            Return Me.tableReporte
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Datos As DatosDataTable
        Get
            Return Me.tableDatos
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsMora_DXC = CType(MyBase.Clone,dsMora_DXC)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Reporte")) Is Nothing) Then
            Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
        End If
        If (Not (ds.Tables("Datos")) Is Nothing) Then
            Me.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableReporte = CType(Me.Tables("Reporte"),ReporteDataTable)
        If (Not (Me.tableReporte) Is Nothing) Then
            Me.tableReporte.InitVars
        End If
        Me.tableDatos = CType(Me.Tables("Datos"),DatosDataTable)
        If (Not (Me.tableDatos) Is Nothing) Then
            Me.tableDatos.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsMora_DXC"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsMora_DXC.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableReporte = New ReporteDataTable
        Me.Tables.Add(Me.tableReporte)
        Me.tableDatos = New DatosDataTable
        Me.Tables.Add(Me.tableDatos)
    End Sub
    
    Private Function ShouldSerializeReporte() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDatos() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As ReporteRowChangeEvent)
    
    Public Delegate Sub DatosRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFecha As DataColumn
        
        Private columnEmpresa As DataColumn
        
        Private columnTitulo As DataColumn
        
        Private columnSubTitulo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnCodSucursal As DataColumn
        
        Private columnSucursal As DataColumn
        
        Private columnTotal As DataColumn
        
        Friend Sub New()
            MyBase.New("Reporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property TituloColumn As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        Friend ReadOnly Property SubTituloColumn As DataColumn
            Get
                Return Me.columnSubTitulo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property CodSucursalColumn As DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        Friend ReadOnly Property SucursalColumn As DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReporteRow
            Get
                Return CType(Me.Rows(index),ReporteRow)
            End Get
        End Property
        
        Public Event ReporteRowChanged As ReporteRowChangeEventHandler
        
        Public Event ReporteRowChanging As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleted As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleting As ReporteRowChangeEventHandler
        
        Public Overloads Sub AddReporteRow(ByVal row As ReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReporteRow(ByVal Fecha As Date, ByVal Empresa As String, ByVal Titulo As String, ByVal SubTitulo As String, ByVal Descripcion As String, ByVal CodSucursal As String, ByVal Sucursal As String, ByVal Total As Integer) As ReporteRow
            Dim rowReporteRow As ReporteRow = CType(Me.NewRow,ReporteRow)
            rowReporteRow.ItemArray = New Object() {Fecha, Empresa, Titulo, SubTitulo, Descripcion, CodSucursal, Sucursal, Total}
            Me.Rows.Add(rowReporteRow)
            Return rowReporteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReporteDataTable = CType(MyBase.Clone,ReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnTitulo = Me.Columns("Titulo")
            Me.columnSubTitulo = Me.Columns("SubTitulo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnCodSucursal = Me.Columns("CodSucursal")
            Me.columnSucursal = Me.Columns("Sucursal")
            Me.columnTotal = Me.Columns("Total")
        End Sub
        
        Private Sub InitClass()
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnTitulo = New DataColumn("Titulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitulo)
            Me.columnSubTitulo = New DataColumn("SubTitulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubTitulo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnCodSucursal = New DataColumn("CodSucursal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodSucursal)
            Me.columnSucursal = New DataColumn("Sucursal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSucursal)
            Me.columnTotal = New DataColumn("Total", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
        End Sub
        
        Public Function NewReporteRow() As ReporteRow
            Return CType(Me.NewRow,ReporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanged(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanging(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleted(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleting(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReporteRow(ByVal row As ReporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRow
        Inherits DataRow
        
        Private tableReporte As ReporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte = CType(Me.Table,ReporteDataTable)
        End Sub
        
        Public Property Fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tableReporte.FechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.FechaColumn) = value
            End Set
        End Property
        
        Public Property Empresa As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.EmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Titulo As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TituloColumn) = value
            End Set
        End Property
        
        Public Property SubTitulo As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.SubTituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.SubTituloColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property CodSucursal As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.CodSucursalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.CodSucursalColumn) = value
            End Set
        End Property
        
        Public Property Sucursal As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.SucursalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.SucursalColumn) = value
            End Set
        End Property
        
        Public Property Total As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TotalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TotalColumn) = value
            End Set
        End Property
        
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.FechaColumn)
        End Function
        
        Public Sub SetFechaNull()
            Me(Me.tableReporte.FechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.EmpresaColumn)
        End Function
        
        Public Sub SetEmpresaNull()
            Me(Me.tableReporte.EmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TituloColumn)
        End Function
        
        Public Sub SetTituloNull()
            Me(Me.tableReporte.TituloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.SubTituloColumn)
        End Function
        
        Public Sub SetSubTituloNull()
            Me(Me.tableReporte.SubTituloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableReporte.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.CodSucursalColumn)
        End Function
        
        Public Sub SetCodSucursalNull()
            Me(Me.tableReporte.CodSucursalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.SucursalColumn)
        End Function
        
        Public Sub SetSucursalNull()
            Me(Me.tableReporte.SucursalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableReporte.TotalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDui As DataColumn
        
        Private columnNoSocio As DataColumn
        
        Private columnNombres As DataColumn
        
        Private columnTipoCredito As DataColumn
        
        Private columnCodPrestamo As DataColumn
        
        Private columnFechaOtorgamiento As DataColumn
        
        Private columnFechaVencimiento As DataColumn
        
        Private columnFechaUltimoMov As DataColumn
        
        Private columnCuota As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnSaldo As DataColumn
        
        Private columnCapitalMora As DataColumn
        
        Private columnCategoria As DataColumn
        
        Private columnM30 As DataColumn
        
        Private columnM60 As DataColumn
        
        Private columnM90 As DataColumn
        
        Private columnMM90 As DataColumn
        
        Private columnVencimiento As DataColumn
        
        Private columnMora As DataColumn
        
        Private columnDiasMora As DataColumn
        
        Private columnUltPago As DataColumn
        
        Private columnTasa As DataColumn
        
        Private columnPlazo As DataColumn
        
        Private columnNoCuotas As DataColumn
        
        Private columnMontoCxC As DataColumn
        
        Private columnSaldoCxC As DataColumn
        
        Private columnMontoCDO As DataColumn
        
        Private columnSaldoCDO As DataColumn
        
        Friend Sub New()
            MyBase.New("Datos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DuiColumn As DataColumn
            Get
                Return Me.columnDui
            End Get
        End Property
        
        Friend ReadOnly Property NoSocioColumn As DataColumn
            Get
                Return Me.columnNoSocio
            End Get
        End Property
        
        Friend ReadOnly Property NombresColumn As DataColumn
            Get
                Return Me.columnNombres
            End Get
        End Property
        
        Friend ReadOnly Property TipoCreditoColumn As DataColumn
            Get
                Return Me.columnTipoCredito
            End Get
        End Property
        
        Friend ReadOnly Property CodPrestamoColumn As DataColumn
            Get
                Return Me.columnCodPrestamo
            End Get
        End Property
        
        Friend ReadOnly Property FechaOtorgamientoColumn As DataColumn
            Get
                Return Me.columnFechaOtorgamiento
            End Get
        End Property
        
        Friend ReadOnly Property FechaVencimientoColumn As DataColumn
            Get
                Return Me.columnFechaVencimiento
            End Get
        End Property
        
        Friend ReadOnly Property FechaUltimoMovColumn As DataColumn
            Get
                Return Me.columnFechaUltimoMov
            End Get
        End Property
        
        Friend ReadOnly Property CuotaColumn As DataColumn
            Get
                Return Me.columnCuota
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property SaldoColumn As DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        Friend ReadOnly Property CapitalMoraColumn As DataColumn
            Get
                Return Me.columnCapitalMora
            End Get
        End Property
        
        Friend ReadOnly Property CategoriaColumn As DataColumn
            Get
                Return Me.columnCategoria
            End Get
        End Property
        
        Friend ReadOnly Property M30Column As DataColumn
            Get
                Return Me.columnM30
            End Get
        End Property
        
        Friend ReadOnly Property M60Column As DataColumn
            Get
                Return Me.columnM60
            End Get
        End Property
        
        Friend ReadOnly Property M90Column As DataColumn
            Get
                Return Me.columnM90
            End Get
        End Property
        
        Friend ReadOnly Property MM90Column As DataColumn
            Get
                Return Me.columnMM90
            End Get
        End Property
        
        Friend ReadOnly Property VencimientoColumn As DataColumn
            Get
                Return Me.columnVencimiento
            End Get
        End Property
        
        Friend ReadOnly Property MoraColumn As DataColumn
            Get
                Return Me.columnMora
            End Get
        End Property
        
        Friend ReadOnly Property DiasMoraColumn As DataColumn
            Get
                Return Me.columnDiasMora
            End Get
        End Property
        
        Friend ReadOnly Property UltPagoColumn As DataColumn
            Get
                Return Me.columnUltPago
            End Get
        End Property
        
        Friend ReadOnly Property TasaColumn As DataColumn
            Get
                Return Me.columnTasa
            End Get
        End Property
        
        Friend ReadOnly Property PlazoColumn As DataColumn
            Get
                Return Me.columnPlazo
            End Get
        End Property
        
        Friend ReadOnly Property NoCuotasColumn As DataColumn
            Get
                Return Me.columnNoCuotas
            End Get
        End Property
        
        Friend ReadOnly Property MontoCxCColumn As DataColumn
            Get
                Return Me.columnMontoCxC
            End Get
        End Property
        
        Friend ReadOnly Property SaldoCxCColumn As DataColumn
            Get
                Return Me.columnSaldoCxC
            End Get
        End Property
        
        Friend ReadOnly Property MontoCDOColumn As DataColumn
            Get
                Return Me.columnMontoCDO
            End Get
        End Property
        
        Friend ReadOnly Property SaldoCDOColumn As DataColumn
            Get
                Return Me.columnSaldoCDO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosRow
            Get
                Return CType(Me.Rows(index),DatosRow)
            End Get
        End Property
        
        Public Event DatosRowChanged As DatosRowChangeEventHandler
        
        Public Event DatosRowChanging As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleted As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleting As DatosRowChangeEventHandler
        
        Public Overloads Sub AddDatosRow(ByVal row As DatosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDatosRow( _
                    ByVal Dui As String,  _
                    ByVal NoSocio As String,  _
                    ByVal Nombres As String,  _
                    ByVal TipoCredito As String,  _
                    ByVal CodPrestamo As String,  _
                    ByVal FechaOtorgamiento As Date,  _
                    ByVal FechaVencimiento As Date,  _
                    ByVal FechaUltimoMov As Date,  _
                    ByVal Cuota As Decimal,  _
                    ByVal Monto As Decimal,  _
                    ByVal Saldo As Decimal,  _
                    ByVal CapitalMora As Decimal,  _
                    ByVal Categoria As String,  _
                    ByVal M30 As Decimal,  _
                    ByVal M60 As Decimal,  _
                    ByVal M90 As Decimal,  _
                    ByVal MM90 As Decimal,  _
                    ByVal Vencimiento As Decimal,  _
                    ByVal Mora As Decimal,  _
                    ByVal DiasMora As Integer,  _
                    ByVal UltPago As Decimal,  _
                    ByVal Tasa As Decimal,  _
                    ByVal Plazo As Integer,  _
                    ByVal NoCuotas As Decimal,  _
                    ByVal MontoCxC As Decimal,  _
                    ByVal SaldoCxC As Decimal,  _
                    ByVal MontoCDO As Decimal,  _
                    ByVal SaldoCDO As Decimal) As DatosRow
            Dim rowDatosRow As DatosRow = CType(Me.NewRow,DatosRow)
            rowDatosRow.ItemArray = New Object() {Dui, NoSocio, Nombres, TipoCredito, CodPrestamo, FechaOtorgamiento, FechaVencimiento, FechaUltimoMov, Cuota, Monto, Saldo, CapitalMora, Categoria, M30, M60, M90, MM90, Vencimiento, Mora, DiasMora, UltPago, Tasa, Plazo, NoCuotas, MontoCxC, SaldoCxC, MontoCDO, SaldoCDO}
            Me.Rows.Add(rowDatosRow)
            Return rowDatosRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DatosDataTable = CType(MyBase.Clone,DatosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DatosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDui = Me.Columns("Dui")
            Me.columnNoSocio = Me.Columns("NoSocio")
            Me.columnNombres = Me.Columns("Nombres")
            Me.columnTipoCredito = Me.Columns("TipoCredito")
            Me.columnCodPrestamo = Me.Columns("CodPrestamo")
            Me.columnFechaOtorgamiento = Me.Columns("FechaOtorgamiento")
            Me.columnFechaVencimiento = Me.Columns("FechaVencimiento")
            Me.columnFechaUltimoMov = Me.Columns("FechaUltimoMov")
            Me.columnCuota = Me.Columns("Cuota")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnSaldo = Me.Columns("Saldo")
            Me.columnCapitalMora = Me.Columns("CapitalMora")
            Me.columnCategoria = Me.Columns("Categoria")
            Me.columnM30 = Me.Columns("M30")
            Me.columnM60 = Me.Columns("M60")
            Me.columnM90 = Me.Columns("M90")
            Me.columnMM90 = Me.Columns("MM90")
            Me.columnVencimiento = Me.Columns("Vencimiento")
            Me.columnMora = Me.Columns("Mora")
            Me.columnDiasMora = Me.Columns("DiasMora")
            Me.columnUltPago = Me.Columns("UltPago")
            Me.columnTasa = Me.Columns("Tasa")
            Me.columnPlazo = Me.Columns("Plazo")
            Me.columnNoCuotas = Me.Columns("NoCuotas")
            Me.columnMontoCxC = Me.Columns("MontoCxC")
            Me.columnSaldoCxC = Me.Columns("SaldoCxC")
            Me.columnMontoCDO = Me.Columns("MontoCDO")
            Me.columnSaldoCDO = Me.Columns("SaldoCDO")
        End Sub
        
        Private Sub InitClass()
            Me.columnDui = New DataColumn("Dui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDui)
            Me.columnNoSocio = New DataColumn("NoSocio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoSocio)
            Me.columnNombres = New DataColumn("Nombres", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombres)
            Me.columnTipoCredito = New DataColumn("TipoCredito", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCredito)
            Me.columnCodPrestamo = New DataColumn("CodPrestamo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodPrestamo)
            Me.columnFechaOtorgamiento = New DataColumn("FechaOtorgamiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaOtorgamiento)
            Me.columnFechaVencimiento = New DataColumn("FechaVencimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaVencimiento)
            Me.columnFechaUltimoMov = New DataColumn("FechaUltimoMov", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaUltimoMov)
            Me.columnCuota = New DataColumn("Cuota", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuota)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnSaldo = New DataColumn("Saldo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo)
            Me.columnCapitalMora = New DataColumn("CapitalMora", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCapitalMora)
            Me.columnCategoria = New DataColumn("Categoria", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCategoria)
            Me.columnM30 = New DataColumn("M30", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnM30)
            Me.columnM60 = New DataColumn("M60", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnM60)
            Me.columnM90 = New DataColumn("M90", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnM90)
            Me.columnMM90 = New DataColumn("MM90", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMM90)
            Me.columnVencimiento = New DataColumn("Vencimiento", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVencimiento)
            Me.columnMora = New DataColumn("Mora", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMora)
            Me.columnDiasMora = New DataColumn("DiasMora", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiasMora)
            Me.columnUltPago = New DataColumn("UltPago", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUltPago)
            Me.columnTasa = New DataColumn("Tasa", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTasa)
            Me.columnPlazo = New DataColumn("Plazo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlazo)
            Me.columnNoCuotas = New DataColumn("NoCuotas", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoCuotas)
            Me.columnMontoCxC = New DataColumn("MontoCxC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoCxC)
            Me.columnSaldoCxC = New DataColumn("SaldoCxC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoCxC)
            Me.columnMontoCDO = New DataColumn("MontoCDO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoCDO)
            Me.columnSaldoCDO = New DataColumn("SaldoCDO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoCDO)
        End Sub
        
        Public Function NewDatosRow() As DatosRow
            Return CType(Me.NewRow,DatosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DatosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosRowChanged(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosRowChanging(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleted(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleting(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDatosRow(ByVal row As DatosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRow
        Inherits DataRow
        
        Private tableDatos As DatosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatos = CType(Me.Table,DatosDataTable)
        End Sub
        
        Public Property Dui As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.DuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.DuiColumn) = value
            End Set
        End Property
        
        Public Property NoSocio As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoSocioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoSocioColumn) = value
            End Set
        End Property
        
        Public Property Nombres As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NombresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NombresColumn) = value
            End Set
        End Property
        
        Public Property TipoCredito As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TipoCreditoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TipoCreditoColumn) = value
            End Set
        End Property
        
        Public Property CodPrestamo As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CodPrestamoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CodPrestamoColumn) = value
            End Set
        End Property
        
        Public Property FechaOtorgamiento As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatos.FechaOtorgamientoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.FechaOtorgamientoColumn) = value
            End Set
        End Property
        
        Public Property FechaVencimiento As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatos.FechaVencimientoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.FechaVencimientoColumn) = value
            End Set
        End Property
        
        Public Property FechaUltimoMov As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatos.FechaUltimoMovColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.FechaUltimoMovColumn) = value
            End Set
        End Property
        
        Public Property Cuota As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CuotaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CuotaColumn) = value
            End Set
        End Property
        
        Public Property Monto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.MontoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.MontoColumn) = value
            End Set
        End Property
        
        Public Property Saldo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoColumn) = value
            End Set
        End Property
        
        Public Property CapitalMora As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CapitalMoraColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CapitalMoraColumn) = value
            End Set
        End Property
        
        Public Property Categoria As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CategoriaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CategoriaColumn) = value
            End Set
        End Property
        
        Public Property M30 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.M30Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.M30Column) = value
            End Set
        End Property
        
        Public Property M60 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.M60Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.M60Column) = value
            End Set
        End Property
        
        Public Property M90 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.M90Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.M90Column) = value
            End Set
        End Property
        
        Public Property MM90 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.MM90Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.MM90Column) = value
            End Set
        End Property
        
        Public Property Vencimiento As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.VencimientoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.VencimientoColumn) = value
            End Set
        End Property
        
        Public Property Mora As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.MoraColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.MoraColumn) = value
            End Set
        End Property
        
        Public Property DiasMora As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.DiasMoraColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.DiasMoraColumn) = value
            End Set
        End Property
        
        Public Property UltPago As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.UltPagoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.UltPagoColumn) = value
            End Set
        End Property
        
        Public Property Tasa As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TasaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TasaColumn) = value
            End Set
        End Property
        
        Public Property Plazo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.PlazoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.PlazoColumn) = value
            End Set
        End Property
        
        Public Property NoCuotas As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoCuotasColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoCuotasColumn) = value
            End Set
        End Property
        
        Public Property MontoCxC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.MontoCxCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.MontoCxCColumn) = value
            End Set
        End Property
        
        Public Property SaldoCxC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoCxCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoCxCColumn) = value
            End Set
        End Property
        
        Public Property MontoCDO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.MontoCDOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.MontoCDOColumn) = value
            End Set
        End Property
        
        Public Property SaldoCDO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoCDOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoCDOColumn) = value
            End Set
        End Property
        
        Public Function IsDuiNull() As Boolean
            Return Me.IsNull(Me.tableDatos.DuiColumn)
        End Function
        
        Public Sub SetDuiNull()
            Me(Me.tableDatos.DuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoSocioNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoSocioColumn)
        End Function
        
        Public Sub SetNoSocioNull()
            Me(Me.tableDatos.NoSocioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombresNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NombresColumn)
        End Function
        
        Public Sub SetNombresNull()
            Me(Me.tableDatos.NombresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoCreditoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TipoCreditoColumn)
        End Function
        
        Public Sub SetTipoCreditoNull()
            Me(Me.tableDatos.TipoCreditoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodPrestamoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CodPrestamoColumn)
        End Function
        
        Public Sub SetCodPrestamoNull()
            Me(Me.tableDatos.CodPrestamoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaOtorgamientoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.FechaOtorgamientoColumn)
        End Function
        
        Public Sub SetFechaOtorgamientoNull()
            Me(Me.tableDatos.FechaOtorgamientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaVencimientoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.FechaVencimientoColumn)
        End Function
        
        Public Sub SetFechaVencimientoNull()
            Me(Me.tableDatos.FechaVencimientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaUltimoMovNull() As Boolean
            Return Me.IsNull(Me.tableDatos.FechaUltimoMovColumn)
        End Function
        
        Public Sub SetFechaUltimoMovNull()
            Me(Me.tableDatos.FechaUltimoMovColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuotaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CuotaColumn)
        End Function
        
        Public Sub SetCuotaNull()
            Me(Me.tableDatos.CuotaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tableDatos.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoColumn)
        End Function
        
        Public Sub SetSaldoNull()
            Me(Me.tableDatos.SaldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCapitalMoraNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CapitalMoraColumn)
        End Function
        
        Public Sub SetCapitalMoraNull()
            Me(Me.tableDatos.CapitalMoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCategoriaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CategoriaColumn)
        End Function
        
        Public Sub SetCategoriaNull()
            Me(Me.tableDatos.CategoriaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsM30Null() As Boolean
            Return Me.IsNull(Me.tableDatos.M30Column)
        End Function
        
        Public Sub SetM30Null()
            Me(Me.tableDatos.M30Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsM60Null() As Boolean
            Return Me.IsNull(Me.tableDatos.M60Column)
        End Function
        
        Public Sub SetM60Null()
            Me(Me.tableDatos.M60Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsM90Null() As Boolean
            Return Me.IsNull(Me.tableDatos.M90Column)
        End Function
        
        Public Sub SetM90Null()
            Me(Me.tableDatos.M90Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMM90Null() As Boolean
            Return Me.IsNull(Me.tableDatos.MM90Column)
        End Function
        
        Public Sub SetMM90Null()
            Me(Me.tableDatos.MM90Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsVencimientoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.VencimientoColumn)
        End Function
        
        Public Sub SetVencimientoNull()
            Me(Me.tableDatos.VencimientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMoraNull() As Boolean
            Return Me.IsNull(Me.tableDatos.MoraColumn)
        End Function
        
        Public Sub SetMoraNull()
            Me(Me.tableDatos.MoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiasMoraNull() As Boolean
            Return Me.IsNull(Me.tableDatos.DiasMoraColumn)
        End Function
        
        Public Sub SetDiasMoraNull()
            Me(Me.tableDatos.DiasMoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUltPagoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.UltPagoColumn)
        End Function
        
        Public Sub SetUltPagoNull()
            Me(Me.tableDatos.UltPagoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTasaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TasaColumn)
        End Function
        
        Public Sub SetTasaNull()
            Me(Me.tableDatos.TasaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlazoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.PlazoColumn)
        End Function
        
        Public Sub SetPlazoNull()
            Me(Me.tableDatos.PlazoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoCuotasNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoCuotasColumn)
        End Function
        
        Public Sub SetNoCuotasNull()
            Me(Me.tableDatos.NoCuotasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoCxCNull() As Boolean
            Return Me.IsNull(Me.tableDatos.MontoCxCColumn)
        End Function
        
        Public Sub SetMontoCxCNull()
            Me(Me.tableDatos.MontoCxCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoCxCNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoCxCColumn)
        End Function
        
        Public Sub SetSaldoCxCNull()
            Me(Me.tableDatos.SaldoCxCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoCDONull() As Boolean
            Return Me.IsNull(Me.tableDatos.MontoCDOColumn)
        End Function
        
        Public Sub SetMontoCDONull()
            Me(Me.tableDatos.MontoCDOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoCDONull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoCDOColumn)
        End Function
        
        Public Sub SetSaldoCDONull()
            Me(Me.tableDatos.SaldoCDOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DatosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DatosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DatosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
