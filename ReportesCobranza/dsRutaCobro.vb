'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsRutaCobro
    Inherits DataSet
    
    Private tableReporte As ReporteDataTable
    
    Private tableDatos As DatosDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            If (Not (ds.Tables("Datos")) Is Nothing) Then
                Me.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte As ReporteDataTable
        Get
            Return Me.tableReporte
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Datos As DatosDataTable
        Get
            Return Me.tableDatos
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsRutaCobro = CType(MyBase.Clone,dsRutaCobro)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Reporte")) Is Nothing) Then
            Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
        End If
        If (Not (ds.Tables("Datos")) Is Nothing) Then
            Me.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableReporte = CType(Me.Tables("Reporte"),ReporteDataTable)
        If (Not (Me.tableReporte) Is Nothing) Then
            Me.tableReporte.InitVars
        End If
        Me.tableDatos = CType(Me.Tables("Datos"),DatosDataTable)
        If (Not (Me.tableDatos) Is Nothing) Then
            Me.tableDatos.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsRutaCobro"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRutaCobro.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableReporte = New ReporteDataTable
        Me.Tables.Add(Me.tableReporte)
        Me.tableDatos = New DatosDataTable
        Me.Tables.Add(Me.tableDatos)
    End Sub
    
    Private Function ShouldSerializeReporte() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDatos() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As ReporteRowChangeEvent)
    
    Public Delegate Sub DatosRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFecha As DataColumn
        
        Private columnEmpresa As DataColumn
        
        Private columnTitulo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnCodSucursal As DataColumn
        
        Private columnSucursal As DataColumn
        
        Friend Sub New()
            MyBase.New("Reporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property TituloColumn As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property CodSucursalColumn As DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        Friend ReadOnly Property SucursalColumn As DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReporteRow
            Get
                Return CType(Me.Rows(index),ReporteRow)
            End Get
        End Property
        
        Public Event ReporteRowChanged As ReporteRowChangeEventHandler
        
        Public Event ReporteRowChanging As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleted As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleting As ReporteRowChangeEventHandler
        
        Public Overloads Sub AddReporteRow(ByVal row As ReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReporteRow(ByVal Fecha As Date, ByVal Empresa As String, ByVal Titulo As String, ByVal Descripcion As String, ByVal CodSucursal As String, ByVal Sucursal As String) As ReporteRow
            Dim rowReporteRow As ReporteRow = CType(Me.NewRow,ReporteRow)
            rowReporteRow.ItemArray = New Object() {Fecha, Empresa, Titulo, Descripcion, CodSucursal, Sucursal}
            Me.Rows.Add(rowReporteRow)
            Return rowReporteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReporteDataTable = CType(MyBase.Clone,ReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnTitulo = Me.Columns("Titulo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnCodSucursal = Me.Columns("CodSucursal")
            Me.columnSucursal = Me.Columns("Sucursal")
        End Sub
        
        Private Sub InitClass()
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnTitulo = New DataColumn("Titulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitulo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnCodSucursal = New DataColumn("CodSucursal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodSucursal)
            Me.columnSucursal = New DataColumn("Sucursal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSucursal)
        End Sub
        
        Public Function NewReporteRow() As ReporteRow
            Return CType(Me.NewRow,ReporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanged(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanging(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleted(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleting(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReporteRow(ByVal row As ReporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRow
        Inherits DataRow
        
        Private tableReporte As ReporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte = CType(Me.Table,ReporteDataTable)
        End Sub
        
        Public Property Fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tableReporte.FechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.FechaColumn) = value
            End Set
        End Property
        
        Public Property Empresa As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.EmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Titulo As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TituloColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property CodSucursal As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.CodSucursalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.CodSucursalColumn) = value
            End Set
        End Property
        
        Public Property Sucursal As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.SucursalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.SucursalColumn) = value
            End Set
        End Property
        
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.FechaColumn)
        End Function
        
        Public Sub SetFechaNull()
            Me(Me.tableReporte.FechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.EmpresaColumn)
        End Function
        
        Public Sub SetEmpresaNull()
            Me(Me.tableReporte.EmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TituloColumn)
        End Function
        
        Public Sub SetTituloNull()
            Me(Me.tableReporte.TituloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableReporte.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.CodSucursalColumn)
        End Function
        
        Public Sub SetCodSucursalNull()
            Me(Me.tableReporte.CodSucursalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.SucursalColumn)
        End Function
        
        Public Sub SetSucursalNull()
            Me(Me.tableReporte.SucursalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDui As DataColumn
        
        Private columnNoSocio As DataColumn
        
        Private columnNombres As DataColumn
        
        Private columnCodPrestamo As DataColumn
        
        Private columnCuotaTotal As DataColumn
        
        Private columnFechaCuota As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnTelCasa As DataColumn
        
        Private columnTelOficina As DataColumn
        
        Private columnDiasMora As DataColumn
        
        Private columnTipoCartera As DataColumn
        
        Private columnSaldo_Capital As DataColumn
        
        Private columnSaldoDia_Interes As DataColumn
        
        Private columnSaldoDia_CapitalMora As DataColumn
        
        Private columnSaldoDia_InteresMora As DataColumn
        
        Private columnSaldoDia_SeguroDeuda As DataColumn
        
        Private columnSaldoDia_SeguroDaniosyLA As DataColumn
        
        Private columnSaldoDia_SeguroVida As DataColumn
        
        Private columnSaldoDia_SeguroDesempleo As DataColumn
        
        Private columnSaldoDia_Aportacion As DataColumn
        
        Private columnSaldoDia_Ahorro As DataColumn
        
        Private columnSaldoDia_ComisionManejo As DataColumn
        
        Private columnSaldoDia_Otros As DataColumn
        
        Friend Sub New()
            MyBase.New("Datos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DuiColumn As DataColumn
            Get
                Return Me.columnDui
            End Get
        End Property
        
        Friend ReadOnly Property NoSocioColumn As DataColumn
            Get
                Return Me.columnNoSocio
            End Get
        End Property
        
        Friend ReadOnly Property NombresColumn As DataColumn
            Get
                Return Me.columnNombres
            End Get
        End Property
        
        Friend ReadOnly Property CodPrestamoColumn As DataColumn
            Get
                Return Me.columnCodPrestamo
            End Get
        End Property
        
        Friend ReadOnly Property CuotaTotalColumn As DataColumn
            Get
                Return Me.columnCuotaTotal
            End Get
        End Property
        
        Friend ReadOnly Property FechaCuotaColumn As DataColumn
            Get
                Return Me.columnFechaCuota
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property TelCasaColumn As DataColumn
            Get
                Return Me.columnTelCasa
            End Get
        End Property
        
        Friend ReadOnly Property TelOficinaColumn As DataColumn
            Get
                Return Me.columnTelOficina
            End Get
        End Property
        
        Friend ReadOnly Property DiasMoraColumn As DataColumn
            Get
                Return Me.columnDiasMora
            End Get
        End Property
        
        Friend ReadOnly Property TipoCarteraColumn As DataColumn
            Get
                Return Me.columnTipoCartera
            End Get
        End Property
        
        Friend ReadOnly Property Saldo_CapitalColumn As DataColumn
            Get
                Return Me.columnSaldo_Capital
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_InteresColumn As DataColumn
            Get
                Return Me.columnSaldoDia_Interes
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_CapitalMoraColumn As DataColumn
            Get
                Return Me.columnSaldoDia_CapitalMora
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_InteresMoraColumn As DataColumn
            Get
                Return Me.columnSaldoDia_InteresMora
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_SeguroDeudaColumn As DataColumn
            Get
                Return Me.columnSaldoDia_SeguroDeuda
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_SeguroDaniosyLAColumn As DataColumn
            Get
                Return Me.columnSaldoDia_SeguroDaniosyLA
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_SeguroVidaColumn As DataColumn
            Get
                Return Me.columnSaldoDia_SeguroVida
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_SeguroDesempleoColumn As DataColumn
            Get
                Return Me.columnSaldoDia_SeguroDesempleo
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_AportacionColumn As DataColumn
            Get
                Return Me.columnSaldoDia_Aportacion
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_AhorroColumn As DataColumn
            Get
                Return Me.columnSaldoDia_Ahorro
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_ComisionManejoColumn As DataColumn
            Get
                Return Me.columnSaldoDia_ComisionManejo
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_OtrosColumn As DataColumn
            Get
                Return Me.columnSaldoDia_Otros
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosRow
            Get
                Return CType(Me.Rows(index),DatosRow)
            End Get
        End Property
        
        Public Event DatosRowChanged As DatosRowChangeEventHandler
        
        Public Event DatosRowChanging As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleted As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleting As DatosRowChangeEventHandler
        
        Public Overloads Sub AddDatosRow(ByVal row As DatosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDatosRow( _
                    ByVal Dui As String,  _
                    ByVal NoSocio As String,  _
                    ByVal Nombres As String,  _
                    ByVal CodPrestamo As String,  _
                    ByVal CuotaTotal As Decimal,  _
                    ByVal FechaCuota As Date,  _
                    ByVal Direccion As String,  _
                    ByVal TelCasa As String,  _
                    ByVal TelOficina As String,  _
                    ByVal DiasMora As Integer,  _
                    ByVal TipoCartera As String,  _
                    ByVal Saldo_Capital As Decimal,  _
                    ByVal SaldoDia_Interes As Decimal,  _
                    ByVal SaldoDia_CapitalMora As Decimal,  _
                    ByVal SaldoDia_InteresMora As Decimal,  _
                    ByVal SaldoDia_SeguroDeuda As Decimal,  _
                    ByVal SaldoDia_SeguroDaniosyLA As Decimal,  _
                    ByVal SaldoDia_SeguroVida As Decimal,  _
                    ByVal SaldoDia_SeguroDesempleo As Decimal,  _
                    ByVal SaldoDia_Aportacion As Decimal,  _
                    ByVal SaldoDia_Ahorro As Decimal,  _
                    ByVal SaldoDia_ComisionManejo As Decimal,  _
                    ByVal SaldoDia_Otros As Decimal) As DatosRow
            Dim rowDatosRow As DatosRow = CType(Me.NewRow,DatosRow)
            rowDatosRow.ItemArray = New Object() {Dui, NoSocio, Nombres, CodPrestamo, CuotaTotal, FechaCuota, Direccion, TelCasa, TelOficina, DiasMora, TipoCartera, Saldo_Capital, SaldoDia_Interes, SaldoDia_CapitalMora, SaldoDia_InteresMora, SaldoDia_SeguroDeuda, SaldoDia_SeguroDaniosyLA, SaldoDia_SeguroVida, SaldoDia_SeguroDesempleo, SaldoDia_Aportacion, SaldoDia_Ahorro, SaldoDia_ComisionManejo, SaldoDia_Otros}
            Me.Rows.Add(rowDatosRow)
            Return rowDatosRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DatosDataTable = CType(MyBase.Clone,DatosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DatosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDui = Me.Columns("Dui")
            Me.columnNoSocio = Me.Columns("NoSocio")
            Me.columnNombres = Me.Columns("Nombres")
            Me.columnCodPrestamo = Me.Columns("CodPrestamo")
            Me.columnCuotaTotal = Me.Columns("CuotaTotal")
            Me.columnFechaCuota = Me.Columns("FechaCuota")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnTelCasa = Me.Columns("TelCasa")
            Me.columnTelOficina = Me.Columns("TelOficina")
            Me.columnDiasMora = Me.Columns("DiasMora")
            Me.columnTipoCartera = Me.Columns("TipoCartera")
            Me.columnSaldo_Capital = Me.Columns("Saldo_Capital")
            Me.columnSaldoDia_Interes = Me.Columns("SaldoDia_Interes")
            Me.columnSaldoDia_CapitalMora = Me.Columns("SaldoDia_CapitalMora")
            Me.columnSaldoDia_InteresMora = Me.Columns("SaldoDia_InteresMora")
            Me.columnSaldoDia_SeguroDeuda = Me.Columns("SaldoDia_SeguroDeuda")
            Me.columnSaldoDia_SeguroDaniosyLA = Me.Columns("SaldoDia_SeguroDaniosyLA")
            Me.columnSaldoDia_SeguroVida = Me.Columns("SaldoDia_SeguroVida")
            Me.columnSaldoDia_SeguroDesempleo = Me.Columns("SaldoDia_SeguroDesempleo")
            Me.columnSaldoDia_Aportacion = Me.Columns("SaldoDia_Aportacion")
            Me.columnSaldoDia_Ahorro = Me.Columns("SaldoDia_Ahorro")
            Me.columnSaldoDia_ComisionManejo = Me.Columns("SaldoDia_ComisionManejo")
            Me.columnSaldoDia_Otros = Me.Columns("SaldoDia_Otros")
        End Sub
        
        Private Sub InitClass()
            Me.columnDui = New DataColumn("Dui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDui)
            Me.columnNoSocio = New DataColumn("NoSocio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoSocio)
            Me.columnNombres = New DataColumn("Nombres", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombres)
            Me.columnCodPrestamo = New DataColumn("CodPrestamo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodPrestamo)
            Me.columnCuotaTotal = New DataColumn("CuotaTotal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuotaTotal)
            Me.columnFechaCuota = New DataColumn("FechaCuota", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaCuota)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnTelCasa = New DataColumn("TelCasa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelCasa)
            Me.columnTelOficina = New DataColumn("TelOficina", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelOficina)
            Me.columnDiasMora = New DataColumn("DiasMora", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiasMora)
            Me.columnTipoCartera = New DataColumn("TipoCartera", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCartera)
            Me.columnSaldo_Capital = New DataColumn("Saldo_Capital", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo_Capital)
            Me.columnSaldoDia_Interes = New DataColumn("SaldoDia_Interes", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_Interes)
            Me.columnSaldoDia_CapitalMora = New DataColumn("SaldoDia_CapitalMora", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_CapitalMora)
            Me.columnSaldoDia_InteresMora = New DataColumn("SaldoDia_InteresMora", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_InteresMora)
            Me.columnSaldoDia_SeguroDeuda = New DataColumn("SaldoDia_SeguroDeuda", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_SeguroDeuda)
            Me.columnSaldoDia_SeguroDaniosyLA = New DataColumn("SaldoDia_SeguroDaniosyLA", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_SeguroDaniosyLA)
            Me.columnSaldoDia_SeguroVida = New DataColumn("SaldoDia_SeguroVida", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_SeguroVida)
            Me.columnSaldoDia_SeguroDesempleo = New DataColumn("SaldoDia_SeguroDesempleo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_SeguroDesempleo)
            Me.columnSaldoDia_Aportacion = New DataColumn("SaldoDia_Aportacion", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_Aportacion)
            Me.columnSaldoDia_Ahorro = New DataColumn("SaldoDia_Ahorro", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_Ahorro)
            Me.columnSaldoDia_ComisionManejo = New DataColumn("SaldoDia_ComisionManejo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_ComisionManejo)
            Me.columnSaldoDia_Otros = New DataColumn("SaldoDia_Otros", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_Otros)
        End Sub
        
        Public Function NewDatosRow() As DatosRow
            Return CType(Me.NewRow,DatosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DatosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosRowChanged(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosRowChanging(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleted(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleting(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDatosRow(ByVal row As DatosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRow
        Inherits DataRow
        
        Private tableDatos As DatosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatos = CType(Me.Table,DatosDataTable)
        End Sub
        
        Public Property Dui As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.DuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.DuiColumn) = value
            End Set
        End Property
        
        Public Property NoSocio As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoSocioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoSocioColumn) = value
            End Set
        End Property
        
        Public Property Nombres As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NombresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NombresColumn) = value
            End Set
        End Property
        
        Public Property CodPrestamo As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CodPrestamoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CodPrestamoColumn) = value
            End Set
        End Property
        
        Public Property CuotaTotal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CuotaTotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CuotaTotalColumn) = value
            End Set
        End Property
        
        Public Property FechaCuota As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatos.FechaCuotaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.FechaCuotaColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.DireccionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.DireccionColumn) = value
            End Set
        End Property
        
        Public Property TelCasa As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TelCasaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TelCasaColumn) = value
            End Set
        End Property
        
        Public Property TelOficina As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TelOficinaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TelOficinaColumn) = value
            End Set
        End Property
        
        Public Property DiasMora As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.DiasMoraColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.DiasMoraColumn) = value
            End Set
        End Property
        
        Public Property TipoCartera As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TipoCarteraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TipoCarteraColumn) = value
            End Set
        End Property
        
        Public Property Saldo_Capital As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Saldo_CapitalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Saldo_CapitalColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_Interes As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_InteresColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_InteresColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_CapitalMora As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_CapitalMoraColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_CapitalMoraColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_InteresMora As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_InteresMoraColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_InteresMoraColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_SeguroDeuda As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_SeguroDeudaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_SeguroDeudaColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_SeguroDaniosyLA As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_SeguroDaniosyLAColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_SeguroDaniosyLAColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_SeguroVida As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_SeguroVidaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_SeguroVidaColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_SeguroDesempleo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_SeguroDesempleoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_SeguroDesempleoColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_Aportacion As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_AportacionColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_AportacionColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_Ahorro As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_AhorroColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_AhorroColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_ComisionManejo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_ComisionManejoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_ComisionManejoColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_Otros As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoDia_OtrosColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoDia_OtrosColumn) = value
            End Set
        End Property
        
        Public Function IsDuiNull() As Boolean
            Return Me.IsNull(Me.tableDatos.DuiColumn)
        End Function
        
        Public Sub SetDuiNull()
            Me(Me.tableDatos.DuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoSocioNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoSocioColumn)
        End Function
        
        Public Sub SetNoSocioNull()
            Me(Me.tableDatos.NoSocioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombresNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NombresColumn)
        End Function
        
        Public Sub SetNombresNull()
            Me(Me.tableDatos.NombresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodPrestamoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CodPrestamoColumn)
        End Function
        
        Public Sub SetCodPrestamoNull()
            Me(Me.tableDatos.CodPrestamoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuotaTotalNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CuotaTotalColumn)
        End Function
        
        Public Sub SetCuotaTotalNull()
            Me(Me.tableDatos.CuotaTotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaCuotaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.FechaCuotaColumn)
        End Function
        
        Public Sub SetFechaCuotaNull()
            Me(Me.tableDatos.FechaCuotaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableDatos.DireccionColumn)
        End Function
        
        Public Sub SetDireccionNull()
            Me(Me.tableDatos.DireccionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelCasaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TelCasaColumn)
        End Function
        
        Public Sub SetTelCasaNull()
            Me(Me.tableDatos.TelCasaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelOficinaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TelOficinaColumn)
        End Function
        
        Public Sub SetTelOficinaNull()
            Me(Me.tableDatos.TelOficinaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiasMoraNull() As Boolean
            Return Me.IsNull(Me.tableDatos.DiasMoraColumn)
        End Function
        
        Public Sub SetDiasMoraNull()
            Me(Me.tableDatos.DiasMoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoCarteraNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TipoCarteraColumn)
        End Function
        
        Public Sub SetTipoCarteraNull()
            Me(Me.tableDatos.TipoCarteraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldo_CapitalNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Saldo_CapitalColumn)
        End Function
        
        Public Sub SetSaldo_CapitalNull()
            Me(Me.tableDatos.Saldo_CapitalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_InteresNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_InteresColumn)
        End Function
        
        Public Sub SetSaldoDia_InteresNull()
            Me(Me.tableDatos.SaldoDia_InteresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_CapitalMoraNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_CapitalMoraColumn)
        End Function
        
        Public Sub SetSaldoDia_CapitalMoraNull()
            Me(Me.tableDatos.SaldoDia_CapitalMoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_InteresMoraNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_InteresMoraColumn)
        End Function
        
        Public Sub SetSaldoDia_InteresMoraNull()
            Me(Me.tableDatos.SaldoDia_InteresMoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_SeguroDeudaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_SeguroDeudaColumn)
        End Function
        
        Public Sub SetSaldoDia_SeguroDeudaNull()
            Me(Me.tableDatos.SaldoDia_SeguroDeudaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_SeguroDaniosyLANull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_SeguroDaniosyLAColumn)
        End Function
        
        Public Sub SetSaldoDia_SeguroDaniosyLANull()
            Me(Me.tableDatos.SaldoDia_SeguroDaniosyLAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_SeguroVidaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_SeguroVidaColumn)
        End Function
        
        Public Sub SetSaldoDia_SeguroVidaNull()
            Me(Me.tableDatos.SaldoDia_SeguroVidaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_SeguroDesempleoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_SeguroDesempleoColumn)
        End Function
        
        Public Sub SetSaldoDia_SeguroDesempleoNull()
            Me(Me.tableDatos.SaldoDia_SeguroDesempleoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_AportacionNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_AportacionColumn)
        End Function
        
        Public Sub SetSaldoDia_AportacionNull()
            Me(Me.tableDatos.SaldoDia_AportacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_AhorroNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_AhorroColumn)
        End Function
        
        Public Sub SetSaldoDia_AhorroNull()
            Me(Me.tableDatos.SaldoDia_AhorroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_ComisionManejoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_ComisionManejoColumn)
        End Function
        
        Public Sub SetSaldoDia_ComisionManejoNull()
            Me(Me.tableDatos.SaldoDia_ComisionManejoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_OtrosNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoDia_OtrosColumn)
        End Function
        
        Public Sub SetSaldoDia_OtrosNull()
            Me(Me.tableDatos.SaldoDia_OtrosColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DatosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DatosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DatosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
