'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsMora_Detallada
    Inherits DataSet
    
    Private tableReporte As ReporteDataTable
    
    Private tableDatos As DatosDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Reporte")) Is Nothing) Then
                Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
            End If
            If (Not (ds.Tables("Datos")) Is Nothing) Then
                Me.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte As ReporteDataTable
        Get
            Return Me.tableReporte
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Datos As DatosDataTable
        Get
            Return Me.tableDatos
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsMora_Detallada = CType(MyBase.Clone,dsMora_Detallada)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Reporte")) Is Nothing) Then
            Me.Tables.Add(New ReporteDataTable(ds.Tables("Reporte")))
        End If
        If (Not (ds.Tables("Datos")) Is Nothing) Then
            Me.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableReporte = CType(Me.Tables("Reporte"),ReporteDataTable)
        If (Not (Me.tableReporte) Is Nothing) Then
            Me.tableReporte.InitVars
        End If
        Me.tableDatos = CType(Me.Tables("Datos"),DatosDataTable)
        If (Not (Me.tableDatos) Is Nothing) Then
            Me.tableDatos.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsMora_Detallada"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsMora_Detallada.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableReporte = New ReporteDataTable
        Me.Tables.Add(Me.tableReporte)
        Me.tableDatos = New DatosDataTable
        Me.Tables.Add(Me.tableDatos)
    End Sub
    
    Private Function ShouldSerializeReporte() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDatos() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As ReporteRowChangeEvent)
    
    Public Delegate Sub DatosRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFecha As DataColumn
        
        Private columnEmpresa As DataColumn
        
        Private columnTitulo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnCodSucursal As DataColumn
        
        Private columnSucursal As DataColumn
        
        Friend Sub New()
            MyBase.New("Reporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property TituloColumn As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property CodSucursalColumn As DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        Friend ReadOnly Property SucursalColumn As DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReporteRow
            Get
                Return CType(Me.Rows(index),ReporteRow)
            End Get
        End Property
        
        Public Event ReporteRowChanged As ReporteRowChangeEventHandler
        
        Public Event ReporteRowChanging As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleted As ReporteRowChangeEventHandler
        
        Public Event ReporteRowDeleting As ReporteRowChangeEventHandler
        
        Public Overloads Sub AddReporteRow(ByVal row As ReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReporteRow(ByVal Fecha As Date, ByVal Empresa As String, ByVal Titulo As String, ByVal Descripcion As String, ByVal CodSucursal As String, ByVal Sucursal As String) As ReporteRow
            Dim rowReporteRow As ReporteRow = CType(Me.NewRow,ReporteRow)
            rowReporteRow.ItemArray = New Object() {Fecha, Empresa, Titulo, Descripcion, CodSucursal, Sucursal}
            Me.Rows.Add(rowReporteRow)
            Return rowReporteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReporteDataTable = CType(MyBase.Clone,ReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnTitulo = Me.Columns("Titulo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnCodSucursal = Me.Columns("CodSucursal")
            Me.columnSucursal = Me.Columns("Sucursal")
        End Sub
        
        Private Sub InitClass()
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnTitulo = New DataColumn("Titulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitulo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnCodSucursal = New DataColumn("CodSucursal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodSucursal)
            Me.columnSucursal = New DataColumn("Sucursal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSucursal)
        End Sub
        
        Public Function NewReporteRow() As ReporteRow
            Return CType(Me.NewRow,ReporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanged(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent ReporteRowChanging(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleted(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReporteRowDeleting(Me, New ReporteRowChangeEvent(CType(e.Row,ReporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReporteRow(ByVal row As ReporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRow
        Inherits DataRow
        
        Private tableReporte As ReporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte = CType(Me.Table,ReporteDataTable)
        End Sub
        
        Public Property Fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tableReporte.FechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.FechaColumn) = value
            End Set
        End Property
        
        Public Property Empresa As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.EmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Titulo As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.TituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.TituloColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property CodSucursal As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.CodSucursalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.CodSucursalColumn) = value
            End Set
        End Property
        
        Public Property Sucursal As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte.SucursalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte.SucursalColumn) = value
            End Set
        End Property
        
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.FechaColumn)
        End Function
        
        Public Sub SetFechaNull()
            Me(Me.tableReporte.FechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableReporte.EmpresaColumn)
        End Function
        
        Public Sub SetEmpresaNull()
            Me(Me.tableReporte.EmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableReporte.TituloColumn)
        End Function
        
        Public Sub SetTituloNull()
            Me(Me.tableReporte.TituloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableReporte.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.CodSucursalColumn)
        End Function
        
        Public Sub SetCodSucursalNull()
            Me(Me.tableReporte.CodSucursalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableReporte.SucursalColumn)
        End Function
        
        Public Sub SetSucursalNull()
            Me(Me.tableReporte.SucursalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCorr As DataColumn
        
        Private columnDui As DataColumn
        
        Private columnNoSocio As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnNombreAsociado As DataColumn
        
        Private columnCuenta As DataColumn
        
        Private columnApertura As DataColumn
        
        Private columnVencimiento As DataColumn
        
        Private columnFechaUltima As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnSaldo As DataColumn
        
        Private columnCuotas As DataColumn
        
        Private column_Tasa_ As DataColumn
        
        Private columnNoCuotas As DataColumn
        
        Private columnPlaza As DataColumn
        
        Private column_30Dias As DataColumn
        
        Private column_60Dias As DataColumn
        
        Private column_90Dias As DataColumn
        
        Private columnM90Dias As DataColumn
        
        Private columnSaldoTeo As DataColumn
        
        Private columnGarantia As DataColumn
        
        Private columnColector As DataColumn
        
        Private columnEjecutivo As DataColumn
        
        Friend Sub New()
            MyBase.New("Datos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CorrColumn As DataColumn
            Get
                Return Me.columnCorr
            End Get
        End Property
        
        Friend ReadOnly Property DuiColumn As DataColumn
            Get
                Return Me.columnDui
            End Get
        End Property
        
        Friend ReadOnly Property NoSocioColumn As DataColumn
            Get
                Return Me.columnNoSocio
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property NombreAsociadoColumn As DataColumn
            Get
                Return Me.columnNombreAsociado
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property AperturaColumn As DataColumn
            Get
                Return Me.columnApertura
            End Get
        End Property
        
        Friend ReadOnly Property VencimientoColumn As DataColumn
            Get
                Return Me.columnVencimiento
            End Get
        End Property
        
        Friend ReadOnly Property FechaUltimaColumn As DataColumn
            Get
                Return Me.columnFechaUltima
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property SaldoColumn As DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        Friend ReadOnly Property CuotasColumn As DataColumn
            Get
                Return Me.columnCuotas
            End Get
        End Property
        
        Friend ReadOnly Property _Tasa_Column As DataColumn
            Get
                Return Me.column_Tasa_
            End Get
        End Property
        
        Friend ReadOnly Property NoCuotasColumn As DataColumn
            Get
                Return Me.columnNoCuotas
            End Get
        End Property
        
        Friend ReadOnly Property PlazaColumn As DataColumn
            Get
                Return Me.columnPlaza
            End Get
        End Property
        
        Friend ReadOnly Property _30DiasColumn As DataColumn
            Get
                Return Me.column_30Dias
            End Get
        End Property
        
        Friend ReadOnly Property _60DiasColumn As DataColumn
            Get
                Return Me.column_60Dias
            End Get
        End Property
        
        Friend ReadOnly Property _90DiasColumn As DataColumn
            Get
                Return Me.column_90Dias
            End Get
        End Property
        
        Friend ReadOnly Property M90DiasColumn As DataColumn
            Get
                Return Me.columnM90Dias
            End Get
        End Property
        
        Friend ReadOnly Property SaldoTeoColumn As DataColumn
            Get
                Return Me.columnSaldoTeo
            End Get
        End Property
        
        Friend ReadOnly Property GarantiaColumn As DataColumn
            Get
                Return Me.columnGarantia
            End Get
        End Property
        
        Friend ReadOnly Property ColectorColumn As DataColumn
            Get
                Return Me.columnColector
            End Get
        End Property
        
        Friend ReadOnly Property EjecutivoColumn As DataColumn
            Get
                Return Me.columnEjecutivo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosRow
            Get
                Return CType(Me.Rows(index),DatosRow)
            End Get
        End Property
        
        Public Event DatosRowChanged As DatosRowChangeEventHandler
        
        Public Event DatosRowChanging As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleted As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleting As DatosRowChangeEventHandler
        
        Public Overloads Sub AddDatosRow(ByVal row As DatosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDatosRow( _
                    ByVal Corr As Integer,  _
                    ByVal Dui As String,  _
                    ByVal NoSocio As String,  _
                    ByVal Codigo As String,  _
                    ByVal NombreAsociado As String,  _
                    ByVal Cuenta As String,  _
                    ByVal Apertura As Decimal,  _
                    ByVal Vencimiento As Date,  _
                    ByVal FechaUltima As Date,  _
                    ByVal Monto As Decimal,  _
                    ByVal Saldo As Decimal,  _
                    ByVal Cuotas As Integer,  _
                    ByVal _Tasa_ As Decimal,  _
                    ByVal NoCuotas As Integer,  _
                    ByVal Plaza As Integer,  _
                    ByVal _30Dias As String,  _
                    ByVal _60Dias As String,  _
                    ByVal _90Dias As String,  _
                    ByVal M90Dias As String,  _
                    ByVal SaldoTeo As Decimal,  _
                    ByVal Garantia As Integer,  _
                    ByVal Colector As String,  _
                    ByVal Ejecutivo As String) As DatosRow
            Dim rowDatosRow As DatosRow = CType(Me.NewRow,DatosRow)
            rowDatosRow.ItemArray = New Object() {Corr, Dui, NoSocio, Codigo, NombreAsociado, Cuenta, Apertura, Vencimiento, FechaUltima, Monto, Saldo, Cuotas, _Tasa_, NoCuotas, Plaza, _30Dias, _60Dias, _90Dias, M90Dias, SaldoTeo, Garantia, Colector, Ejecutivo}
            Me.Rows.Add(rowDatosRow)
            Return rowDatosRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DatosDataTable = CType(MyBase.Clone,DatosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DatosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCorr = Me.Columns("Corr")
            Me.columnDui = Me.Columns("Dui")
            Me.columnNoSocio = Me.Columns("NoSocio")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnNombreAsociado = Me.Columns("NombreAsociado")
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnApertura = Me.Columns("Apertura")
            Me.columnVencimiento = Me.Columns("Vencimiento")
            Me.columnFechaUltima = Me.Columns("FechaUltima")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnSaldo = Me.Columns("Saldo")
            Me.columnCuotas = Me.Columns("Cuotas")
            Me.column_Tasa_ = Me.Columns("Tasa%")
            Me.columnNoCuotas = Me.Columns("NoCuotas")
            Me.columnPlaza = Me.Columns("Plaza")
            Me.column_30Dias = Me.Columns("30Dias")
            Me.column_60Dias = Me.Columns("60Dias")
            Me.column_90Dias = Me.Columns("90Dias")
            Me.columnM90Dias = Me.Columns("M90Dias")
            Me.columnSaldoTeo = Me.Columns("SaldoTeo")
            Me.columnGarantia = Me.Columns("Garantia")
            Me.columnColector = Me.Columns("Colector")
            Me.columnEjecutivo = Me.Columns("Ejecutivo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCorr = New DataColumn("Corr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorr)
            Me.columnDui = New DataColumn("Dui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDui)
            Me.columnNoSocio = New DataColumn("NoSocio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoSocio)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnNombreAsociado = New DataColumn("NombreAsociado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreAsociado)
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnApertura = New DataColumn("Apertura", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApertura)
            Me.columnVencimiento = New DataColumn("Vencimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVencimiento)
            Me.columnFechaUltima = New DataColumn("FechaUltima", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaUltima)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnSaldo = New DataColumn("Saldo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo)
            Me.columnCuotas = New DataColumn("Cuotas", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuotas)
            Me.column_Tasa_ = New DataColumn("Tasa%", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Tasa_)
            Me.columnNoCuotas = New DataColumn("NoCuotas", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoCuotas)
            Me.columnPlaza = New DataColumn("Plaza", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlaza)
            Me.column_30Dias = New DataColumn("30Dias", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_30Dias)
            Me.column_60Dias = New DataColumn("60Dias", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_60Dias)
            Me.column_90Dias = New DataColumn("90Dias", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_90Dias)
            Me.columnM90Dias = New DataColumn("M90Dias", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnM90Dias)
            Me.columnSaldoTeo = New DataColumn("SaldoTeo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoTeo)
            Me.columnGarantia = New DataColumn("Garantia", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGarantia)
            Me.columnColector = New DataColumn("Colector", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnColector)
            Me.columnEjecutivo = New DataColumn("Ejecutivo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEjecutivo)
        End Sub
        
        Public Function NewDatosRow() As DatosRow
            Return CType(Me.NewRow,DatosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DatosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosRowChanged(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosRowChanging(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleted(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleting(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDatosRow(ByVal row As DatosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRow
        Inherits DataRow
        
        Private tableDatos As DatosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatos = CType(Me.Table,DatosDataTable)
        End Sub
        
        Public Property Corr As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CorrColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CorrColumn) = value
            End Set
        End Property
        
        Public Property Dui As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.DuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.DuiColumn) = value
            End Set
        End Property
        
        Public Property NoSocio As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoSocioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoSocioColumn) = value
            End Set
        End Property
        
        Public Property Codigo As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CodigoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CodigoColumn) = value
            End Set
        End Property
        
        Public Property NombreAsociado As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NombreAsociadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NombreAsociadoColumn) = value
            End Set
        End Property
        
        Public Property Cuenta As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CuentaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CuentaColumn) = value
            End Set
        End Property
        
        Public Property Apertura As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.AperturaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.AperturaColumn) = value
            End Set
        End Property
        
        Public Property Vencimiento As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatos.VencimientoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.VencimientoColumn) = value
            End Set
        End Property
        
        Public Property FechaUltima As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatos.FechaUltimaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.FechaUltimaColumn) = value
            End Set
        End Property
        
        Public Property Monto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.MontoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.MontoColumn) = value
            End Set
        End Property
        
        Public Property Saldo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoColumn) = value
            End Set
        End Property
        
        Public Property Cuotas As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CuotasColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CuotasColumn) = value
            End Set
        End Property
        
        Public Property _Tasa_ As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Tasa_Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Tasa_Column) = value
            End Set
        End Property
        
        Public Property NoCuotas As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NoCuotasColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NoCuotasColumn) = value
            End Set
        End Property
        
        Public Property Plaza As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.PlazaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.PlazaColumn) = value
            End Set
        End Property
        
        Public Property _30Dias As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos._30DiasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._30DiasColumn) = value
            End Set
        End Property
        
        Public Property _60Dias As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos._60DiasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._60DiasColumn) = value
            End Set
        End Property
        
        Public Property _90Dias As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos._90DiasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._90DiasColumn) = value
            End Set
        End Property
        
        Public Property M90Dias As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.M90DiasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.M90DiasColumn) = value
            End Set
        End Property
        
        Public Property SaldoTeo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SaldoTeoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SaldoTeoColumn) = value
            End Set
        End Property
        
        Public Property Garantia As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.GarantiaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.GarantiaColumn) = value
            End Set
        End Property
        
        Public Property Colector As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.ColectorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.ColectorColumn) = value
            End Set
        End Property
        
        Public Property Ejecutivo As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.EjecutivoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.EjecutivoColumn) = value
            End Set
        End Property
        
        Public Function IsCorrNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CorrColumn)
        End Function
        
        Public Sub SetCorrNull()
            Me(Me.tableDatos.CorrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDuiNull() As Boolean
            Return Me.IsNull(Me.tableDatos.DuiColumn)
        End Function
        
        Public Sub SetDuiNull()
            Me(Me.tableDatos.DuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoSocioNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoSocioColumn)
        End Function
        
        Public Sub SetNoSocioNull()
            Me(Me.tableDatos.NoSocioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CodigoColumn)
        End Function
        
        Public Sub SetCodigoNull()
            Me(Me.tableDatos.CodigoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombreAsociadoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NombreAsociadoColumn)
        End Function
        
        Public Sub SetNombreAsociadoNull()
            Me(Me.tableDatos.NombreAsociadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CuentaColumn)
        End Function
        
        Public Sub SetCuentaNull()
            Me(Me.tableDatos.CuentaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAperturaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.AperturaColumn)
        End Function
        
        Public Sub SetAperturaNull()
            Me(Me.tableDatos.AperturaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVencimientoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.VencimientoColumn)
        End Function
        
        Public Sub SetVencimientoNull()
            Me(Me.tableDatos.VencimientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaUltimaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.FechaUltimaColumn)
        End Function
        
        Public Sub SetFechaUltimaNull()
            Me(Me.tableDatos.FechaUltimaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tableDatos.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoColumn)
        End Function
        
        Public Sub SetSaldoNull()
            Me(Me.tableDatos.SaldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuotasNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CuotasColumn)
        End Function
        
        Public Sub SetCuotasNull()
            Me(Me.tableDatos.CuotasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_Tasa_Null() As Boolean
            Return Me.IsNull(Me.tableDatos._Tasa_Column)
        End Function
        
        Public Sub Set_Tasa_Null()
            Me(Me.tableDatos._Tasa_Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoCuotasNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NoCuotasColumn)
        End Function
        
        Public Sub SetNoCuotasNull()
            Me(Me.tableDatos.NoCuotasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlazaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.PlazaColumn)
        End Function
        
        Public Sub SetPlazaNull()
            Me(Me.tableDatos.PlazaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_30DiasNull() As Boolean
            Return Me.IsNull(Me.tableDatos._30DiasColumn)
        End Function
        
        Public Sub Set_30DiasNull()
            Me(Me.tableDatos._30DiasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_60DiasNull() As Boolean
            Return Me.IsNull(Me.tableDatos._60DiasColumn)
        End Function
        
        Public Sub Set_60DiasNull()
            Me(Me.tableDatos._60DiasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_90DiasNull() As Boolean
            Return Me.IsNull(Me.tableDatos._90DiasColumn)
        End Function
        
        Public Sub Set_90DiasNull()
            Me(Me.tableDatos._90DiasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsM90DiasNull() As Boolean
            Return Me.IsNull(Me.tableDatos.M90DiasColumn)
        End Function
        
        Public Sub SetM90DiasNull()
            Me(Me.tableDatos.M90DiasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoTeoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SaldoTeoColumn)
        End Function
        
        Public Sub SetSaldoTeoNull()
            Me(Me.tableDatos.SaldoTeoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGarantiaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.GarantiaColumn)
        End Function
        
        Public Sub SetGarantiaNull()
            Me(Me.tableDatos.GarantiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsColectorNull() As Boolean
            Return Me.IsNull(Me.tableDatos.ColectorColumn)
        End Function
        
        Public Sub SetColectorNull()
            Me(Me.tableDatos.ColectorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEjecutivoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.EjecutivoColumn)
        End Function
        
        Public Sub SetEjecutivoNull()
            Me(Me.tableDatos.EjecutivoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DatosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DatosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DatosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DatosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
