'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsDocsXCobrar
    Inherits DataSet
    
    Private tablePRPrestamos As PRPrestamosDataTable
    
    Private tableCAT_ASOCIADOS As CAT_ASOCIADOSDataTable
    
    Private tablePRReporte As PRReporteDataTable
    
    Private relationCAT_ASOCIADOSPRPrestamos As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PRPrestamos")) Is Nothing) Then
                Me.Tables.Add(New PRPrestamosDataTable(ds.Tables("PRPrestamos")))
            End If
            If (Not (ds.Tables("CAT_ASOCIADOS")) Is Nothing) Then
                Me.Tables.Add(New CAT_ASOCIADOSDataTable(ds.Tables("CAT_ASOCIADOS")))
            End If
            If (Not (ds.Tables("PRReporte")) Is Nothing) Then
                Me.Tables.Add(New PRReporteDataTable(ds.Tables("PRReporte")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRPrestamos As PRPrestamosDataTable
        Get
            Return Me.tablePRPrestamos
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CAT_ASOCIADOS As CAT_ASOCIADOSDataTable
        Get
            Return Me.tableCAT_ASOCIADOS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRReporte As PRReporteDataTable
        Get
            Return Me.tablePRReporte
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsDocsXCobrar = CType(MyBase.Clone,dsDocsXCobrar)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PRPrestamos")) Is Nothing) Then
            Me.Tables.Add(New PRPrestamosDataTable(ds.Tables("PRPrestamos")))
        End If
        If (Not (ds.Tables("CAT_ASOCIADOS")) Is Nothing) Then
            Me.Tables.Add(New CAT_ASOCIADOSDataTable(ds.Tables("CAT_ASOCIADOS")))
        End If
        If (Not (ds.Tables("PRReporte")) Is Nothing) Then
            Me.Tables.Add(New PRReporteDataTable(ds.Tables("PRReporte")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePRPrestamos = CType(Me.Tables("PRPrestamos"),PRPrestamosDataTable)
        If (Not (Me.tablePRPrestamos) Is Nothing) Then
            Me.tablePRPrestamos.InitVars
        End If
        Me.tableCAT_ASOCIADOS = CType(Me.Tables("CAT_ASOCIADOS"),CAT_ASOCIADOSDataTable)
        If (Not (Me.tableCAT_ASOCIADOS) Is Nothing) Then
            Me.tableCAT_ASOCIADOS.InitVars
        End If
        Me.tablePRReporte = CType(Me.Tables("PRReporte"),PRReporteDataTable)
        If (Not (Me.tablePRReporte) Is Nothing) Then
            Me.tablePRReporte.InitVars
        End If
        Me.relationCAT_ASOCIADOSPRPrestamos = Me.Relations("CAT_ASOCIADOSPRPrestamos")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsDocsXCobrar"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsDocsXCobrar.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePRPrestamos = New PRPrestamosDataTable
        Me.Tables.Add(Me.tablePRPrestamos)
        Me.tableCAT_ASOCIADOS = New CAT_ASOCIADOSDataTable
        Me.Tables.Add(Me.tableCAT_ASOCIADOS)
        Me.tablePRReporte = New PRReporteDataTable
        Me.Tables.Add(Me.tablePRReporte)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("CAT_ASOCIADOSPRPrestamos", New DataColumn() {Me.tableCAT_ASOCIADOS.DUIColumn}, New DataColumn() {Me.tablePRPrestamos.DUIColumn})
        Me.tablePRPrestamos.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationCAT_ASOCIADOSPRPrestamos = New DataRelation("CAT_ASOCIADOSPRPrestamos", New DataColumn() {Me.tableCAT_ASOCIADOS.DUIColumn}, New DataColumn() {Me.tablePRPrestamos.DUIColumn}, false)
        Me.Relations.Add(Me.relationCAT_ASOCIADOSPRPrestamos)
    End Sub
    
    Private Function ShouldSerializePRPrestamos() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCAT_ASOCIADOS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePRReporte() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PRPrestamosRowChangeEventHandler(ByVal sender As Object, ByVal e As PRPrestamosRowChangeEvent)
    
    Public Delegate Sub CAT_ASOCIADOSRowChangeEventHandler(ByVal sender As Object, ByVal e As CAT_ASOCIADOSRowChangeEvent)
    
    Public Delegate Sub PRReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As PRReporteRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRPrestamosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodPrestamo As DataColumn
        
        Private columnCodTipoCredito As DataColumn
        
        Private columnNoSocio As DataColumn
        
        Private columnDUI As DataColumn
        
        Private columnCuota As DataColumn
        
        Private columnCuotaTotal As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnTasa_Interes As DataColumn
        
        Private columnTasa_Interes_Mora As DataColumn
        
        Private columnPlazoMeses As DataColumn
        
        Private columnNoActa As DataColumn
        
        Private columnFechaActa As DataColumn
        
        Private columnFechaOtorgamiento As DataColumn
        
        Private columnFechaVencimiento As DataColumn
        
        Private columnCategoria As DataColumn
        
        Private columnCodEstadoPrestamo As DataColumn
        
        Private columnFechaUltimoPago As DataColumn
        
        Private columnSaldo_Capital As DataColumn
        
        Private columnIntereses_pagados As DataColumn
        
        Private columnSaldoDia_Interes As DataColumn
        
        Private columnSaldoDia_CapitalMora As DataColumn
        
        Private columnSaldoDia_InteresMora As DataColumn
        
        Private columnSaldoDia_SeguroDeuda As DataColumn
        
        Private columnSaldoDia_SeguroDaniosyLA As DataColumn
        
        Private columnSaldoDia_SeguroVida As DataColumn
        
        Private columnSaldoDia_SeguroDesempleo As DataColumn
        
        Private columnSaldoDia_Aportacion As DataColumn
        
        Private columnSaldoDia_Ahorro As DataColumn
        
        Private columnSaldoDia_ComisionManejo As DataColumn
        
        Private columnSaldoDia_Otros As DataColumn
        
        Private columnDiasMora As DataColumn
        
        Private columnEstado As DataColumn
        
        Private columnBaja As DataColumn
        
        Private columnTipo As DataColumn
        
        Friend Sub New()
            MyBase.New("PRPrestamos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodPrestamoColumn As DataColumn
            Get
                Return Me.columnCodPrestamo
            End Get
        End Property
        
        Friend ReadOnly Property CodTipoCreditoColumn As DataColumn
            Get
                Return Me.columnCodTipoCredito
            End Get
        End Property
        
        Friend ReadOnly Property NoSocioColumn As DataColumn
            Get
                Return Me.columnNoSocio
            End Get
        End Property
        
        Friend ReadOnly Property DUIColumn As DataColumn
            Get
                Return Me.columnDUI
            End Get
        End Property
        
        Friend ReadOnly Property CuotaColumn As DataColumn
            Get
                Return Me.columnCuota
            End Get
        End Property
        
        Friend ReadOnly Property CuotaTotalColumn As DataColumn
            Get
                Return Me.columnCuotaTotal
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property Tasa_InteresColumn As DataColumn
            Get
                Return Me.columnTasa_Interes
            End Get
        End Property
        
        Friend ReadOnly Property Tasa_Interes_MoraColumn As DataColumn
            Get
                Return Me.columnTasa_Interes_Mora
            End Get
        End Property
        
        Friend ReadOnly Property PlazoMesesColumn As DataColumn
            Get
                Return Me.columnPlazoMeses
            End Get
        End Property
        
        Friend ReadOnly Property NoActaColumn As DataColumn
            Get
                Return Me.columnNoActa
            End Get
        End Property
        
        Friend ReadOnly Property FechaActaColumn As DataColumn
            Get
                Return Me.columnFechaActa
            End Get
        End Property
        
        Friend ReadOnly Property FechaOtorgamientoColumn As DataColumn
            Get
                Return Me.columnFechaOtorgamiento
            End Get
        End Property
        
        Friend ReadOnly Property FechaVencimientoColumn As DataColumn
            Get
                Return Me.columnFechaVencimiento
            End Get
        End Property
        
        Friend ReadOnly Property CategoriaColumn As DataColumn
            Get
                Return Me.columnCategoria
            End Get
        End Property
        
        Friend ReadOnly Property CodEstadoPrestamoColumn As DataColumn
            Get
                Return Me.columnCodEstadoPrestamo
            End Get
        End Property
        
        Friend ReadOnly Property FechaUltimoPagoColumn As DataColumn
            Get
                Return Me.columnFechaUltimoPago
            End Get
        End Property
        
        Friend ReadOnly Property Saldo_CapitalColumn As DataColumn
            Get
                Return Me.columnSaldo_Capital
            End Get
        End Property
        
        Friend ReadOnly Property Intereses_pagadosColumn As DataColumn
            Get
                Return Me.columnIntereses_pagados
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_InteresColumn As DataColumn
            Get
                Return Me.columnSaldoDia_Interes
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_CapitalMoraColumn As DataColumn
            Get
                Return Me.columnSaldoDia_CapitalMora
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_InteresMoraColumn As DataColumn
            Get
                Return Me.columnSaldoDia_InteresMora
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_SeguroDeudaColumn As DataColumn
            Get
                Return Me.columnSaldoDia_SeguroDeuda
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_SeguroDaniosyLAColumn As DataColumn
            Get
                Return Me.columnSaldoDia_SeguroDaniosyLA
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_SeguroVidaColumn As DataColumn
            Get
                Return Me.columnSaldoDia_SeguroVida
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_SeguroDesempleoColumn As DataColumn
            Get
                Return Me.columnSaldoDia_SeguroDesempleo
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_AportacionColumn As DataColumn
            Get
                Return Me.columnSaldoDia_Aportacion
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_AhorroColumn As DataColumn
            Get
                Return Me.columnSaldoDia_Ahorro
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_ComisionManejoColumn As DataColumn
            Get
                Return Me.columnSaldoDia_ComisionManejo
            End Get
        End Property
        
        Friend ReadOnly Property SaldoDia_OtrosColumn As DataColumn
            Get
                Return Me.columnSaldoDia_Otros
            End Get
        End Property
        
        Friend ReadOnly Property DiasMoraColumn As DataColumn
            Get
                Return Me.columnDiasMora
            End Get
        End Property
        
        Friend ReadOnly Property EstadoColumn As DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        Friend ReadOnly Property BajaColumn As DataColumn
            Get
                Return Me.columnBaja
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRPrestamosRow
            Get
                Return CType(Me.Rows(index),PRPrestamosRow)
            End Get
        End Property
        
        Public Event PRPrestamosRowChanged As PRPrestamosRowChangeEventHandler
        
        Public Event PRPrestamosRowChanging As PRPrestamosRowChangeEventHandler
        
        Public Event PRPrestamosRowDeleted As PRPrestamosRowChangeEventHandler
        
        Public Event PRPrestamosRowDeleting As PRPrestamosRowChangeEventHandler
        
        Public Overloads Sub AddPRPrestamosRow(ByVal row As PRPrestamosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPRPrestamosRow( _
                    ByVal CodPrestamo As String,  _
                    ByVal CodTipoCredito As String,  _
                    ByVal NoSocio As String,  _
                    ByVal parentCAT_ASOCIADOSRowByCAT_ASOCIADOSPRPrestamos As CAT_ASOCIADOSRow,  _
                    ByVal Cuota As Double,  _
                    ByVal CuotaTotal As Double,  _
                    ByVal Monto As Double,  _
                    ByVal Tasa_Interes As Double,  _
                    ByVal Tasa_Interes_Mora As Double,  _
                    ByVal PlazoMeses As Integer,  _
                    ByVal NoActa As String,  _
                    ByVal FechaActa As Date,  _
                    ByVal FechaOtorgamiento As Date,  _
                    ByVal FechaVencimiento As Date,  _
                    ByVal Categoria As String,  _
                    ByVal CodEstadoPrestamo As String,  _
                    ByVal FechaUltimoPago As Date,  _
                    ByVal Saldo_Capital As Double,  _
                    ByVal Intereses_pagados As Double,  _
                    ByVal SaldoDia_Interes As Double,  _
                    ByVal SaldoDia_CapitalMora As Double,  _
                    ByVal SaldoDia_InteresMora As Double,  _
                    ByVal SaldoDia_SeguroDeuda As Double,  _
                    ByVal SaldoDia_SeguroDaniosyLA As Double,  _
                    ByVal SaldoDia_SeguroVida As Double,  _
                    ByVal SaldoDia_SeguroDesempleo As Double,  _
                    ByVal SaldoDia_Aportacion As Double,  _
                    ByVal SaldoDia_Ahorro As Double,  _
                    ByVal SaldoDia_ComisionManejo As Double,  _
                    ByVal SaldoDia_Otros As Double,  _
                    ByVal DiasMora As Integer,  _
                    ByVal Estado As String,  _
                    ByVal Baja As String,  _
                    ByVal Tipo As String) As PRPrestamosRow
            Dim rowPRPrestamosRow As PRPrestamosRow = CType(Me.NewRow,PRPrestamosRow)
            rowPRPrestamosRow.ItemArray = New Object() {CodPrestamo, CodTipoCredito, NoSocio, parentCAT_ASOCIADOSRowByCAT_ASOCIADOSPRPrestamos(0), Cuota, CuotaTotal, Monto, Tasa_Interes, Tasa_Interes_Mora, PlazoMeses, NoActa, FechaActa, FechaOtorgamiento, FechaVencimiento, Categoria, CodEstadoPrestamo, FechaUltimoPago, Saldo_Capital, Intereses_pagados, SaldoDia_Interes, SaldoDia_CapitalMora, SaldoDia_InteresMora, SaldoDia_SeguroDeuda, SaldoDia_SeguroDaniosyLA, SaldoDia_SeguroVida, SaldoDia_SeguroDesempleo, SaldoDia_Aportacion, SaldoDia_Ahorro, SaldoDia_ComisionManejo, SaldoDia_Otros, DiasMora, Estado, Baja, Tipo}
            Me.Rows.Add(rowPRPrestamosRow)
            Return rowPRPrestamosRow
        End Function
        
        Public Function FindByCodPrestamo(ByVal CodPrestamo As String) As PRPrestamosRow
            Return CType(Me.Rows.Find(New Object() {CodPrestamo}),PRPrestamosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PRPrestamosDataTable = CType(MyBase.Clone,PRPrestamosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PRPrestamosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodPrestamo = Me.Columns("CodPrestamo")
            Me.columnCodTipoCredito = Me.Columns("CodTipoCredito")
            Me.columnNoSocio = Me.Columns("NoSocio")
            Me.columnDUI = Me.Columns("DUI")
            Me.columnCuota = Me.Columns("Cuota")
            Me.columnCuotaTotal = Me.Columns("CuotaTotal")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnTasa_Interes = Me.Columns("Tasa_Interes")
            Me.columnTasa_Interes_Mora = Me.Columns("Tasa_Interes_Mora")
            Me.columnPlazoMeses = Me.Columns("PlazoMeses")
            Me.columnNoActa = Me.Columns("NoActa")
            Me.columnFechaActa = Me.Columns("FechaActa")
            Me.columnFechaOtorgamiento = Me.Columns("FechaOtorgamiento")
            Me.columnFechaVencimiento = Me.Columns("FechaVencimiento")
            Me.columnCategoria = Me.Columns("Categoria")
            Me.columnCodEstadoPrestamo = Me.Columns("CodEstadoPrestamo")
            Me.columnFechaUltimoPago = Me.Columns("FechaUltimoPago")
            Me.columnSaldo_Capital = Me.Columns("Saldo_Capital")
            Me.columnIntereses_pagados = Me.Columns("Intereses_pagados")
            Me.columnSaldoDia_Interes = Me.Columns("SaldoDia_Interes")
            Me.columnSaldoDia_CapitalMora = Me.Columns("SaldoDia_CapitalMora")
            Me.columnSaldoDia_InteresMora = Me.Columns("SaldoDia_InteresMora")
            Me.columnSaldoDia_SeguroDeuda = Me.Columns("SaldoDia_SeguroDeuda")
            Me.columnSaldoDia_SeguroDaniosyLA = Me.Columns("SaldoDia_SeguroDaniosyLA")
            Me.columnSaldoDia_SeguroVida = Me.Columns("SaldoDia_SeguroVida")
            Me.columnSaldoDia_SeguroDesempleo = Me.Columns("SaldoDia_SeguroDesempleo")
            Me.columnSaldoDia_Aportacion = Me.Columns("SaldoDia_Aportacion")
            Me.columnSaldoDia_Ahorro = Me.Columns("SaldoDia_Ahorro")
            Me.columnSaldoDia_ComisionManejo = Me.Columns("SaldoDia_ComisionManejo")
            Me.columnSaldoDia_Otros = Me.Columns("SaldoDia_Otros")
            Me.columnDiasMora = Me.Columns("DiasMora")
            Me.columnEstado = Me.Columns("Estado")
            Me.columnBaja = Me.Columns("Baja")
            Me.columnTipo = Me.Columns("Tipo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodPrestamo = New DataColumn("CodPrestamo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodPrestamo)
            Me.columnCodTipoCredito = New DataColumn("CodTipoCredito", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodTipoCredito)
            Me.columnNoSocio = New DataColumn("NoSocio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoSocio)
            Me.columnDUI = New DataColumn("DUI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDUI)
            Me.columnCuota = New DataColumn("Cuota", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuota)
            Me.columnCuotaTotal = New DataColumn("CuotaTotal", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuotaTotal)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnTasa_Interes = New DataColumn("Tasa_Interes", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTasa_Interes)
            Me.columnTasa_Interes_Mora = New DataColumn("Tasa_Interes_Mora", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTasa_Interes_Mora)
            Me.columnPlazoMeses = New DataColumn("PlazoMeses", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlazoMeses)
            Me.columnNoActa = New DataColumn("NoActa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoActa)
            Me.columnFechaActa = New DataColumn("FechaActa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaActa)
            Me.columnFechaOtorgamiento = New DataColumn("FechaOtorgamiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaOtorgamiento)
            Me.columnFechaVencimiento = New DataColumn("FechaVencimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaVencimiento)
            Me.columnCategoria = New DataColumn("Categoria", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCategoria)
            Me.columnCodEstadoPrestamo = New DataColumn("CodEstadoPrestamo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodEstadoPrestamo)
            Me.columnFechaUltimoPago = New DataColumn("FechaUltimoPago", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaUltimoPago)
            Me.columnSaldo_Capital = New DataColumn("Saldo_Capital", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo_Capital)
            Me.columnIntereses_pagados = New DataColumn("Intereses_pagados", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIntereses_pagados)
            Me.columnSaldoDia_Interes = New DataColumn("SaldoDia_Interes", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_Interes)
            Me.columnSaldoDia_CapitalMora = New DataColumn("SaldoDia_CapitalMora", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_CapitalMora)
            Me.columnSaldoDia_InteresMora = New DataColumn("SaldoDia_InteresMora", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_InteresMora)
            Me.columnSaldoDia_SeguroDeuda = New DataColumn("SaldoDia_SeguroDeuda", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_SeguroDeuda)
            Me.columnSaldoDia_SeguroDaniosyLA = New DataColumn("SaldoDia_SeguroDaniosyLA", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_SeguroDaniosyLA)
            Me.columnSaldoDia_SeguroVida = New DataColumn("SaldoDia_SeguroVida", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_SeguroVida)
            Me.columnSaldoDia_SeguroDesempleo = New DataColumn("SaldoDia_SeguroDesempleo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_SeguroDesempleo)
            Me.columnSaldoDia_Aportacion = New DataColumn("SaldoDia_Aportacion", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_Aportacion)
            Me.columnSaldoDia_Ahorro = New DataColumn("SaldoDia_Ahorro", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_Ahorro)
            Me.columnSaldoDia_ComisionManejo = New DataColumn("SaldoDia_ComisionManejo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_ComisionManejo)
            Me.columnSaldoDia_Otros = New DataColumn("SaldoDia_Otros", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoDia_Otros)
            Me.columnDiasMora = New DataColumn("DiasMora", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiasMora)
            Me.columnEstado = New DataColumn("Estado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstado)
            Me.columnBaja = New DataColumn("Baja", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaja)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.Constraints.Add(New UniqueConstraint("dsDocsXCobrarKey1", New DataColumn() {Me.columnCodPrestamo}, true))
            Me.columnCodPrestamo.AllowDBNull = false
            Me.columnCodPrestamo.Unique = true
        End Sub
        
        Public Function NewPRPrestamosRow() As PRPrestamosRow
            Return CType(Me.NewRow,PRPrestamosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PRPrestamosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRPrestamosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRPrestamosRowChangedEvent) Is Nothing) Then
                RaiseEvent PRPrestamosRowChanged(Me, New PRPrestamosRowChangeEvent(CType(e.Row,PRPrestamosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRPrestamosRowChangingEvent) Is Nothing) Then
                RaiseEvent PRPrestamosRowChanging(Me, New PRPrestamosRowChangeEvent(CType(e.Row,PRPrestamosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRPrestamosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRPrestamosRowDeleted(Me, New PRPrestamosRowChangeEvent(CType(e.Row,PRPrestamosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRPrestamosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRPrestamosRowDeleting(Me, New PRPrestamosRowChangeEvent(CType(e.Row,PRPrestamosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePRPrestamosRow(ByVal row As PRPrestamosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRPrestamosRow
        Inherits DataRow
        
        Private tablePRPrestamos As PRPrestamosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRPrestamos = CType(Me.Table,PRPrestamosDataTable)
        End Sub
        
        Public Property CodPrestamo As String
            Get
                Return CType(Me(Me.tablePRPrestamos.CodPrestamoColumn),String)
            End Get
            Set
                Me(Me.tablePRPrestamos.CodPrestamoColumn) = value
            End Set
        End Property
        
        Public Property CodTipoCredito As String
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.CodTipoCreditoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.CodTipoCreditoColumn) = value
            End Set
        End Property
        
        Public Property NoSocio As String
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.NoSocioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.NoSocioColumn) = value
            End Set
        End Property
        
        Public Property DUI As String
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.DUIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.DUIColumn) = value
            End Set
        End Property
        
        Public Property Cuota As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.CuotaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.CuotaColumn) = value
            End Set
        End Property
        
        Public Property CuotaTotal As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.CuotaTotalColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.CuotaTotalColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.MontoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.MontoColumn) = value
            End Set
        End Property
        
        Public Property Tasa_Interes As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.Tasa_InteresColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.Tasa_InteresColumn) = value
            End Set
        End Property
        
        Public Property Tasa_Interes_Mora As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.Tasa_Interes_MoraColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.Tasa_Interes_MoraColumn) = value
            End Set
        End Property
        
        Public Property PlazoMeses As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.PlazoMesesColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.PlazoMesesColumn) = value
            End Set
        End Property
        
        Public Property NoActa As String
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.NoActaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.NoActaColumn) = value
            End Set
        End Property
        
        Public Property FechaActa As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.FechaActaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.FechaActaColumn) = value
            End Set
        End Property
        
        Public Property FechaOtorgamiento As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.FechaOtorgamientoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.FechaOtorgamientoColumn) = value
            End Set
        End Property
        
        Public Property FechaVencimiento As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.FechaVencimientoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.FechaVencimientoColumn) = value
            End Set
        End Property
        
        Public Property Categoria As String
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.CategoriaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.CategoriaColumn) = value
            End Set
        End Property
        
        Public Property CodEstadoPrestamo As String
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.CodEstadoPrestamoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.CodEstadoPrestamoColumn) = value
            End Set
        End Property
        
        Public Property FechaUltimoPago As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.FechaUltimoPagoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.FechaUltimoPagoColumn) = value
            End Set
        End Property
        
        Public Property Saldo_Capital As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.Saldo_CapitalColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.Saldo_CapitalColumn) = value
            End Set
        End Property
        
        Public Property Intereses_pagados As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.Intereses_pagadosColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.Intereses_pagadosColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_Interes As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_InteresColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_InteresColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_CapitalMora As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_CapitalMoraColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_CapitalMoraColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_InteresMora As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_InteresMoraColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_InteresMoraColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_SeguroDeuda As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_SeguroDeudaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_SeguroDeudaColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_SeguroDaniosyLA As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_SeguroDaniosyLAColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_SeguroDaniosyLAColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_SeguroVida As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_SeguroVidaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_SeguroVidaColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_SeguroDesempleo As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_SeguroDesempleoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_SeguroDesempleoColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_Aportacion As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_AportacionColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_AportacionColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_Ahorro As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_AhorroColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_AhorroColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_ComisionManejo As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_ComisionManejoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_ComisionManejoColumn) = value
            End Set
        End Property
        
        Public Property SaldoDia_Otros As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.SaldoDia_OtrosColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.SaldoDia_OtrosColumn) = value
            End Set
        End Property
        
        Public Property DiasMora As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.DiasMoraColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.DiasMoraColumn) = value
            End Set
        End Property
        
        Public Property Estado As String
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.EstadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.EstadoColumn) = value
            End Set
        End Property
        
        Public Property Baja As String
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.BajaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.BajaColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tablePRPrestamos.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRPrestamos.TipoColumn) = value
            End Set
        End Property
        
        Public Property CAT_ASOCIADOSRow As CAT_ASOCIADOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CAT_ASOCIADOSPRPrestamos")),CAT_ASOCIADOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CAT_ASOCIADOSPRPrestamos"))
            End Set
        End Property
        
        Public Function IsCodTipoCreditoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.CodTipoCreditoColumn)
        End Function
        
        Public Sub SetCodTipoCreditoNull()
            Me(Me.tablePRPrestamos.CodTipoCreditoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoSocioNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.NoSocioColumn)
        End Function
        
        Public Sub SetNoSocioNull()
            Me(Me.tablePRPrestamos.NoSocioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDUINull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.DUIColumn)
        End Function
        
        Public Sub SetDUINull()
            Me(Me.tablePRPrestamos.DUIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuotaNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.CuotaColumn)
        End Function
        
        Public Sub SetCuotaNull()
            Me(Me.tablePRPrestamos.CuotaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuotaTotalNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.CuotaTotalColumn)
        End Function
        
        Public Sub SetCuotaTotalNull()
            Me(Me.tablePRPrestamos.CuotaTotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tablePRPrestamos.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTasa_InteresNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.Tasa_InteresColumn)
        End Function
        
        Public Sub SetTasa_InteresNull()
            Me(Me.tablePRPrestamos.Tasa_InteresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTasa_Interes_MoraNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.Tasa_Interes_MoraColumn)
        End Function
        
        Public Sub SetTasa_Interes_MoraNull()
            Me(Me.tablePRPrestamos.Tasa_Interes_MoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlazoMesesNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.PlazoMesesColumn)
        End Function
        
        Public Sub SetPlazoMesesNull()
            Me(Me.tablePRPrestamos.PlazoMesesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoActaNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.NoActaColumn)
        End Function
        
        Public Sub SetNoActaNull()
            Me(Me.tablePRPrestamos.NoActaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaActaNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.FechaActaColumn)
        End Function
        
        Public Sub SetFechaActaNull()
            Me(Me.tablePRPrestamos.FechaActaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaOtorgamientoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.FechaOtorgamientoColumn)
        End Function
        
        Public Sub SetFechaOtorgamientoNull()
            Me(Me.tablePRPrestamos.FechaOtorgamientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaVencimientoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.FechaVencimientoColumn)
        End Function
        
        Public Sub SetFechaVencimientoNull()
            Me(Me.tablePRPrestamos.FechaVencimientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCategoriaNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.CategoriaColumn)
        End Function
        
        Public Sub SetCategoriaNull()
            Me(Me.tablePRPrestamos.CategoriaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodEstadoPrestamoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.CodEstadoPrestamoColumn)
        End Function
        
        Public Sub SetCodEstadoPrestamoNull()
            Me(Me.tablePRPrestamos.CodEstadoPrestamoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaUltimoPagoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.FechaUltimoPagoColumn)
        End Function
        
        Public Sub SetFechaUltimoPagoNull()
            Me(Me.tablePRPrestamos.FechaUltimoPagoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldo_CapitalNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.Saldo_CapitalColumn)
        End Function
        
        Public Sub SetSaldo_CapitalNull()
            Me(Me.tablePRPrestamos.Saldo_CapitalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIntereses_pagadosNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.Intereses_pagadosColumn)
        End Function
        
        Public Sub SetIntereses_pagadosNull()
            Me(Me.tablePRPrestamos.Intereses_pagadosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_InteresNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_InteresColumn)
        End Function
        
        Public Sub SetSaldoDia_InteresNull()
            Me(Me.tablePRPrestamos.SaldoDia_InteresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_CapitalMoraNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_CapitalMoraColumn)
        End Function
        
        Public Sub SetSaldoDia_CapitalMoraNull()
            Me(Me.tablePRPrestamos.SaldoDia_CapitalMoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_InteresMoraNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_InteresMoraColumn)
        End Function
        
        Public Sub SetSaldoDia_InteresMoraNull()
            Me(Me.tablePRPrestamos.SaldoDia_InteresMoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_SeguroDeudaNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_SeguroDeudaColumn)
        End Function
        
        Public Sub SetSaldoDia_SeguroDeudaNull()
            Me(Me.tablePRPrestamos.SaldoDia_SeguroDeudaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_SeguroDaniosyLANull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_SeguroDaniosyLAColumn)
        End Function
        
        Public Sub SetSaldoDia_SeguroDaniosyLANull()
            Me(Me.tablePRPrestamos.SaldoDia_SeguroDaniosyLAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_SeguroVidaNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_SeguroVidaColumn)
        End Function
        
        Public Sub SetSaldoDia_SeguroVidaNull()
            Me(Me.tablePRPrestamos.SaldoDia_SeguroVidaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_SeguroDesempleoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_SeguroDesempleoColumn)
        End Function
        
        Public Sub SetSaldoDia_SeguroDesempleoNull()
            Me(Me.tablePRPrestamos.SaldoDia_SeguroDesempleoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_AportacionNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_AportacionColumn)
        End Function
        
        Public Sub SetSaldoDia_AportacionNull()
            Me(Me.tablePRPrestamos.SaldoDia_AportacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_AhorroNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_AhorroColumn)
        End Function
        
        Public Sub SetSaldoDia_AhorroNull()
            Me(Me.tablePRPrestamos.SaldoDia_AhorroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_ComisionManejoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_ComisionManejoColumn)
        End Function
        
        Public Sub SetSaldoDia_ComisionManejoNull()
            Me(Me.tablePRPrestamos.SaldoDia_ComisionManejoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoDia_OtrosNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.SaldoDia_OtrosColumn)
        End Function
        
        Public Sub SetSaldoDia_OtrosNull()
            Me(Me.tablePRPrestamos.SaldoDia_OtrosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiasMoraNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.DiasMoraColumn)
        End Function
        
        Public Sub SetDiasMoraNull()
            Me(Me.tablePRPrestamos.DiasMoraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.EstadoColumn)
        End Function
        
        Public Sub SetEstadoNull()
            Me(Me.tablePRPrestamos.EstadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBajaNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.BajaColumn)
        End Function
        
        Public Sub SetBajaNull()
            Me(Me.tablePRPrestamos.BajaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablePRPrestamos.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tablePRPrestamos.TipoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRPrestamosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PRPrestamosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PRPrestamosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PRPrestamosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CAT_ASOCIADOSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDUI As DataColumn
        
        Private columnCorrelativo As DataColumn
        
        Private columnNoSocio As DataColumn
        
        Private columnApellido1 As DataColumn
        
        Private columnApellido2 As DataColumn
        
        Private columnApellidoCas As DataColumn
        
        Private columnNombres As DataColumn
        
        Private columnFecha_Nac As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnTelCasa As DataColumn
        
        Private columnTelOficina As DataColumn
        
        Private columnExtensionOfic As DataColumn
        
        Private columnCelular As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnCodProfesion As DataColumn
        
        Private columnTituloObtenido As DataColumn
        
        Private columnCodNacionalidad As DataColumn
        
        Private columnLugarTrabajo As DataColumn
        
        Private columnDepartamentoTrabajo As DataColumn
        
        Private columnFechaInicioTrab As DataColumn
        
        Private columnDireccionTrabajo As DataColumn
        
        Private columnCargo As DataColumn
        
        Private columnSalario As DataColumn
        
        Private columnEstadoCivil As DataColumn
        
        Private columnNombreConyugue As DataColumn
        
        Friend Sub New()
            MyBase.New("CAT_ASOCIADOS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DUIColumn As DataColumn
            Get
                Return Me.columnDUI
            End Get
        End Property
        
        Friend ReadOnly Property CorrelativoColumn As DataColumn
            Get
                Return Me.columnCorrelativo
            End Get
        End Property
        
        Friend ReadOnly Property NoSocioColumn As DataColumn
            Get
                Return Me.columnNoSocio
            End Get
        End Property
        
        Friend ReadOnly Property Apellido1Column As DataColumn
            Get
                Return Me.columnApellido1
            End Get
        End Property
        
        Friend ReadOnly Property Apellido2Column As DataColumn
            Get
                Return Me.columnApellido2
            End Get
        End Property
        
        Friend ReadOnly Property ApellidoCasColumn As DataColumn
            Get
                Return Me.columnApellidoCas
            End Get
        End Property
        
        Friend ReadOnly Property NombresColumn As DataColumn
            Get
                Return Me.columnNombres
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_NacColumn As DataColumn
            Get
                Return Me.columnFecha_Nac
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property TelCasaColumn As DataColumn
            Get
                Return Me.columnTelCasa
            End Get
        End Property
        
        Friend ReadOnly Property TelOficinaColumn As DataColumn
            Get
                Return Me.columnTelOficina
            End Get
        End Property
        
        Friend ReadOnly Property ExtensionOficColumn As DataColumn
            Get
                Return Me.columnExtensionOfic
            End Get
        End Property
        
        Friend ReadOnly Property CelularColumn As DataColumn
            Get
                Return Me.columnCelular
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property CodProfesionColumn As DataColumn
            Get
                Return Me.columnCodProfesion
            End Get
        End Property
        
        Friend ReadOnly Property TituloObtenidoColumn As DataColumn
            Get
                Return Me.columnTituloObtenido
            End Get
        End Property
        
        Friend ReadOnly Property CodNacionalidadColumn As DataColumn
            Get
                Return Me.columnCodNacionalidad
            End Get
        End Property
        
        Friend ReadOnly Property LugarTrabajoColumn As DataColumn
            Get
                Return Me.columnLugarTrabajo
            End Get
        End Property
        
        Friend ReadOnly Property DepartamentoTrabajoColumn As DataColumn
            Get
                Return Me.columnDepartamentoTrabajo
            End Get
        End Property
        
        Friend ReadOnly Property FechaInicioTrabColumn As DataColumn
            Get
                Return Me.columnFechaInicioTrab
            End Get
        End Property
        
        Friend ReadOnly Property DireccionTrabajoColumn As DataColumn
            Get
                Return Me.columnDireccionTrabajo
            End Get
        End Property
        
        Friend ReadOnly Property CargoColumn As DataColumn
            Get
                Return Me.columnCargo
            End Get
        End Property
        
        Friend ReadOnly Property SalarioColumn As DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        Friend ReadOnly Property EstadoCivilColumn As DataColumn
            Get
                Return Me.columnEstadoCivil
            End Get
        End Property
        
        Friend ReadOnly Property NombreConyugueColumn As DataColumn
            Get
                Return Me.columnNombreConyugue
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CAT_ASOCIADOSRow
            Get
                Return CType(Me.Rows(index),CAT_ASOCIADOSRow)
            End Get
        End Property
        
        Public Event CAT_ASOCIADOSRowChanged As CAT_ASOCIADOSRowChangeEventHandler
        
        Public Event CAT_ASOCIADOSRowChanging As CAT_ASOCIADOSRowChangeEventHandler
        
        Public Event CAT_ASOCIADOSRowDeleted As CAT_ASOCIADOSRowChangeEventHandler
        
        Public Event CAT_ASOCIADOSRowDeleting As CAT_ASOCIADOSRowChangeEventHandler
        
        Public Overloads Sub AddCAT_ASOCIADOSRow(ByVal row As CAT_ASOCIADOSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCAT_ASOCIADOSRow( _
                    ByVal DUI As String,  _
                    ByVal Correlativo As Integer,  _
                    ByVal NoSocio As String,  _
                    ByVal Apellido1 As String,  _
                    ByVal Apellido2 As String,  _
                    ByVal ApellidoCas As String,  _
                    ByVal Nombres As String,  _
                    ByVal Fecha_Nac As Date,  _
                    ByVal Direccion As String,  _
                    ByVal TelCasa As String,  _
                    ByVal TelOficina As String,  _
                    ByVal ExtensionOfic As String,  _
                    ByVal Celular As String,  _
                    ByVal Email As String,  _
                    ByVal CodProfesion As String,  _
                    ByVal TituloObtenido As String,  _
                    ByVal CodNacionalidad As String,  _
                    ByVal LugarTrabajo As String,  _
                    ByVal DepartamentoTrabajo As String,  _
                    ByVal FechaInicioTrab As Date,  _
                    ByVal DireccionTrabajo As String,  _
                    ByVal Cargo As String,  _
                    ByVal Salario As Double,  _
                    ByVal EstadoCivil As String,  _
                    ByVal NombreConyugue As String) As CAT_ASOCIADOSRow
            Dim rowCAT_ASOCIADOSRow As CAT_ASOCIADOSRow = CType(Me.NewRow,CAT_ASOCIADOSRow)
            rowCAT_ASOCIADOSRow.ItemArray = New Object() {DUI, Correlativo, NoSocio, Apellido1, Apellido2, ApellidoCas, Nombres, Fecha_Nac, Direccion, TelCasa, TelOficina, ExtensionOfic, Celular, Email, CodProfesion, TituloObtenido, CodNacionalidad, LugarTrabajo, DepartamentoTrabajo, FechaInicioTrab, DireccionTrabajo, Cargo, Salario, EstadoCivil, NombreConyugue}
            Me.Rows.Add(rowCAT_ASOCIADOSRow)
            Return rowCAT_ASOCIADOSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CAT_ASOCIADOSDataTable = CType(MyBase.Clone,CAT_ASOCIADOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CAT_ASOCIADOSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDUI = Me.Columns("DUI")
            Me.columnCorrelativo = Me.Columns("Correlativo")
            Me.columnNoSocio = Me.Columns("NoSocio")
            Me.columnApellido1 = Me.Columns("Apellido1")
            Me.columnApellido2 = Me.Columns("Apellido2")
            Me.columnApellidoCas = Me.Columns("ApellidoCas")
            Me.columnNombres = Me.Columns("Nombres")
            Me.columnFecha_Nac = Me.Columns("Fecha_Nac")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnTelCasa = Me.Columns("TelCasa")
            Me.columnTelOficina = Me.Columns("TelOficina")
            Me.columnExtensionOfic = Me.Columns("ExtensionOfic")
            Me.columnCelular = Me.Columns("Celular")
            Me.columnEmail = Me.Columns("Email")
            Me.columnCodProfesion = Me.Columns("CodProfesion")
            Me.columnTituloObtenido = Me.Columns("TituloObtenido")
            Me.columnCodNacionalidad = Me.Columns("CodNacionalidad")
            Me.columnLugarTrabajo = Me.Columns("LugarTrabajo")
            Me.columnDepartamentoTrabajo = Me.Columns("DepartamentoTrabajo")
            Me.columnFechaInicioTrab = Me.Columns("FechaInicioTrab")
            Me.columnDireccionTrabajo = Me.Columns("DireccionTrabajo")
            Me.columnCargo = Me.Columns("Cargo")
            Me.columnSalario = Me.Columns("Salario")
            Me.columnEstadoCivil = Me.Columns("EstadoCivil")
            Me.columnNombreConyugue = Me.Columns("NombreConyugue")
        End Sub
        
        Private Sub InitClass()
            Me.columnDUI = New DataColumn("DUI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDUI)
            Me.columnCorrelativo = New DataColumn("Correlativo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorrelativo)
            Me.columnNoSocio = New DataColumn("NoSocio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoSocio)
            Me.columnApellido1 = New DataColumn("Apellido1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido1)
            Me.columnApellido2 = New DataColumn("Apellido2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellido2)
            Me.columnApellidoCas = New DataColumn("ApellidoCas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApellidoCas)
            Me.columnNombres = New DataColumn("Nombres", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombres)
            Me.columnFecha_Nac = New DataColumn("Fecha_Nac", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Nac)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnTelCasa = New DataColumn("TelCasa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelCasa)
            Me.columnTelOficina = New DataColumn("TelOficina", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelOficina)
            Me.columnExtensionOfic = New DataColumn("ExtensionOfic", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtensionOfic)
            Me.columnCelular = New DataColumn("Celular", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCelular)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnCodProfesion = New DataColumn("CodProfesion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodProfesion)
            Me.columnTituloObtenido = New DataColumn("TituloObtenido", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTituloObtenido)
            Me.columnCodNacionalidad = New DataColumn("CodNacionalidad", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodNacionalidad)
            Me.columnLugarTrabajo = New DataColumn("LugarTrabajo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLugarTrabajo)
            Me.columnDepartamentoTrabajo = New DataColumn("DepartamentoTrabajo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDepartamentoTrabajo)
            Me.columnFechaInicioTrab = New DataColumn("FechaInicioTrab", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaInicioTrab)
            Me.columnDireccionTrabajo = New DataColumn("DireccionTrabajo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccionTrabajo)
            Me.columnCargo = New DataColumn("Cargo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCargo)
            Me.columnSalario = New DataColumn("Salario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalario)
            Me.columnEstadoCivil = New DataColumn("EstadoCivil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstadoCivil)
            Me.columnNombreConyugue = New DataColumn("NombreConyugue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreConyugue)
            Me.Constraints.Add(New UniqueConstraint("dsDocsXCobrarKey2", New DataColumn() {Me.columnDUI}, false))
            Me.columnDUI.AllowDBNull = false
            Me.columnDUI.Unique = true
            Me.columnCorrelativo.AllowDBNull = false
            Me.columnNoSocio.AllowDBNull = false
            Me.columnApellido1.AllowDBNull = false
            Me.columnNombres.AllowDBNull = false
        End Sub
        
        Public Function NewCAT_ASOCIADOSRow() As CAT_ASOCIADOSRow
            Return CType(Me.NewRow,CAT_ASOCIADOSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CAT_ASOCIADOSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CAT_ASOCIADOSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CAT_ASOCIADOSRowChangedEvent) Is Nothing) Then
                RaiseEvent CAT_ASOCIADOSRowChanged(Me, New CAT_ASOCIADOSRowChangeEvent(CType(e.Row,CAT_ASOCIADOSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CAT_ASOCIADOSRowChangingEvent) Is Nothing) Then
                RaiseEvent CAT_ASOCIADOSRowChanging(Me, New CAT_ASOCIADOSRowChangeEvent(CType(e.Row,CAT_ASOCIADOSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CAT_ASOCIADOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CAT_ASOCIADOSRowDeleted(Me, New CAT_ASOCIADOSRowChangeEvent(CType(e.Row,CAT_ASOCIADOSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CAT_ASOCIADOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CAT_ASOCIADOSRowDeleting(Me, New CAT_ASOCIADOSRowChangeEvent(CType(e.Row,CAT_ASOCIADOSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCAT_ASOCIADOSRow(ByVal row As CAT_ASOCIADOSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CAT_ASOCIADOSRow
        Inherits DataRow
        
        Private tableCAT_ASOCIADOS As CAT_ASOCIADOSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCAT_ASOCIADOS = CType(Me.Table,CAT_ASOCIADOSDataTable)
        End Sub
        
        Public Property DUI As String
            Get
                Return CType(Me(Me.tableCAT_ASOCIADOS.DUIColumn),String)
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.DUIColumn) = value
            End Set
        End Property
        
        Public Property Correlativo As Integer
            Get
                Return CType(Me(Me.tableCAT_ASOCIADOS.CorrelativoColumn),Integer)
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.CorrelativoColumn) = value
            End Set
        End Property
        
        Public Property NoSocio As String
            Get
                Return CType(Me(Me.tableCAT_ASOCIADOS.NoSocioColumn),String)
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.NoSocioColumn) = value
            End Set
        End Property
        
        Public Property Apellido1 As String
            Get
                Return CType(Me(Me.tableCAT_ASOCIADOS.Apellido1Column),String)
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.Apellido1Column) = value
            End Set
        End Property
        
        Public Property Apellido2 As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.Apellido2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.Apellido2Column) = value
            End Set
        End Property
        
        Public Property ApellidoCas As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.ApellidoCasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.ApellidoCasColumn) = value
            End Set
        End Property
        
        Public Property Nombres As String
            Get
                Return CType(Me(Me.tableCAT_ASOCIADOS.NombresColumn),String)
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.NombresColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Nac As Date
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.Fecha_NacColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.Fecha_NacColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.DireccionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.DireccionColumn) = value
            End Set
        End Property
        
        Public Property TelCasa As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.TelCasaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.TelCasaColumn) = value
            End Set
        End Property
        
        Public Property TelOficina As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.TelOficinaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.TelOficinaColumn) = value
            End Set
        End Property
        
        Public Property ExtensionOfic As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.ExtensionOficColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.ExtensionOficColumn) = value
            End Set
        End Property
        
        Public Property Celular As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.CelularColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.CelularColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.EmailColumn) = value
            End Set
        End Property
        
        Public Property CodProfesion As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.CodProfesionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.CodProfesionColumn) = value
            End Set
        End Property
        
        Public Property TituloObtenido As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.TituloObtenidoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.TituloObtenidoColumn) = value
            End Set
        End Property
        
        Public Property CodNacionalidad As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.CodNacionalidadColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.CodNacionalidadColumn) = value
            End Set
        End Property
        
        Public Property LugarTrabajo As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.LugarTrabajoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.LugarTrabajoColumn) = value
            End Set
        End Property
        
        Public Property DepartamentoTrabajo As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.DepartamentoTrabajoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.DepartamentoTrabajoColumn) = value
            End Set
        End Property
        
        Public Property FechaInicioTrab As Date
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.FechaInicioTrabColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.FechaInicioTrabColumn) = value
            End Set
        End Property
        
        Public Property DireccionTrabajo As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.DireccionTrabajoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.DireccionTrabajoColumn) = value
            End Set
        End Property
        
        Public Property Cargo As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.CargoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.CargoColumn) = value
            End Set
        End Property
        
        Public Property Salario As Double
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.SalarioColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.SalarioColumn) = value
            End Set
        End Property
        
        Public Property EstadoCivil As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.EstadoCivilColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.EstadoCivilColumn) = value
            End Set
        End Property
        
        Public Property NombreConyugue As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_ASOCIADOS.NombreConyugueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_ASOCIADOS.NombreConyugueColumn) = value
            End Set
        End Property
        
        Public Function IsApellido2Null() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.Apellido2Column)
        End Function
        
        Public Sub SetApellido2Null()
            Me(Me.tableCAT_ASOCIADOS.Apellido2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApellidoCasNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.ApellidoCasColumn)
        End Function
        
        Public Sub SetApellidoCasNull()
            Me(Me.tableCAT_ASOCIADOS.ApellidoCasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFecha_NacNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.Fecha_NacColumn)
        End Function
        
        Public Sub SetFecha_NacNull()
            Me(Me.tableCAT_ASOCIADOS.Fecha_NacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.DireccionColumn)
        End Function
        
        Public Sub SetDireccionNull()
            Me(Me.tableCAT_ASOCIADOS.DireccionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelCasaNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.TelCasaColumn)
        End Function
        
        Public Sub SetTelCasaNull()
            Me(Me.tableCAT_ASOCIADOS.TelCasaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelOficinaNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.TelOficinaColumn)
        End Function
        
        Public Sub SetTelOficinaNull()
            Me(Me.tableCAT_ASOCIADOS.TelOficinaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtensionOficNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.ExtensionOficColumn)
        End Function
        
        Public Sub SetExtensionOficNull()
            Me(Me.tableCAT_ASOCIADOS.ExtensionOficColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCelularNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.CelularColumn)
        End Function
        
        Public Sub SetCelularNull()
            Me(Me.tableCAT_ASOCIADOS.CelularColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableCAT_ASOCIADOS.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodProfesionNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.CodProfesionColumn)
        End Function
        
        Public Sub SetCodProfesionNull()
            Me(Me.tableCAT_ASOCIADOS.CodProfesionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTituloObtenidoNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.TituloObtenidoColumn)
        End Function
        
        Public Sub SetTituloObtenidoNull()
            Me(Me.tableCAT_ASOCIADOS.TituloObtenidoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodNacionalidadNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.CodNacionalidadColumn)
        End Function
        
        Public Sub SetCodNacionalidadNull()
            Me(Me.tableCAT_ASOCIADOS.CodNacionalidadColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLugarTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.LugarTrabajoColumn)
        End Function
        
        Public Sub SetLugarTrabajoNull()
            Me(Me.tableCAT_ASOCIADOS.LugarTrabajoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartamentoTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.DepartamentoTrabajoColumn)
        End Function
        
        Public Sub SetDepartamentoTrabajoNull()
            Me(Me.tableCAT_ASOCIADOS.DepartamentoTrabajoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaInicioTrabNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.FechaInicioTrabColumn)
        End Function
        
        Public Sub SetFechaInicioTrabNull()
            Me(Me.tableCAT_ASOCIADOS.FechaInicioTrabColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDireccionTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.DireccionTrabajoColumn)
        End Function
        
        Public Sub SetDireccionTrabajoNull()
            Me(Me.tableCAT_ASOCIADOS.DireccionTrabajoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCargoNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.CargoColumn)
        End Function
        
        Public Sub SetCargoNull()
            Me(Me.tableCAT_ASOCIADOS.CargoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalarioNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.SalarioColumn)
        End Function
        
        Public Sub SetSalarioNull()
            Me(Me.tableCAT_ASOCIADOS.SalarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.EstadoCivilColumn)
        End Function
        
        Public Sub SetEstadoCivilNull()
            Me(Me.tableCAT_ASOCIADOS.EstadoCivilColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombreConyugueNull() As Boolean
            Return Me.IsNull(Me.tableCAT_ASOCIADOS.NombreConyugueColumn)
        End Function
        
        Public Sub SetNombreConyugueNull()
            Me(Me.tableCAT_ASOCIADOS.NombreConyugueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPRPrestamosRows() As PRPrestamosRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CAT_ASOCIADOSPRPrestamos")),PRPrestamosRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CAT_ASOCIADOSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CAT_ASOCIADOSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CAT_ASOCIADOSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CAT_ASOCIADOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRReporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMes As DataColumn
        
        Private columnAnnio As DataColumn
        
        Private columnEmpresa As DataColumn
        
        Private columnReporte As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("PRReporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MesColumn As DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        Friend ReadOnly Property AnnioColumn As DataColumn
            Get
                Return Me.columnAnnio
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property ReporteColumn As DataColumn
            Get
                Return Me.columnReporte
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRReporteRow
            Get
                Return CType(Me.Rows(index),PRReporteRow)
            End Get
        End Property
        
        Public Event PRReporteRowChanged As PRReporteRowChangeEventHandler
        
        Public Event PRReporteRowChanging As PRReporteRowChangeEventHandler
        
        Public Event PRReporteRowDeleted As PRReporteRowChangeEventHandler
        
        Public Event PRReporteRowDeleting As PRReporteRowChangeEventHandler
        
        Public Overloads Sub AddPRReporteRow(ByVal row As PRReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPRReporteRow(ByVal Mes As String, ByVal Annio As Integer, ByVal Empresa As String, ByVal Reporte As String, ByVal Descripcion As String) As PRReporteRow
            Dim rowPRReporteRow As PRReporteRow = CType(Me.NewRow,PRReporteRow)
            rowPRReporteRow.ItemArray = New Object() {Mes, Annio, Empresa, Reporte, Descripcion}
            Me.Rows.Add(rowPRReporteRow)
            Return rowPRReporteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PRReporteDataTable = CType(MyBase.Clone,PRReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PRReporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMes = Me.Columns("Mes")
            Me.columnAnnio = Me.Columns("Annio")
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnReporte = Me.Columns("Reporte")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnMes = New DataColumn("Mes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMes)
            Me.columnAnnio = New DataColumn("Annio", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnnio)
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnReporte = New DataColumn("Reporte", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReporte)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
        End Sub
        
        Public Function NewPRReporteRow() As PRReporteRow
            Return CType(Me.NewRow,PRReporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PRReporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRReporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent PRReporteRowChanged(Me, New PRReporteRowChangeEvent(CType(e.Row,PRReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent PRReporteRowChanging(Me, New PRReporteRowChangeEvent(CType(e.Row,PRReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRReporteRowDeleted(Me, New PRReporteRowChangeEvent(CType(e.Row,PRReporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRReporteRowDeleting(Me, New PRReporteRowChangeEvent(CType(e.Row,PRReporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePRReporteRow(ByVal row As PRReporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRReporteRow
        Inherits DataRow
        
        Private tablePRReporte As PRReporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRReporte = CType(Me.Table,PRReporteDataTable)
        End Sub
        
        Public Property Mes As String
            Get
                Try 
                    Return CType(Me(Me.tablePRReporte.MesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRReporte.MesColumn) = value
            End Set
        End Property
        
        Public Property Annio As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRReporte.AnnioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRReporte.AnnioColumn) = value
            End Set
        End Property
        
        Public Property Empresa As String
            Get
                Try 
                    Return CType(Me(Me.tablePRReporte.EmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRReporte.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Reporte As String
            Get
                Try 
                    Return CType(Me(Me.tablePRReporte.ReporteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRReporte.ReporteColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tablePRReporte.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRReporte.DescripcionColumn) = value
            End Set
        End Property
        
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablePRReporte.MesColumn)
        End Function
        
        Public Sub SetMesNull()
            Me(Me.tablePRReporte.MesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAnnioNull() As Boolean
            Return Me.IsNull(Me.tablePRReporte.AnnioColumn)
        End Function
        
        Public Sub SetAnnioNull()
            Me(Me.tablePRReporte.AnnioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tablePRReporte.EmpresaColumn)
        End Function
        
        Public Sub SetEmpresaNull()
            Me(Me.tablePRReporte.EmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReporteNull() As Boolean
            Return Me.IsNull(Me.tablePRReporte.ReporteColumn)
        End Function
        
        Public Sub SetReporteNull()
            Me(Me.tablePRReporte.ReporteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablePRReporte.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tablePRReporte.DescripcionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRReporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PRReporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PRReporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PRReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
